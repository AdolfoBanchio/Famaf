#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\setcounter{MaxMatrixCols}{30}%
\usepackage{amsfonts}\usepackage{graphicx}
%TCIDATA{OutputFilter=latex2.dll}
%TCIDATA{Version=5.50.0.2953}
%TCIDATA{CSTFile=LaTeX article (bright).cst}
%TCIDATA{Created=Thursday, March 08, 2007 06:44:18}
%TCIDATA{LastRevised=Sunday, April 28, 2024 18:57:59}
%TCIDATA{<META NAME="GraphicsSave" CONTENT="32">}
%TCIDATA{<META NAME="SaveForMode" CONTENT="1">}
%TCIDATA{BibliographyScheme=BibTeX}
%TCIDATA{<META NAME="DocumentShell" CONTENT="Standard LaTeX\Blank - Standard LaTeX Article">}
%TCIDATA{Language=American English}
%TCIDATA{ComputeDefs=
%$\varepsilon$
%$F_{V(\mathbf{A})}(x_{1},...,x_{n})=\{t_{1},...,t_{k}\}$
%}
%BeginMSIPreambleData
\providecommand{\U}[1]{\protect\rule{.1in}{.1in}}
%EndMSIPreambleData
\newtheorem{theorem}{Theorem}\newtheorem{acknowledgement}[theorem]{Acknowledgement}\newtheorem{algorithm}[theorem]{Algorithm}\newtheorem{axiom}[theorem]{Axiom}\newtheorem{case}[theorem]{Case}\newtheorem{claim}[theorem]{Claim}\newtheorem{conclusion}[theorem]{Conclusion}\newtheorem{condition}[theorem]{Condition}\newtheorem{conjecture}[theorem]{Conjecture}\newtheorem{corollary}[theorem]{Corollary}\newtheorem{criterion}[theorem]{Criterion}\newtheorem{definition}[theorem]{Definition}\newtheorem{example}[theorem]{Example}\newtheorem{exercise}[theorem]{Exercise}\newtheorem{lemma}[theorem]{Lemma}\newtheorem{notation}[theorem]{Notation}\newtheorem{problem}[theorem]{Problem}\newtheorem{proposition}[theorem]{Proposition}\newtheorem{remark}[theorem]{Remark}\newtheorem{solution}[theorem]{Solution}\newtheorem{summary}[theorem]{Summary}\newenvironment{proof}[1][Proof]{\noindent\textbf{#1.} }{\ \rule{0.5em}{0.5em}}
\end_preamble
\use_default_options false
\maintain_unincluded_children no
\language english
\language_package none
\inputencoding auto-legacy
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Section
Guia 1
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Section*
Notacion y conceptos basicos
\end_layout

\begin_layout Standard
Usaremos 
\begin_inset Formula $\mathbf{R}$
\end_inset

 para denotar el conjunto de los numeros reales,
 
\begin_inset Formula $\mathbf{Z}$
\end_inset

 para denotar el conjunto de los numeros enteros,
 
\begin_inset Formula $\mathbf{N}$
\end_inset

 para denotar el conjunto de los numeros naturales y 
\begin_inset Formula $\omega$
\end_inset

 para denotar al conjunto 
\begin_inset Formula $\mathbf{N}\cup\{0\}$
\end_inset

.
\end_layout

\begin_layout Standard
Dado un conjunto 
\begin_inset Formula $A$
\end_inset

,
 usaremos 
\begin_inset Formula $\mathcal{P}(A)$
\end_inset

 para denotar el conjunto formado por todos los subconjuntos de 
\begin_inset Formula $A$
\end_inset

,
 es decir:
\begin_inset Formula 
\[
\mathcal{P}(A)=\{S:S\subseteq A\}
\]

\end_inset

Si 
\begin_inset Formula $A$
\end_inset

 es un conjunto finito,
 entonces 
\begin_inset Formula $\left\vert A\right\vert $
\end_inset

 denotara la cantidad de elementos de 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
Para 
\begin_inset Formula $x,y\in\omega$
\end_inset

,
 definamos
\begin_inset Formula 
\[
x\dot{-}y=\left\{ \begin{array}{lll}
x-y &  & \text{si }x\geq y\\
0 &  & \text{caso contrario}
\end{array}\right.
\]

\end_inset

Dados 
\begin_inset Formula $x,y\in\omega$
\end_inset

 diremos que 
\begin_inset Formula $x$
\end_inset

 
\shape italic
divide a 
\shape default

\begin_inset Formula $y$
\end_inset

 cuando haya un 
\begin_inset Formula $z\in\omega$
\end_inset

 tal que 
\begin_inset Formula $y=z.x$
\end_inset

.
 Notar que 
\begin_inset Formula $0$
\end_inset

 divide a 
\begin_inset Formula $0$
\end_inset

,
 
\begin_inset Formula $3$
\end_inset

 divide a 
\begin_inset Formula $0$
\end_inset

 y 
\begin_inset Formula $0$
\end_inset

 no divide a 
\begin_inset Formula $23$
\end_inset

.
 Escribiremos 
\begin_inset Formula $x\mid y$
\end_inset

 para expresar que 
\begin_inset Formula $x$
\end_inset

 divide a 
\begin_inset Formula $y$
\end_inset

.
 Si bien no hay una definicion natural en matematica de cuanto vale 
\begin_inset Formula $0^{0}$
\end_inset

 (
\begin_inset Formula $0$
\end_inset

 elevado a la 
\begin_inset Formula $0$
\end_inset

),
 por convencion para nosotros 
\begin_inset Formula $0^{0}=1$
\end_inset


\end_layout

\begin_layout Subsection*
Producto carteciano
\end_layout

\begin_layout Standard
Dados conjuntos 
\begin_inset Formula $A_{1},...,A_{n}$
\end_inset

,
 con 
\begin_inset Formula $n\geq2$
\end_inset

,
 usaremos 
\begin_inset Formula $A_{1}\times...\times A_{n}$
\end_inset

 para denotar el 
\shape italic
producto Cartesiano
\shape default
 de 
\begin_inset Formula $A_{1},...,A_{n}$
\end_inset

,
 esdecir el conjunto formado por todas las 
\begin_inset Formula $n$
\end_inset

-uplas 
\begin_inset Formula $(a_{1},...,a_{n})$
\end_inset

 tales que 
\begin_inset Formula $a_{1}\in A_{1},...,a_{n}\in A_{n}$
\end_inset

.
 Si 
\begin_inset Formula $A_{1}=...=A_{n}=A$
\end_inset

,
 con 
\begin_inset Formula $n\geq2$
\end_inset

,
 entonces escribiremos 
\begin_inset Formula $A^{n}$
\end_inset

 en lugar de 
\begin_inset Formula $A_{1}\times...\times A_{n}$
\end_inset

.
 Para 
\begin_inset Formula $n=1$
\end_inset

,
 definimos 
\begin_inset Formula $A^{n}=A$
\end_inset

,
 es decir 
\begin_inset Formula $A^{1}=A$
\end_inset

.
 Usaremos 
\begin_inset Formula $\Diamond$
\end_inset

 para denotar la unica 
\begin_inset Formula $0$
\end_inset

-upla.
 Definimos entonces 
\begin_inset Formula $A^{0}=\{\Diamond\}$
\end_inset

.
 Si 
\begin_inset Formula $A$
\end_inset

 es un conjunto denotaremos con 
\begin_inset Formula $A^{\mathbf{N}}$
\end_inset

 al conjunto formado por todas las infinituplas 
\begin_inset Formula $(a_{1},a_{2},...)$
\end_inset

 tales que 
\begin_inset Formula $a_{i}\in A$
\end_inset

 para cada 
\begin_inset Formula $i\in\mathbf{N}$
\end_inset

.
 Por ejemplo
\begin_inset Formula 
\[
(1,2,3,4,...)\in\omega^{\mathbf{N}}
\]

\end_inset

donde 
\begin_inset Formula $(1,2,3,4,...)$
\end_inset

 es una forma intuitiva de denotar la infinitupla cuyo 
\begin_inset Formula $i$
\end_inset

-esimo elemento es el numero natural 
\begin_inset Formula $i$
\end_inset

.
\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $(A_{1},A_{2},...)$
\end_inset

 es una infinitupla de conjuntos,
 entonces usaremos 
\begin_inset Formula $\bigcup\nolimits_{i=1}^{\infty}A_{i}$
\end_inset

 o 
\begin_inset Formula $\bigcup\nolimits_{i\geq1}A_{i}$
\end_inset

 para denotar al conjunto
\begin_inset Formula 
\[
\{a:a\in A_{i},\ \mathrm{para\ algun\ }i\in\mathbf{N}\}
\]

\end_inset


\end_layout

\begin_layout Subsection*
Conjuntos
\end_layout

\begin_layout Standard
Supondremos que el lector sabe las nociones basicas sobre conjuntos,
 aunque resaltaremos algunas de las mas importantes para que el lector las repase.
\end_layout

\begin_layout Standard
La propiedad de 
\shape italic
extensionalidad
\shape default
 nos dice que,
 dados conjuntos 
\begin_inset Formula $A,B$
\end_inset

,
 se tiene que 
\begin_inset Formula $A=B$
\end_inset

 si y solo si para cada objeto 
\begin_inset Formula $x$
\end_inset

 se da que
\begin_inset Formula 
\[
x\in A\text{ si y solo si }x\in B
\]

\end_inset

Esta propiedad es importante metodologicamente ya que a la hora de probar que dos conjuntos 
\begin_inset Formula $A,B$
\end_inset

 son iguales,
 extensionalidad nos asegura que basta con ver que se dan las dos inclusiones 
\begin_inset Formula $A\subseteq B$
\end_inset

 y 
\begin_inset Formula $B\subseteq A$
\end_inset

.
\end_layout

\begin_layout Standard
Otro tema importante es manejar correctamente la notacion cuando definimos un conjunto usando llaves y mediante propiedades que caracterizan la pertenencia al mismo.
 Algunos ejercicios para entrenar esta notacion:
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1:
\end_layout

\end_inset

Entender en forma precisa que conjunto se esta denotando en cada uno de los siguientes casos
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\{x\in\mathbf{N}:x=1$
\end_inset

 o 
\begin_inset Formula $x\geq5\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{x:x\in\mathbf{R}$
\end_inset

 y 
\begin_inset Formula $x^{2}\geq100\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{x:x=100\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{x^{2}+1:x\in\omega\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{x+y+z:x,y,z\in\{1,2\}\}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\{x.y:x,y\in\omega\}=\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left\vert \{x.y:x,y\in\omega\text{ y }1\leq x,y\leq5\}\right\vert =25$
\end_inset


\end_layout

\begin_layout Enumerate
Dados 
\begin_inset Formula $A,B\subseteq\omega$
\end_inset

,
 se tiene que 
\begin_inset Formula $\{a\in A$
\end_inset

 y 
\begin_inset Formula $b\in B:a+b=1000\}\subseteq A\times B$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{a\in\mathbf{N},a\geq3\}\subseteq\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{x+1:x\in\{1,2,3\}\}=\{1,2,3,4\}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Alfabetos
\end_layout

\begin_layout Standard
Un 
\shape italic
alfabeto
\shape default
 es un conjunto finito de simbolos.
 Notese que 
\begin_inset Formula $\emptyset$
\end_inset

 es un alfabeto.
 Si 
\begin_inset Formula $\Sigma$
\end_inset

 es un alfabeto,
 entonces 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 denotara el conjunto de todas las palabras formadas con simbolos de 
\begin_inset Formula $\Sigma$
\end_inset

.
 Las palabras de longitud 
\begin_inset Formula $1$
\end_inset

 son exactamente los elementos de 
\begin_inset Formula $\Sigma$
\end_inset

,
 en particular esto nos dice que 
\begin_inset Formula $\Sigma\subseteq\Sigma^{\ast}$
\end_inset

.
 La unica palabra de longitud 
\begin_inset Formula $0$
\end_inset

 es denotada con 
\begin_inset Formula $\varepsilon$
\end_inset

.
 Ya que en 
\begin_inset Formula $\varepsilon$
\end_inset

 no ocurren simbolos,
 tenemos que 
\begin_inset Formula $\varepsilon\in\Sigma^{\ast}$
\end_inset

,
 para cualquier alfabeto,
 mas aun notese que 
\begin_inset Formula $\emptyset^{\ast}=\{\varepsilon\}$
\end_inset

.
 Usaremos 
\begin_inset Formula $\left\vert \alpha\right\vert $
\end_inset

 para denotar la longitud de la palabra 
\begin_inset Formula $\alpha$
\end_inset

.
 Si 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

 y 
\begin_inset Formula $\sigma\in\Sigma$
\end_inset

,
 usaremos 
\begin_inset Formula $\left\vert \alpha\right\vert _{\sigma}$
\end_inset

 para denotar la cantidad de ocurrencias del simbolo 
\begin_inset Formula $\sigma$
\end_inset

 en 
\begin_inset Formula $\alpha$
\end_inset

.
 Usaremos 
\begin_inset Formula $\Sigma^{+}$
\end_inset

 para denotar al conjunto 
\begin_inset Formula $\Sigma^{\ast}-\{\varepsilon\}$
\end_inset

.
 Notese que funciones,
 
\begin_inset Formula $n$
\end_inset

-uplas y palabras son objetos de distinto tipo,
 por lo cual 
\begin_inset Formula $\emptyset$
\end_inset

,
 
\begin_inset Formula $\Diamond$
\end_inset

 y 
\begin_inset Formula $\varepsilon$
\end_inset

 son tres objetos matematicos diferentes.
\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $\alpha_{1},...,\alpha_{n}\in\Sigma^{\ast}$
\end_inset

,
 con 
\begin_inset Formula $n\geq0$
\end_inset

,
 usaremos 
\begin_inset Formula $\alpha_{1}...\alpha_{n}$
\end_inset

 para denotar la 
\shape italic
concatenacion
\shape default
 de las palabras 
\begin_inset Formula $\alpha_{1},...,\alpha_{n}$
\end_inset

 (notese que cuando 
\begin_inset Formula $n=0$
\end_inset

,
 resulta que 
\begin_inset Formula $\alpha_{1}...\alpha_{n}=\varepsilon$
\end_inset

).
 Si 
\begin_inset Formula $\alpha_{1}=...=\alpha_{n}=\alpha$
\end_inset

,
 entonces escribiremos 
\begin_inset Formula $\alpha^{n}$
\end_inset

 en lugar de 
\begin_inset Formula $\alpha_{1}...\alpha_{n}$
\end_inset

.
 O sea que 
\begin_inset Formula $\alpha^{0}=\varepsilon$
\end_inset

.
\end_layout

\begin_layout Standard
Diremos que 
\begin_inset Formula $\alpha$
\end_inset

 
\shape italic
es subpalabra (propia) de 
\shape default

\begin_inset Formula $\beta$
\end_inset

 cuando (
\begin_inset Formula $\alpha\notin\{\varepsilon,\beta\}$
\end_inset

 y) existan palabras 
\begin_inset Formula $\delta,\gamma$
\end_inset

 tales que 
\begin_inset Formula $\beta=\delta\alpha\gamma$
\end_inset

.
 Diremos que 
\begin_inset Formula $\beta$
\end_inset

 es un 
\shape italic
tramo inicial (propio) 
\shape default
de 
\begin_inset Formula $\alpha$
\end_inset

 si hay una palabra 
\begin_inset Formula $\gamma$
\end_inset

 tal que 
\begin_inset Formula $\alpha=\beta\gamma$
\end_inset

 (y 
\begin_inset Formula $\beta\notin\{\varepsilon,\alpha\}$
\end_inset

).
 En forma similar se define 
\shape italic
tramo final (propio).
\end_layout

\begin_layout Standard
Dados 
\begin_inset Formula $i\in\omega$
\end_inset

 y 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

 definamos
\begin_inset Formula 
\[
\left[\alpha\right]_{i}=\left\{ \begin{array}{lll}
i\text{-esimo elemento de }\alpha &  & \text{si }1\leq i\leq\left\vert \alpha\right\vert \\
\varepsilon &  & \text{caso contrario}
\end{array}\right.
\]

\end_inset

Dada 
\begin_inset Formula $\gamma\in\Sigma^{\ast}$
\end_inset

,
 definamos
\begin_inset Formula 
\[
\gamma^{R}=\left\{ \begin{array}{lll}
[\gamma]_{\left\vert \gamma\right\vert }[\gamma]_{\left\vert \gamma\right\vert -1}...[\gamma]_{1} &  & \text{si }\left\vert \gamma\right\vert \geq1\\
\varepsilon &  & \text{caso contrario}
\end{array}\right.
\]

\end_inset

La palabra 
\begin_inset Formula $\gamma^{R}$
\end_inset

 es llamada la 
\shape italic
resiproca
\shape default
 de 
\begin_inset Formula $\gamma$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Ocurrencias
\end_layout

\begin_layout Standard
Dadas palabras 
\begin_inset Formula $\alpha,\beta\in\Sigma^{\ast}$
\end_inset

,
 con 
\begin_inset Formula $\left\vert \alpha\right\vert ,\left\vert \beta\right\vert \geq1$
\end_inset

,
 y un natural 
\begin_inset Formula $i\in\{1,...,\left\vert \beta\right\vert \}$
\end_inset

,
 se dice que 
\begin_inset Formula $\alpha$
\end_inset

 
\shape italic
ocurre a partir de 
\shape default

\begin_inset Formula $i$
\end_inset

 
\shape italic
en 
\shape default

\begin_inset Formula $\beta$
\end_inset

 cuando se de que existan palabras 
\begin_inset Formula $\delta,\gamma$
\end_inset

 tales que 
\begin_inset Formula $\beta=\delta\alpha\gamma$
\end_inset

 y 
\begin_inset Formula $\left\vert \delta\right\vert =i-1$
\end_inset

.
 Intuitivamente hablando 
\begin_inset Formula $\alpha$
\end_inset

 ocurre a partir de 
\begin_inset Formula $i$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

 cuando se de que si comensamos a leer desde el lugar 
\begin_inset Formula $i$
\end_inset

-esimo de 
\begin_inset Formula $\beta$
\end_inset

 en adelante,
 leeremos la palabra 
\begin_inset Formula $\alpha$
\end_inset

 completa y luego posiblemente seguiran otros simbolos.
\end_layout

\begin_layout Standard
Notese que una palabra 
\begin_inset Formula $\alpha$
\end_inset

 puede ocurrir en 
\begin_inset Formula $\beta$
\end_inset

,
 a partir de 
\begin_inset Formula $i$
\end_inset

,
 y tambien a partir de 
\begin_inset Formula $j$
\end_inset

,
 con 
\begin_inset Formula $i\neq j$
\end_inset

.
 En virtud de esto,
 hablaremos de las distintas ocurrencias de 
\begin_inset Formula $\alpha$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

.
 Por ejemplo hay dos ocurrencias de la palabra 
\begin_inset Formula $aba$
\end_inset


\begin_inset space \space{}
\end_inset

en la palabra
\begin_inset Formula 
\[
cccccccabaccccabaccccc
\]

\end_inset

y tambien hay dos ocurrencias de la palabra 
\begin_inset Formula $aba$
\end_inset


\begin_inset space \space{}
\end_inset

en la palabra
\begin_inset Formula 
\[
cccccccababacccccccccc
\]

\end_inset

En el primer caso diremos que dichas ocurrencias de 
\begin_inset Formula $aba$
\end_inset

 son 
\shape italic
disjuntas
\shape default
 ya que ocupan espacios disjuntos dentro de la palabra.
 En cambio en el segundo caso puede apreciarse que las dos ocurrencias se superponen en una posicion.
 A veces diremos que una ocurrencia esta 
\shape italic
contenida
\shape default
 o 
\shape italic
sucede
\shape default
 dentro de otra.
 Por ejemplo la segunda ocurrencia de 
\begin_inset Formula $ab$
\end_inset

 en 
\begin_inset Formula $babbbfabcccfabccc$
\end_inset

 esta contenida en la primer ocurrencia de 
\begin_inset Formula $fabc$
\end_inset

 en 
\begin_inset Formula $babbbfabcccfabccc$
\end_inset

.
\end_layout

\begin_layout Standard
No definiremos en forma matematica precisa el concepto de ocurrencia pero el lector no tendra problemas en comprenderlo y manejarlo en forma correcta.
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph*
Reemplazos de ocurrencias
\end_layout

\begin_layout Standard
Tambien haremos 
\shape italic
reemplazos
\shape default
 de ocurrencias por palabras.
 Por ejemplo el resultado de reemplazar la primer ocurrencia de 
\begin_inset Formula $abb$
\end_inset

 en 
\begin_inset Formula $ccabbgfgabbgg$
\end_inset

 por 
\begin_inset Formula $oolala$
\end_inset

 es la palabra 
\begin_inset Formula $ccoolalagfgabbgg$
\end_inset

.
 Cuando todas las ocurrencias de una palabra 
\begin_inset Formula $\alpha$
\end_inset

 en una palabra 
\begin_inset Formula $\beta$
\end_inset

 sean disjuntas entre si,
 podemos hablar del resultado de 
\shape italic
reeplazar simultaneamente cada ocurrencia de 
\shape default

\begin_inset Formula $\alpha$
\end_inset

 
\shape italic
en
\shape default
 
\begin_inset Formula $\beta$
\end_inset

 
\shape italic
por
\shape default
 
\begin_inset Formula $\gamma$
\end_inset

.
 Por ejemplo si tenemos
\begin_inset Formula 
\begin{align*}
\alpha & =yet\\
\beta & =ghsyetcjjjyetbcpyeteabc\\
\gamma & =\%\%
\end{align*}

\end_inset

entonces 
\begin_inset Formula $ghs\%\%cjjj\%\%bcp\%\%eabc$
\end_inset

 es el resultado de reemplazar simultaneamente cada ocurrencia de 
\begin_inset Formula $\alpha$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

 por 
\begin_inset Formula $\gamma$
\end_inset

.
 Es importante notar que los reemplazos se hacen simultaneamente y no secuencialmente (i.e.
 reemplazando la primer ocurrencia de 
\begin_inset Formula $\alpha$
\end_inset

 por 
\begin_inset Formula $\gamma$
\end_inset

 y luego al resultado reemplazarle la primer ocurrencia de 
\begin_inset Formula $\alpha$
\end_inset

 por 
\begin_inset Formula $\gamma$
\end_inset

 y asi sucesivamente).
 Obviamente el reemplazo secuencial puede dar un resultado distinto al simultaneo (que es el que usaremos en general) e incluso puede suceder que en el reemplazo secuencial el proceso se pueda iterar indefinidamente.
 Dejamos al lector armar ejemplos de estas cituaciones.
\end_layout

\begin_layout Standard
Tambien se pueden hacer reemplazos simultaneos de distintas palabras en una palabra dada.
 Supongamos tenemos palabras 
\begin_inset Formula $\alpha_{1},...,\alpha_{n}$
\end_inset

 (con 
\begin_inset Formula $\alpha_{i}\neq\alpha_{j}$
\end_inset

,
 para 
\begin_inset Formula $i\neq j$
\end_inset

) las cuales tienen la propiedad de que las distintas ocurrencias de ellas en la palabra 
\begin_inset Formula $\beta$
\end_inset

 son siempre disjuntas de a pares,
 y tenemos ademas palabras 
\begin_inset Formula $\gamma_{1},...,\gamma_{n}$
\end_inset

.
 Entonces hablaremos del resultado de reemplazar simultaneamente:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\alpha_{1}$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

,
 por 
\begin_inset Formula $\gamma_{1}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\alpha_{2}$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

,
 por 
\begin_inset Formula $\gamma_{2}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \vdots$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\alpha_{n}$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

,
 por 
\begin_inset Formula $\gamma_{n}$
\end_inset

 
\end_layout

\begin_layout Standard
Por ejemplo si tomamos
\begin_inset Formula 
\begin{align*}
\alpha_{1} & =gh\\
\alpha_{2} & =yet\\
\alpha_{3} & =ana\\
\beta & =ghbbbyetbbgh\%\%ana\#\#ana!!!ana\\
\gamma_{1} & =AA\\
\gamma_{2} & =BBBB\\
\gamma_{3} & =CCC
\end{align*}

\end_inset

entonces 
\begin_inset Formula $AAbbbBBBBbbAA\%\%CCC\#\#CCC!!!CCC$
\end_inset

 es el resultado de reemplazar simultaneamente:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\alpha_{1}$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

,
 por 
\begin_inset Formula $\gamma_{1}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\alpha_{2}$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

,
 por 
\begin_inset Formula $\gamma_{2}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
- 
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\alpha_{3}$
\end_inset

 en 
\begin_inset Formula $\beta$
\end_inset

,
 por 
\begin_inset Formula $\gamma_{3}$
\end_inset

 
\end_layout

\begin_layout Subsection*
Matematica orientada a objetos
\end_layout

\begin_layout Standard
Nuestro estilo o enfoque matematico pondra enfasis en los objetos,
 es decir haremos matematica prestando atencion a los distintos objetos matematicos involucrados,
 los cuales siempre seran definidos en forma precisa en terminos de objetos mas primitivos.
 Hay ciertos objetos matematicos los cuales no definiremos y supondremos que el lector tiene una idea clara y precisa de los mismos.
 Por ejemplo un tipo de objeto matematico,
 quizas el mas famoso,
 son los 
\shape italic
numeros
\shape default
.
 No diremos que es un numero pero supondremos que el lector tiene una intuicion clara acerca de este tipo de objetos y de sus propiedades basicas.
 Otro tipo de objeto que no definiremos y que sera clave para nuestro enfoque son los 
\shape italic
conjuntos
\shape default
.
 Nuevamente,
 no diremos que es un conjunto pero supondremos que el lector tiene una intuicion clara acerca de estos objetos y sus propiedades basicas.
 Es importante que en nuestro enfoque,
 numeros y conjuntos son objetos de distinta naturaleza por lo cual nunca un numero es un conjunto ni un conjunto es un numero.
 En particular esto nos dice que el numero 
\begin_inset Formula $0$
\end_inset

 y el conjunto 
\begin_inset Formula $\emptyset$
\end_inset

 son objetos distintos.
 Otro tipo de objeto matematico muy importante para la matematica discreta son los 
\shape italic
simbolos
\shape default
.
 No discutiremos que es un simbolo sino que aceptaremos este concepto en forma primitiva.
 Tambien constituyen un tipo de objeto matematico las 
\shape italic
palabras
\shape default
,
 las cuales intuitivamente hablando son juxtaposiciones de simbolos.
 Otro tipo de objeto matematico muy importante son los 
\shape italic
pares ordenados
\shape default
 o 2-
\shape italic
uplas
\shape default
,
 es decir los objetos de la forma 
\begin_inset Formula $(a,b)$
\end_inset

,
 donde 
\begin_inset Formula $a$
\end_inset

 y 
\begin_inset Formula $b$
\end_inset

 son objetos matematicos cualesquiera.
 Tambien son objetos matematicos y de distinta naturaleza las 3-
\shape italic
uplas
\shape default
,
 las 4-
\shape italic
uplas
\shape default
 y en general las 
\begin_inset Formula $n$
\end_inset

-
\shape italic
uplas
\shape default
 para 
\begin_inset Formula $n$
\end_inset

 un numero natural mayor o igual a 
\begin_inset Formula $2$
\end_inset

.
 Cabe destacar que en nuestro enfoque no habra 1-uplas.
 Sin envargo,
 si bien hay una sola 0-
\shape italic
upla
\shape default
,
 ella constituye un tipo de objeto matematico distinto a los antes mencionados.
 El ultimo tipo de objeto matematico que consideraremos es aquel de las 
\shape italic
infinituplas
\shape default
.
\end_layout

\begin_layout Standard
Tenemos entonces dividido nuestro universo matematico en las distintas categorias de objetos:
\begin_inset Formula 
\begin{align*}
 & \mathrm{NUMERO}\\
 & \mathrm{CONJUNTO}\\
 & \mathrm{PALABRA}\\
 & 0\mathrm{-UPLA}\\
 & 2\mathrm{-UPLA}\\
 & 3\mathrm{-UPLA}\\
 & \ \ \ \ \ \ \ \ \vdots\\
 & \mathrm{INFINITUPLA}
\end{align*}

\end_inset

(Notar que los simbolos quedan contenidos en la categoria de las palabras).
 Es importante entender que las anteriores categorias o tipos de objetos son disjuntas entre si,
 es decir nunca un numero sera una palabra o una palabra sera una 3-upla etc.
 Esto nos permite definir una funcion 
\begin_inset Formula $Ti$
\end_inset

 la cual a un objeto matematico le asigna su tipo de objeto matematico segun la lista anterior.
 Por ejemplo:
\begin_inset Formula 
\begin{align*}
Ti(\pi) & =\mathrm{NUMERO}\\
Ti(\mathbf{N}) & =\mathrm{CONJUNTO}\\
Ti(\mathcal{P}(\mathbf{N})) & =\mathrm{CONJUNTO}\\
Ti((1,2,3)) & =3\mathrm{-UPLA}\\
Ti(\mathbf{\emptyset}) & =\mathrm{CONJUNTO}\\
Ti(\varepsilon) & =\mathrm{PALABRA}\\
Ti(\Diamond) & =0\mathrm{-UPLA}\\
Ti(\alpha) & =\mathrm{PALABRA}\text{, si }\alpha\text{ es un simbolo}\\
Ti(f) & =\mathrm{CONJUNTO}\text{, si }f\text{ es una funcion}
\end{align*}

\end_inset


\end_layout

\begin_layout Subsection*
El concepto de funcion
\end_layout

\begin_layout Standard
Asumiremos que el lector tiene una idea intuitiva del concepto de funcion.
 Daremos aqui una definicion matematica de dicho concepto.
 Una 
\shape italic
funcion
\shape default
 es un conjunto 
\begin_inset Formula $f$
\end_inset

 de pares ordenados con la siguiente propiedad
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(F)
\end_layout

\end_inset

Si 
\begin_inset Formula $(x,y)\in f$
\end_inset

 y 
\begin_inset Formula $(x,z)\in f$
\end_inset

,
 entonces 
\begin_inset Formula $y=z$
\end_inset

.
 
\end_layout

\begin_layout Standard
Por ejemplo,
 si tomamos 
\begin_inset Formula $f=\{(x,x^{2}):x\in\omega\}$
\end_inset

 se puede ver facilmente que 
\begin_inset Formula $f$
\end_inset

 cumple la propiedad (F).
 Dada una funcion 
\begin_inset Formula $f$
\end_inset

,
 definamos
\begin_inset Formula 
\begin{align*}
D_{f} & =\text{ dominio de }f=\{x:(x,y)\in f\text{ para algun }y\}\\
I_{f} & =\text{ imagen de }f=\{y:(x,y)\in f\text{ para algun }x\}
\end{align*}

\end_inset

A veces escribiremos 
\begin_inset Formula $\mathrm{Dom}(f)$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}(f)$
\end_inset

 para denotar,
 respectivamente,
 el dominio y la imagen de una funcion 
\begin_inset Formula $f$
\end_inset

.
 Como es usual dado 
\begin_inset Formula $x\in D_{f}$
\end_inset

,
 usaremos 
\begin_inset Formula $f(x)$
\end_inset

 para denotar al unico 
\begin_inset Formula $y\in I_{f}$
\end_inset

 tal que 
\begin_inset Formula $(x,y)\in f$
\end_inset

.
 Notese que 
\begin_inset Formula $\emptyset$
\end_inset

 es una funcion y que 
\begin_inset Formula $D_{\emptyset}=I_{\emptyset}=\emptyset$
\end_inset

.
 Por ejemplo para 
\begin_inset Formula $f=\{(x,x^{2}):x\in\omega\}$
\end_inset

 se tiene que 
\begin_inset Formula $D_{f}=\omega$
\end_inset

 y 
\begin_inset Formula $I_{f}=\{y:y=x^{2}$
\end_inset

 para algun 
\begin_inset Formula $x\in\omega\}$
\end_inset

.
 Ademas notese que 
\begin_inset Formula $f(x)=x^{2}$
\end_inset

,
 para cada 
\begin_inset Formula $x\in D_{f}$
\end_inset

.
\end_layout

\begin_layout Standard
Escribiremos 
\begin_inset Formula $f:S\subseteq A\rightarrow B$
\end_inset

 para expresar que 
\begin_inset Formula $f$
\end_inset

 es una funcion tal que 
\begin_inset Formula $D_{f}=S\subseteq A$
\end_inset

 y 
\begin_inset Formula $I_{f}\subseteq B$
\end_inset

.
 Tambien escribiremos 
\begin_inset Formula $f:A\rightarrow B$
\end_inset

 para expresar que 
\begin_inset Formula $f$
\end_inset

 es una funcion tal que 
\begin_inset Formula $D_{f}=A$
\end_inset

 y 
\begin_inset Formula $I_{f}\subseteq B$
\end_inset

.
 En tal contexto llamaremos a 
\begin_inset Formula $B$
\end_inset

 
\shape italic
conjunto de llegada
\shape default
.
 Por supuesto 
\begin_inset Formula $B$
\end_inset

 no esta determinado por 
\begin_inset Formula $f$
\end_inset

 ya que solo debe cumplir 
\begin_inset Formula $I_{f}\subseteq B$
\end_inset

.
\end_layout

\begin_layout Standard
Muchas veces para definir una funcion 
\begin_inset Formula $f$
\end_inset

,
 lo haremos dando su dominio y su regla de asignacion,
 es decir especificaremos en forma precisa que conjunto es el dominio de 
\begin_inset Formula $f$
\end_inset

 y ademas especificaremos en forma presisa quien es 
\begin_inset Formula $f(x)$
\end_inset

 para cada 
\begin_inset Formula $x$
\end_inset

 de dicho dominio.
 Obviamente esto determina por completo a la funcion 
\begin_inset Formula $f$
\end_inset

 ya que 
\begin_inset Formula $f=\{(x,f(x)):x\in D_{f}\}$
\end_inset

.
 Por ejemplo si decimos que 
\begin_inset Formula $f$
\end_inset

 es la funcion dada por:
\begin_inset Formula 
\begin{align*}
D_{f} & =\omega\\
f(x) & =23x^{2}
\end{align*}

\end_inset

nos estaremos refiriendo a la funcion 
\begin_inset Formula $\{(x,23x^{2}):x\in\omega\}$
\end_inset

.
 Tambien escribiremos
\begin_inset Formula 
\[
\begin{array}{rll}
f:\omega & \rightarrow & \omega\\
x & \rightarrow & 23x^{2}
\end{array}
\]

\end_inset

para describir a 
\begin_inset Formula $f$
\end_inset

.
 Es decir,
 a veces para hacer mas intuitiva aun la descripcion de la funcion,
 tambien incluiremos un conjunto de llegada de dicha funcion y a la regla de asignacion la escribiremos usando una flecha.
 Para dar otro ejemplo,
 si escribimos sea 
\begin_inset Formula $f$
\end_inset

 dada por:
\begin_inset Formula 
\[
\begin{array}{rll}
f:\mathbf{N} & \rightarrow & \omega\\
x & \rightarrow & \left\{ \begin{array}{ccc}
x+1 &  & \text{si }x\text{ es par}\\
x^{2} &  & \text{si }x\text{ es impar}
\end{array}\right.
\end{array}
\]

\end_inset

estaremos diciendo que 
\begin_inset Formula $f$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\{(x,x+1):x\text{ es par y }x\in\mathbf{N}\}\cup\{(x,x^{2}):x\text{ es impar y }x\in\mathbf{N}\}
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Funcion identidad
\end_layout

\begin_layout Standard
Dado un conjunto 
\begin_inset Formula $A$
\end_inset

,
 a la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
A & \rightarrow & A\\
a & \rightarrow & a
\end{array}
\]

\end_inset

La denotaremos con 
\begin_inset Formula $Id_{A}$
\end_inset

 y la llamaremos la funcion 
\shape italic
identidad sobre 
\shape default

\begin_inset Formula $A$
\end_inset

.
 Notese que 
\begin_inset Formula $Id_{A}=\{(a,a):a\in A\}$
\end_inset

.
\end_layout

\begin_layout Subsubsection*
Igualdad de funciones
\end_layout

\begin_layout Standard
Sean 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 dos funciones.
 Ya que las mismas son conjuntos,
 tendremos que 
\begin_inset Formula $f$
\end_inset

 sera igual a 
\begin_inset Formula $g$
\end_inset

 si y solo si para cada par 
\begin_inset Formula $(a,b)$
\end_inset

,
 se tiene que 
\begin_inset Formula $(a,b)\in f$
\end_inset

 sii 
\begin_inset Formula $(a,b)\in g$
\end_inset

.
 Muchas veces sera util el siguiente criterio de igualdad de funciones:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sean 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 funciones.
 Entonces 
\begin_inset Formula $f=g$
\end_inset

 sii 
\begin_inset Formula $D_{f}=D_{g}$
\end_inset

 y para cada 
\begin_inset Formula $x\in D_{f}$
\end_inset

 se tiene que 
\begin_inset Formula $f(x)=g(x)$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

(S) Pruebe el lema anterior
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Si
\begin_inset Formula 
\[
\begin{array}{rll}
f:\mathbf{N} & \rightarrow & \omega\\
x & \rightarrow & x^{3}
\end{array}\ \ \ \ \ \ \ \ \ \ \ \ \ \begin{array}{rll}
g:\mathbf{N} & \rightarrow & \mathbf{R}\\
x & \rightarrow & x^{3}
\end{array}
\]

\end_inset

entonces 
\begin_inset Formula $f=g$
\end_inset


\end_layout

\begin_layout Enumerate
Si
\begin_inset Formula 
\[
\begin{array}{rll}
f:\mathbf{N} & \rightarrow & \omega\\
x & \rightarrow & x^{3}
\end{array}\ \ \ \ \ \ \ \ \ \ \ \ \ \begin{array}{rll}
g:\mathbf{N} & \rightarrow & \omega\\
x & \rightarrow & x^{4}/x
\end{array}
\]

\end_inset

entonces 
\begin_inset Formula $f=g$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f$
\end_inset

 es una funcion y 
\begin_inset Formula $z\in D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $Ti(z)=\mathrm{CONJUNTO}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathrm{Dom}((1,2))=\{1\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathrm{Dom}(\{(1,2)\})+1=2$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f$
\end_inset

 es una funcion,
 entonces 
\begin_inset Formula $D_{f}=\{a:(a,b)\in f\}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f:A\rightarrow B$
\end_inset

,
 entonces 
\begin_inset Formula $D_{f}\subseteq A$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f:A\rightarrow B$
\end_inset

,
 entonces 
\begin_inset Formula $I_{f}=B$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f$
\end_inset

 es una función y 
\begin_inset Formula $g\subseteq f$
\end_inset

,
 entonces 
\begin_inset Formula $g$
\end_inset

 es una función 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Funciones 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Dados 
\begin_inset Formula $n,m\in\omega$
\end_inset

,
 usaremos 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 para abreviar la expresion
\begin_inset Formula 
\[
\overset{n\text{ veces}}{\overbrace{\omega\times...\times\omega}}\times\overset{m\text{ veces}}{\overbrace{\Sigma^{\ast}\times...\times\Sigma^{\ast}}}
\]

\end_inset

Por ejemplo,
 
\begin_inset Formula $\omega^{3}\times\Sigma^{\ast4}$
\end_inset

 sera una forma abreviada de escribir 
\begin_inset Formula $\omega\times\omega\times\omega\times\Sigma^{\ast}\times\Sigma^{\ast}\times\Sigma^{\ast}\times\Sigma^{\ast}$
\end_inset

.
 Debe quedar claro que estamos haciendo cierto abuso notacional ya que en principio si no hacemos esta convencion notacional,
 
\begin_inset Formula $\omega^{3}\times\Sigma^{\ast4}$
\end_inset

 denota un conjunto de pares y 
\begin_inset Formula $\omega\times\omega\times\omega\times\Sigma^{\ast}\times\Sigma^{\ast}\times\Sigma^{\ast}\times\Sigma^{\ast}$
\end_inset

 es un conjunto de 
\begin_inset Formula $7$
\end_inset

-uplas.
\end_layout

\begin_layout Standard
Notese que:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Cuando 
\begin_inset Formula $n=m=0$
\end_inset

,
 tenemos que 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 denota el conjunto 
\begin_inset Formula $\{\Diamond\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si 
\begin_inset Formula $m=0$
\end_inset

,
 entonces 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 denota el conjunto 
\begin_inset Formula $\omega^{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si 
\begin_inset Formula $n=0$
\end_inset

,
 entonces 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 denota el conjunto
\begin_inset Formula $\ \Sigma^{\ast m}$
\end_inset

 
\end_layout

\begin_layout Standard
Es decir que tenemos que tener cuidado cuando leemos esta notacion y no caer en la confucion de interpretarla mal.
 A manera de ultimo ejemplo,
 si vemos 
\begin_inset Formula $\omega^{1}\times\Sigma^{\ast0}$
\end_inset

,
 segun esta nueva convencion debemos pensar en 
\begin_inset Formula $\omega$
\end_inset

 y no leer en forma convencional lo cual nos haria pensar que 
\begin_inset Formula $\omega^{1}\times\Sigma^{\ast0}$
\end_inset

 denota el conjunto de pares 
\begin_inset Formula $\omega\times\{\Diamond\}$
\end_inset


\end_layout

\begin_layout Standard
Con esta convencion notacional,
 un elemento generico de 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es una 
\begin_inset Formula $(n+m)$
\end_inset

-upla de la forma 
\begin_inset Formula $(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})$
\end_inset

.
 Para abreviar,
 escribiremos 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

 en lugar de 
\begin_inset Formula $(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subparagraph*
Definicion de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Dada una funcion 
\begin_inset Formula $f$
\end_inset

,
 diremos que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-
\shape italic
mixta
\shape default
 si cumple las siguientes propiedades
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(M1)
\end_layout

\end_inset

Existen 
\begin_inset Formula $n,m\geq0$
\end_inset

,
 tales que 
\begin_inset Formula $D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(M2)
\end_layout

\end_inset

Ya sea 
\begin_inset Formula $I_{f}\subseteq\omega$
\end_inset

 o 
\begin_inset Formula $I_{f}\subseteq\Sigma^{\ast}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{1}$
\end_inset


\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\square,\%,\blacktriangle\}$
\end_inset

.
 La funcion
\begin_inset Formula 
\[
\begin{array}{rll}
f:\omega\times\{\square,\%,\blacktriangle\}^{\ast} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & x+\left\vert \alpha\right\vert 
\end{array}
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta ya que se cumple (M1) con 
\begin_inset Formula $n=m=1$
\end_inset

 y (M2).
 Notese que 
\begin_inset Formula $f$
\end_inset

 no es 
\begin_inset Formula $\{\square,\%\}$
\end_inset

-mixta ya que no cumple (M1) respecto del alfabeto 
\begin_inset Formula $\{\square,\%\}$
\end_inset

.
 Sin envargo note que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\{\square,\%,\blacktriangle,@\}$
\end_inset

-mixta
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{2}$
\end_inset


\end_layout

\end_inset

La funcion
\begin_inset Formula 
\[
\begin{array}{rll}
\omega^{4} & \rightarrow & \omega\\
(x,y,z,w) & \rightarrow & x+y
\end{array}
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta cualesquiera sea el alfabeto 
\begin_inset Formula $\Sigma$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{3}$
\end_inset


\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\square,@\}$
\end_inset

.
 La funcion
\begin_inset Formula 
\[
\begin{array}{rll}
\{\square\square\square,@@\} & \rightarrow & \omega\\
\alpha & \rightarrow & \left\vert \alpha\right\vert 
\end{array}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta ya que se cumple (M1) (con 
\begin_inset Formula $n=0$
\end_inset

 y 
\begin_inset Formula $m=1$
\end_inset

) y (M2)
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{4}$
\end_inset


\end_layout

\end_inset

Supongamos 
\begin_inset Formula $\Sigma=\emptyset$
\end_inset

.
 Tenemos entonces que 
\begin_inset Formula $\Sigma^{\ast}=\{\varepsilon\}$
\end_inset

.
 Por ejemplo
\begin_inset Formula 
\[
\begin{array}{rll}
D & \rightarrow & \omega\\
(x,\varepsilon,\varepsilon,\varepsilon) & \rightarrow & x^{2}
\end{array}
\]

\end_inset

donde 
\begin_inset Formula $D=\{(x,\varepsilon,\varepsilon,\varepsilon):x$
\end_inset

 es impar
\begin_inset Formula $\}$
\end_inset

,
 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta (con 
\begin_inset Formula $n=1$
\end_inset

 y 
\begin_inset Formula $m=3$
\end_inset

 en (M1)).
 Tambien notese que
\begin_inset Formula 
\[
\begin{array}{rll}
\{(\varepsilon,\varepsilon)\} & \rightarrow & \{\varepsilon\}\\
(\varepsilon,\varepsilon) & \rightarrow & \varepsilon
\end{array}
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta (con 
\begin_inset Formula $n=0$
\end_inset

 y 
\begin_inset Formula $m=2$
\end_inset

 en (M1)).
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Dejamos al lector la facil prueba del siguiente resultado basico.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $\Sigma\subseteq\Gamma$
\end_inset

 son alfabetos finitos.
 Entonces si 
\begin_inset Formula $f$
\end_inset

 es una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta,
 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Gamma$
\end_inset

-mixta 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-
\shape italic
total
\shape default
 cuando haya 
\begin_inset Formula $n,m\in\omega$
\end_inset

 tales que 
\begin_inset Formula $D_{f}=\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 El lema anterior nos dice que si 
\begin_inset Formula $\Sigma\subseteq\Gamma$
\end_inset

,
 entonces toda funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta es 
\begin_inset Formula $\Gamma$
\end_inset

-mixta.
 Sin envargo una funcion puede ser 
\begin_inset Formula $\Sigma$
\end_inset

-total y no ser 
\begin_inset Formula $\Gamma$
\end_inset

-total,
 cuando 
\begin_inset Formula $\Sigma\subseteq\Gamma$
\end_inset

.
 Por ejemplo tomemos 
\begin_inset Formula $\Sigma=\{\square,\%,\blacktriangle\}$
\end_inset

 y 
\begin_inset Formula $\Gamma=\{\square,\%,\blacktriangle,!\}$
\end_inset

,
 y consideremos la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
f:\omega\times\Sigma^{\ast} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & x+\left\vert \alpha\right\vert 
\end{array}
\]

\end_inset

Es claro que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta y 
\begin_inset Formula $\Sigma$
\end_inset

-total.
 Tambien es 
\begin_inset Formula $\Gamma$
\end_inset

-mixta ya que 
\begin_inset Formula $D_{f}\subseteq\omega\times\Gamma^{\ast}$
\end_inset

 y 
\begin_inset Formula $I_{f}\subseteq\omega$
\end_inset

,
 por lo cual cumple (M1) y (M2).
 Sin envargo 
\begin_inset Formula $f$
\end_inset

 no es 
\begin_inset Formula $\Gamma$
\end_inset

-total ya que 
\begin_inset Formula $D_{f}$
\end_inset

 no es igual a 
\begin_inset Formula $\omega^{n}\times\Gamma^{\ast m}$
\end_inset

,
 cualesquiera sean 
\begin_inset Formula $n$
\end_inset

 y 
\begin_inset Formula $m$
\end_inset

.
\end_layout

\begin_layout Standard
Como hemos visto recien,
 una funcion 
\begin_inset Formula $f$
\end_inset

 puede ser 
\begin_inset Formula $\Sigma$
\end_inset

-mixta y 
\begin_inset Formula $\Gamma$
\end_inset

-mixta para dos alfabetos distintos 
\begin_inset Formula $\Sigma$
\end_inset

 y 
\begin_inset Formula $\Gamma$
\end_inset

 e incluso es facil construir un ejemplo en el cual 
\begin_inset Formula $\Sigma$
\end_inset

 y 
\begin_inset Formula $\Gamma$
\end_inset

 sean incomparables como conjuntos,
 es decir que ninguno incluya al otro.
 Dejamos al lector convencerse de que si 
\begin_inset Formula $f$
\end_inset

 es una funcion que es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta para algun alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

,
 entonces hay un alfabeto 
\begin_inset Formula $\Sigma_{0}$
\end_inset

 el cual es el menor de todos los alfabetos respecto de los cuales 
\begin_inset Formula $f$
\end_inset

 es mixta,
 es decir 
\begin_inset Formula $\Sigma_{0}$
\end_inset

 cumple que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma_{0}$
\end_inset

-mixta y si 
\begin_inset Formula $\Gamma$
\end_inset

 es tal que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Gamma$
\end_inset

-mixta,
 entonces 
\begin_inset Formula $\Sigma_{0}\subseteq\Gamma$
\end_inset

.
\end_layout

\begin_layout Standard
A continuacion daremos algunas funciones 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas basicas las cuales seran frecuentemente usadas.
\end_layout

\begin_layout Paragraph*
Funciones 
\begin_inset Formula $Suc$
\end_inset

 y 
\begin_inset Formula $Pred$
\end_inset


\end_layout

\begin_layout Standard
La 
\shape italic
funcion sucesor
\shape default
 es definida por
\begin_inset Formula 
\[
\begin{array}{rll}
Suc:\omega & \rightarrow & \omega\\
n & \rightarrow & n+1
\end{array}
\]

\end_inset

La 
\shape italic
funcion predecesor
\shape default
 es definida por
\begin_inset Formula 
\[
\begin{array}{rll}
Pred:\mathbf{N} & \rightarrow & \omega\\
n & \rightarrow & n-1
\end{array}
\]

\end_inset


\end_layout

\begin_layout Paragraph*
Las funciones 
\begin_inset Formula $d_{a}$
\end_inset


\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto no vacio.
 Para cada 
\begin_inset Formula $a\in\Sigma$
\end_inset

,
 definamos
\begin_inset Formula 
\[
\begin{array}{rll}
d_{a}:\Sigma^{\ast} & \rightarrow & \Sigma^{\ast}\\
\alpha & \rightarrow & \alpha a
\end{array}
\]

\end_inset

La funcion 
\begin_inset Formula $d_{a}$
\end_inset

 es llamada la funcion 
\shape italic
derecha sub 
\shape default

\begin_inset Formula $a$
\end_inset

,
 respecto del alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
\end_layout

\begin_layout Paragraph*
Las funciones 
\begin_inset Formula $p_{i}^{n,m}$
\end_inset


\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto.
 Para 
\begin_inset Formula $n,m\in\omega$
\end_inset

 e 
\begin_inset Formula $i$
\end_inset

 tal que 
\begin_inset Formula $1\leq i\leq n$
\end_inset

,
 definamos
\begin_inset Formula 
\[
\begin{array}{rll}
p_{i}^{n,m}:\omega^{n}\times\Sigma^{\ast m} & \rightarrow & \omega\\
(\vec{x},\vec{\alpha}) & \rightarrow & x_{i}
\end{array}
\]

\end_inset

Para 
\begin_inset Formula $n,m\in\omega$
\end_inset

 e 
\begin_inset Formula $i$
\end_inset

 tal que 
\begin_inset Formula $n+1\leq i\leq n+m$
\end_inset

,
 definamos
\begin_inset Formula 
\[
\begin{array}{rll}
p_{i}^{n,m}:\omega^{n}\times\Sigma^{\ast m} & \rightarrow & \Sigma^{\ast}\\
(\vec{x},\vec{\alpha}) & \rightarrow & \alpha_{i-n}
\end{array}
\]

\end_inset

Las funciones 
\begin_inset Formula $p_{i}^{n,m}$
\end_inset

 son llamadas 
\shape italic
proyecciones
\shape default
.
 La funcion 
\begin_inset Formula $p_{i}^{n,m}$
\end_inset

 es llamada la 
\shape italic
proyeccion 
\shape default

\begin_inset Formula $n,m,i$
\end_inset

,
 respecto del alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Notese que esta definicion requiere que 
\begin_inset Formula $n+m\geq1$
\end_inset

 ya que 
\begin_inset Formula $i$
\end_inset

 debe cumplir 
\begin_inset Formula $1\leq i\leq n+m$
\end_inset

.
\end_layout

\begin_layout Paragraph*
Las funciones 
\begin_inset Formula $C_{k}^{n,m}$
\end_inset

 y 
\begin_inset Formula $C_{\alpha}^{n,m}$
\end_inset


\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto.
 Para 
\begin_inset Formula $n,m,k\in\omega$
\end_inset

,
 y 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 definamos
\begin_inset Formula 
\[
\begin{array}{rll}
C_{k}^{n,m}:\omega^{n}\times\Sigma^{\ast m} & \rightarrow & \omega\\
(\vec{x},\vec{\alpha}) & \rightarrow & k
\end{array}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \begin{array}{rll}
C_{\alpha}^{n,m}:\omega^{n}\times\Sigma^{\ast m} & \rightarrow & \Sigma^{\ast}\\
(\vec{x},\vec{\alpha}) & \rightarrow & \alpha
\end{array}
\]

\end_inset

Notese que 
\begin_inset Formula $C_{k}^{0,0}:\{\Diamond\}\rightarrow\{k\}$
\end_inset

 y que 
\begin_inset Formula $C_{\alpha}^{0,0}:\{\Diamond\}\rightarrow\{\alpha\}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
La funcion 
\begin_inset Formula $x+1$
\end_inset

 es 
\begin_inset Formula $\emptyset$
\end_inset

-mixta
\end_layout

\begin_layout Enumerate
La función
\begin_inset Formula 
\[
\begin{array}{rll}
\left\{ (x,\alpha)\in\omega\times\{\#,\&,@\}^{\ast}:\left\vert \alpha\right\vert _{\#}=0\right\}  & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & \left\vert \alpha\right\vert .x
\end{array}
\]

\end_inset

es 
\begin_inset Formula $\{\&,@\}$
\end_inset

-mixta
\end_layout

\begin_layout Enumerate
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta si existen 
\begin_inset Formula $n,m\geq0$
\end_inset

,
 tales que 
\begin_inset Formula $D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 y 
\begin_inset Formula $I_{f}\subseteq\omega\cup\Sigma^{\ast}$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\begin{array}[t]{rcl}
f:\omega & \rightarrow & \omega\\
x & \rightarrow & C_{2}^{1,0}
\end{array}$
\end_inset

.
 Entonces 
\begin_inset Formula $f(5)=2$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph*
El tipo de una funcion mixta
\end_layout

\begin_layout Standard
Dada una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta 
\begin_inset Formula $f$
\end_inset

,
 si 
\begin_inset Formula $n,m\in\omega$
\end_inset

 son tales que 
\begin_inset Formula $D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 y ademas 
\begin_inset Formula $I_{f}\subseteq\omega$
\end_inset

,
 entonces diremos que 
\begin_inset Formula $f$
\end_inset

 
\shape italic
es una funcion de tipo 
\shape default

\begin_inset Formula $(n,m,\#)$
\end_inset

.
 Similarmente si 
\begin_inset Formula $n,m\in\omega$
\end_inset

 son tales que 
\begin_inset Formula $D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 y ademas 
\begin_inset Formula $I_{f}\subseteq\Sigma^{\ast}$
\end_inset

,
 entonces diremos que 
\begin_inset Formula $f$
\end_inset

 
\shape italic
es una funcion de tipo 
\shape default

\begin_inset Formula $(n,m,\ast)$
\end_inset

.
 Notese que si 
\begin_inset Formula $f\neq\emptyset$
\end_inset

,
 entonces hay unicos 
\begin_inset Formula $n,m\in\omega$
\end_inset

 y 
\begin_inset Formula $s\in\{\#,\ast\}$
\end_inset

 tales que 
\begin_inset Formula $f$
\end_inset

 es una funcion de tipo 
\begin_inset Formula $(n,m,s)$
\end_inset

.
 Sin envargo 
\begin_inset Formula $\emptyset$
\end_inset

 es una funcion de tipo 
\begin_inset Formula $(n,m,s)$
\end_inset

 cualesquiera sean 
\begin_inset Formula $n,m\in\omega$
\end_inset

 y 
\begin_inset Formula $s\in\{\#,\ast\}$
\end_inset

.
 De esta forma,
 cuando 
\begin_inset Formula $f\neq\emptyset$
\end_inset

 hablaremos de 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

el tipo de 
\begin_inset Formula $f$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 para refererirnos a esta unica terna 
\begin_inset Formula $(n,m,s)$
\end_inset

.
 Notese que 
\begin_inset Formula $Suc$
\end_inset

 es de tipo 
\begin_inset Formula $(1,0,\#)$
\end_inset

 y 
\begin_inset Formula $d_{a}$
\end_inset

 es de tipo 
\begin_inset Formula $(0,1,\ast)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 6:
\end_layout

\end_inset

Hacer
\end_layout

\begin_deeper
\begin_layout Enumerate
De que tipo es cada una de las siguientes funciones
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $C_{\varepsilon}^{1,2}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\begin{array}[t]{rll}
\left\{ (x,\alpha)\in\omega\times\{\#,\&,@\}^{\ast}:\left\vert \alpha\right\vert _{\#}=0\right\}  & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & \left\vert \alpha\right\vert .x
\end{array}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Id_{\omega}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Id_{\Sigma^{\ast}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\begin{array}[t]{rll}
\Sigma^{\ast} & \rightarrow & \omega\\
\alpha & \rightarrow & \left\vert \alpha\right\vert 
\end{array}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\begin{array}[t]{rll}
\{(\varepsilon,\varepsilon)\} & \rightarrow & \{\varepsilon\}\\
(\varepsilon,\varepsilon) & \rightarrow & \varepsilon
\end{array}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\begin{array}[t]{rll}
\{\Diamond\} & \rightarrow & \omega\\
\Diamond & \rightarrow & 0
\end{array}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
(S) Que significa la frase
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

la relacion 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset

 es una funcion de tipo 
\begin_inset Formula $(n,m,s)$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 no depende del alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

 
\end_layout

\begin_layout Standard
Intente expresar esto en forma matematica 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph*
Predicados 
\begin_inset Formula $\Sigma$
\end_inset

-mixtos
\end_layout

\begin_layout Standard
Un 
\shape italic
predicado 
\shape default

\begin_inset Formula $\Sigma$
\end_inset

-
\shape italic
mixto 
\shape default
es una funcion 
\begin_inset Formula $f$
\end_inset

 la cual es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta y ademas cumple que 
\begin_inset Formula $I_{f}\subseteq\{0,1\}$
\end_inset

.
 Por ejemplo
\begin_inset Formula 
\[
\begin{array}{rll}
\omega\times\omega & \rightarrow & \omega\\
(x,y) & \rightarrow & \left\{ \begin{array}{l}
1\text{ si }x=y\\
0\text{ si }x\neq y
\end{array}\right.
\end{array}\ \ \ \ \ \ \ \ \ \ \ \begin{array}{rll}
\{1,2,3,4,5\}\times\Sigma^{\ast} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & \left\{ \begin{array}{l}
1\text{ si }x=\left\vert \alpha\right\vert \\
0\text{ si }x\neq\left\vert \alpha\right\vert 
\end{array}\right.
\end{array}
\]

\end_inset


\end_layout

\begin_layout Subparagraph
Operaciones logicas entre predicados
\end_layout

\begin_layout Standard
Dados predicados 
\begin_inset Formula $P:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\{0,1\}$
\end_inset

 y 
\begin_inset Formula $Q:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\{0,1\}$
\end_inset

,
 con el mismo dominio,
 definamos nuevos predicados 
\begin_inset Formula $(P\vee Q)$
\end_inset

,
 
\begin_inset Formula $(P\wedge Q)$
\end_inset

 y 
\begin_inset Formula $\lnot P$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\[
\begin{array}{rll}
(P\vee Q):S & \rightarrow & \omega\\
(\vec{x},\vec{\alpha}) & \rightarrow & \left\{ \begin{array}{lll}
1 &  & \text{si }P(\vec{x},\vec{\alpha})=1\text{ o }Q(\vec{x},\vec{\alpha})=1\\
0 &  & \text{caso contrario}
\end{array}\right.
\end{array}
\]

\end_inset


\begin_inset Formula 
\[
\begin{array}{rll}
(P\wedge Q):S & \rightarrow & \omega\\
(\vec{x},\vec{\alpha}) & \rightarrow & \left\{ \begin{array}{lll}
1 &  & \text{si }P(\vec{x},\vec{\alpha})=1\text{ y }Q(\vec{x},\vec{\alpha})=1\\
0 &  & \text{caso contrario}
\end{array}\right.
\end{array}
\]

\end_inset


\begin_inset Formula 
\[
\begin{array}{rll}
\lnot P:S & \rightarrow & \omega\\
(\vec{x},\vec{\alpha}) & \rightarrow & \left\{ \begin{array}{lll}
1 &  & \text{si }P(\vec{x},\vec{\alpha})=0\\
0 &  & \text{si }P(\vec{x},\vec{\alpha})=1
\end{array}\right.
\end{array}
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Composicion de funciones
\end_layout

\begin_layout Standard
Dadas funciones 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 definamos la funcion 
\begin_inset Formula $f\circ g$
\end_inset

 de la siguiente manera:
\begin_inset Formula 
\begin{align*}
D_{f\circ g} & =\{e\in D_{g}:g(e)\in D_{f}\}\\
f\circ g(e) & =f(g(e))
\end{align*}

\end_inset

Notar que 
\begin_inset Formula $f\circ g=\{(u,v):$
\end_inset

 existe 
\begin_inset Formula $z$
\end_inset

 tal que 
\begin_inset Formula $(u,z)\in g$
\end_inset

 y 
\begin_inset Formula $(z,v)\in f\}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

V o F o I,
 justifique
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $Pred=Pred\circ(Pred\circ Suc)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Pred\circ(Suc\circ Pred)=Pred$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Pred\circ(Suc\circ\{(x,x):x\in\mathbf{N}\})=Pred\circ Suc$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\emptyset\circ f=f\circ\emptyset=\emptyset$
\end_inset

 cualquiera sea la funcion 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Si 
\begin_inset Formula $x_{1},x_{2},x_{3},x_{4},x_{5}\in\omega$
\end_inset

 se tiene que 
\begin_inset Formula $(Suc\circ p_{2}^{5,0})(x_{1},x_{2},x_{3},x_{4},x_{5})=x_{3}$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Entonces 
\begin_inset Formula $Suc\circ Pred=p_{1}^{1,0}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Suc\circ x=Suc$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Suc\circ4=5$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Entonces 
\begin_inset Formula $\emptyset=Pred\circ C_{0}^{0,0}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f:D_{f}\subseteq\omega\rightarrow\omega$
\end_inset

 y 
\begin_inset Formula $g:D_{g}\subseteq\omega\rightarrow\omega$
\end_inset

,
 entonces 
\begin_inset Formula $D_{f\circ g}=\{x\in\omega:x\in D_{g}$
\end_inset

 y 
\begin_inset Formula $I_{g}\subseteq D_{f}\}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
A la hora de probar enunciados acerca de funciones hay una regla o idea basica que si la tenemos en cuenta nos facilitara la construccion de la prueba.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Regla Pertenecer a la Imagen:

\series default
 Si 
\begin_inset Formula $f$
\end_inset

 es una funcion y ud sabe que 
\begin_inset Formula $z\in I_{f}$
\end_inset

,
 entonces escriba a 
\begin_inset Formula $z$
\end_inset

 en la forma 
\begin_inset Formula $f(x)$
\end_inset

 donde 
\begin_inset Formula $x$
\end_inset

 denotara un elemento de 
\begin_inset Formula $D_{f}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Muchas veces tener esta regla en mente es de suma utilidad al hacer pruebas.
 Por ejemplo el lector puede usarla para hacer una prueba rigurosa del enunciado del siguiente ejercicio.
 Esa regla aqui es simplemente un consejo o sugerencia pero gana su existencia material en un entorno de inteligencia artificial al transformarse en parte de la estructura de un probador automatico de teoremas!
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 8:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $f\circ g\neq\emptyset$
\end_inset

 si y solo si 
\begin_inset Formula $I_{g}\cap D_{f}\neq\emptyset$
\end_inset

 (esto nos dice que que muchas veces sucedera que 
\begin_inset Formula $f\circ g=\emptyset$
\end_inset

) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Funciones de la forma 
\begin_inset Formula $[f_{1},...,f_{n}]$
\end_inset


\end_layout

\begin_layout Standard
Dadas funciones 
\begin_inset Formula $f_{1},...,f_{n}$
\end_inset

,
 con 
\begin_inset Formula $n\geq2$
\end_inset

,
 definamos la funcion 
\begin_inset Formula $[f_{1},...,f_{n}]$
\end_inset

 de la siguiente manera:
\begin_inset Formula 
\begin{align*}
D_{[f_{1},...,f_{n}]} & =D_{f_{1}}\cap...\cap D_{f_{n}}\\{}
[f_{1},...,f_{n}](e) & =(f_{1}(e),...,f_{n}(e))
\end{align*}

\end_inset

Notese que 
\begin_inset Formula $I_{[f_{1},...,f_{n}]}\subseteq I_{f_{1}}\times\cdots\times I_{f_{n}}$
\end_inset

.
 Por conveniencia notacional (que el lector entendera mas adelante) definiremos 
\begin_inset Formula $[f_{1}]=f_{1}$
\end_inset

.
 Es decir que hemos definido para cada sucecion de funciones 
\begin_inset Formula $f_{1},...,f_{n}$
\end_inset

,
 con 
\begin_inset Formula $n\geq1$
\end_inset

,
 una nueva funcion la cual denotamos con 
\begin_inset Formula $[f_{1},...,f_{n}]$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 9:
\end_layout

\end_inset

V o F o I,
 justifique
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto y supongamos 
\begin_inset Formula $\#\in\Sigma$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
p_{4}^{2,3}\circ[p_{1}^{1,1},p_{1}^{1,1},p_{2}^{1,1},C_{\#\#}^{1,1},p_{2}^{1,1}]=C_{\#\#}^{1,1}
\]

\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f:\omega^{2}\rightarrow\omega$
\end_inset

,
 entonces 
\begin_inset Formula $f=f\circ[x,y]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $[p_{2}^{2,3},Suc]=\emptyset$
\end_inset


\end_layout

\begin_layout Enumerate
Supongamos 
\begin_inset Formula $f_{i}:\omega\rightarrow\omega$
\end_inset

,
 para 
\begin_inset Formula $i\in\{1,...,n\}$
\end_inset

,
 con 
\begin_inset Formula $n\geq2$
\end_inset

.
 Entonces 
\begin_inset Formula $I_{[f_{1},...,f_{n}]}=I_{f_{1}}\times\cdots\times I_{f_{n}}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Funciones inyectivas,
 suryectivas y biyectivas
\end_layout

\begin_layout Standard
Una funcion 
\begin_inset Formula $f$
\end_inset

 es 
\shape italic
inyectiva
\shape default
 cuando no se da que 
\begin_inset Formula $f(a)=f(b)$
\end_inset

 para algun par de elementos distintos 
\begin_inset Formula $a,b\in D_{f}$
\end_inset

.
 Dada una funcion 
\begin_inset Formula $f:A\rightarrow B$
\end_inset

 diremos que 
\begin_inset Formula $f$
\end_inset

 es 
\shape italic
suryectiva
\shape default
 cuando 
\begin_inset Formula $I_{f}=B$
\end_inset

.
 Debe notarse que el concepto de suryectividad depende de un conjunto de llegada previamente fijado,
 es decir que no tiene sentido hablar de la suryectividad de una funcion 
\begin_inset Formula $f$
\end_inset

 si no decimos respecto de que conjunto de llegada lo es.
 Muchas veces diremos que una funcion 
\begin_inset Formula $f$
\end_inset

 es 
\shape italic
sobre
\shape default
 para expresar que es suryectiva.
\end_layout

\begin_layout Standard
Dada una funcion 
\begin_inset Formula $f:A\rightarrow B$
\end_inset

 diremos que 
\begin_inset Formula $f$
\end_inset

 es 
\shape italic
biyectiva
\shape default
 cuando 
\begin_inset Formula $f$
\end_inset

 sea inyectiva y suryectiva.
 Notese que si 
\begin_inset Formula $f:A\rightarrow B$
\end_inset

 es biyectiva,
 entonces podemos definir una nueva funcion 
\begin_inset Formula $f^{-1}:B\rightarrow A$
\end_inset

,
 de la siguiente manera:
\begin_inset Formula 
\[
f^{-1}(b)=\text{ unico }a\in A\text{ tal que }f(a)=b
\]

\end_inset

La funcion 
\begin_inset Formula $f^{-1}$
\end_inset

 sera llamada la 
\shape italic
inversa de 
\shape default

\begin_inset Formula $f$
\end_inset

.
 Notese que 
\begin_inset Formula $f\circ f^{-1}=Id_{B}$
\end_inset

 y 
\begin_inset Formula $f^{-1}\circ f=Id_{A}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 10:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Una función 
\begin_inset Formula $f$
\end_inset

 es inyectiva si 
\begin_inset Formula $f(x)=f(y)$
\end_inset

 cada vez que 
\begin_inset Formula $x=y$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $F:A\rightarrow B$
\end_inset

 es suryectiva sii para cada 
\begin_inset Formula $a\in A$
\end_inset

 existe un 
\begin_inset Formula $b\in B$
\end_inset

 tal que 
\begin_inset Formula $b=F(a)$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 11:
\end_layout

\end_inset

Hacer:
\end_layout

\begin_deeper
\begin_layout Enumerate
Dar una biyeccion entre 
\begin_inset Formula $\mathbf{N}$
\end_inset

 y 
\begin_inset Formula $\omega$
\end_inset

.
 Idem entre 
\begin_inset Formula $\omega$
\end_inset

 y 
\begin_inset Formula $\{x\in\omega:x$
\end_inset

 es par
\begin_inset Formula $\}$
\end_inset


\end_layout

\begin_layout Enumerate
Dar una funcion inyectiva de 
\begin_inset Formula $\omega^{2}$
\end_inset

 en 
\begin_inset Formula $\omega$
\end_inset


\end_layout

\begin_layout Enumerate
Dar una funcion sobreyectiva de 
\begin_inset Formula $\omega$
\end_inset

 en 
\begin_inset Formula $\omega^{5}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $f:A\rightarrow B$
\end_inset

 y 
\begin_inset Formula $g:B\rightarrow A$
\end_inset

 son tales que 
\begin_inset Formula $f\circ g=Id_{B}$
\end_inset

 y 
\begin_inset Formula $g\circ f=Id_{A}$
\end_inset

.
 Entonces 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 son biyectivas,
 
\begin_inset Formula $f^{-1}=g$
\end_inset

 y 
\begin_inset Formula $g^{-1}=f$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 12:
\end_layout

\end_inset

(S) Haga una prueba del lema anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-mixtos
\end_layout

\begin_layout Standard
Un conjunto 
\begin_inset Formula $S$
\end_inset

 es llamado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-mixto
\shape default
 si existen 
\begin_inset Formula $n,m\in\omega$
\end_inset

 tales que 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Por ejemplo,
\begin_inset Formula 
\[
\{(x,\alpha)\in\omega\times\{\blacktriangle,!\}^{\ast}:\left\vert \alpha\right\vert =x\}
\]

\end_inset


\begin_inset Formula 
\[
\{(0,\blacktriangle\blacktriangle\blacktriangle,\varepsilon),(1,\%\blacktriangle\%,\blacktriangle\blacktriangle)\}
\]

\end_inset

son conjuntos 
\begin_inset Formula $\{\blacktriangle,\%,!\}$
\end_inset

-mixtos.
 Tambien notese que 
\begin_inset Formula $\emptyset$
\end_inset

 y 
\begin_inset Formula $\{\Diamond\}$
\end_inset

 son conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-mixtos,
 cualesquiera sea el alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Por ultimo el conjunto
\begin_inset Formula 
\[
\{(x,\varepsilon,\varepsilon,\varepsilon):x\in\omega\text{ y }x\text{ es impar}\}
\]

\end_inset

es 
\begin_inset Formula $\emptyset$
\end_inset

-mixto (con 
\begin_inset Formula $n=1$
\end_inset

 y 
\begin_inset Formula $m=3$
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 13:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Un conjunto 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixto sii 
\begin_inset Formula $S=D_{f}$
\end_inset

 para alguna función 
\begin_inset Formula $\Sigma$
\end_inset

-mixta 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{(1,2,\varepsilon),(1,2)\}$
\end_inset

 es un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-mixto,
 cualesquiera sea el alfabeto finito 
\begin_inset Formula $\Sigma$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
El tipo de un conjunto mixto
\end_layout

\begin_layout Standard
Dado un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-mixto 
\begin_inset Formula $S$
\end_inset

,
 si 
\begin_inset Formula $n,m\in\omega$
\end_inset

 son tales que 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

,
 entonces diremos que 
\begin_inset Formula $S$
\end_inset

 
\shape italic
es un conjunto de tipo 
\shape default

\begin_inset Formula $(n,m)$
\end_inset

.
 Notese que si 
\begin_inset Formula $S\neq\emptyset$
\end_inset

,
 entonces hay unicos 
\begin_inset Formula $n,m\in\omega$
\end_inset

 tales que 
\begin_inset Formula $S$
\end_inset

 es un conjunto de tipo 
\begin_inset Formula $(n,m)$
\end_inset

.
 De esta forma,
 cuando 
\begin_inset Formula $S\neq\emptyset$
\end_inset

 hablaremos de 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

el tipo de 
\begin_inset Formula $S$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 para refererirnos a este unico par 
\begin_inset Formula $(n,m)$
\end_inset

.
 Tambien es importante notar que de la definicion anterior sale inmediatemante que 
\begin_inset Formula $\emptyset$
\end_inset

 es un conjunto de tipo 
\begin_inset Formula $(n,m)$
\end_inset

 cualesquiera sean 
\begin_inset Formula $n,m\in\omega$
\end_inset

,
 por lo cual cuando hablemos de EL tipo de un comjunto deberemos estar seguros de que dicho conjunto es no vacio.
\end_layout

\begin_layout Standard
Notese que 
\begin_inset Formula $\omega$
\end_inset

 es de tipo 
\begin_inset Formula $(1,0)$
\end_inset

 y 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 es de tipo 
\begin_inset Formula $(0,1)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 14:
\end_layout

\end_inset

Hacer
\end_layout

\begin_deeper
\begin_layout Enumerate
De que tipo es cada uno de los siguientes conjuntos
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\left\{ (x,\alpha)\in\omega\times\{\#,\&,@\}^{\ast}:\left\vert \alpha\right\vert _{\#}=0\right\} $
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{1,2,3\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{\varepsilon\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{\Diamond\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{(1,\varepsilon)\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{(\varepsilon,\varepsilon)\}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Para el caso 
\begin_inset Formula $\Sigma=\emptyset$
\end_inset

,
 describa para un 
\begin_inset Formula $m\in\omega$
\end_inset

 dado,
 como son los conjuntos no vacios de tipo 
\begin_inset Formula $(0,m)$
\end_inset

.
\end_layout

\begin_layout Enumerate
(S) Que significa la frase
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

la relacion 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es un conjunto de tipo 
\begin_inset Formula $(n,m)$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 no depende del alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

 
\end_layout

\begin_layout Standard
Intente expresar esto en forma matematica 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Notacion lambda
\end_layout

\begin_layout Standard
Usaremos la notacion lambda de Church en la forma que se explica a continuacion.
 Esta notacion siempre depende de un alfabeto finito previamente fijado.
 En general en nuestro lenguaje matematico utilizamos diversas expresiones las cuales involucran variables que una vez fijadas en sus valores hacen que la expresion tambien represente un determinado valor
\end_layout

\begin_layout Standard
En el contexto de la notacion lambda solo se podran utilizar expresiones con caracteristicas muy especiales por lo cual a continuacion iremos describiendo que condiciones tienen que cumplir las expresiones para que puedan ser usadas en la notacion lambda
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

Solo utilizaremos expresiones que involucran variables numericas,
 las cuales se valuaran en numeros de 
\begin_inset Formula $\omega$
\end_inset

,
 y variables alfabeticas,
 las cuales se valuaran en palabras del alfabeto previamente fijado.
 Las variables numericas seran seleccionadas de la lista
\begin_inset Formula 
\begin{align*}
 & x,y,z,w,n,m,k,...\\
 & x_{1},x_{2},...\\
 & y_{1},y_{2},...\\
 & etc
\end{align*}

\end_inset

Las variables alfabeticas seran seleccionadas de la lista
\begin_inset Formula 
\begin{align*}
 & \alpha,\beta,\gamma,\eta,...\\
 & \alpha_{1},\alpha_{2},...\\
 & \beta_{1},\beta_{2},...\\
 & etc
\end{align*}

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

Por ejemplo la expresion:
\begin_inset Formula 
\[
x+y+1
\]

\end_inset

tiene dos variables numericas 
\begin_inset Formula $x$
\end_inset

 e 
\begin_inset Formula $y$
\end_inset

 (y ninguna alfabetica).
 Si le asignamos a 
\begin_inset Formula $x$
\end_inset

 el valor 2 y a 
\begin_inset Formula $y$
\end_inset

 el valor 45,
 entonces la expresion 
\begin_inset Formula $x+y+1$
\end_inset

 produce o representa el valor 
\begin_inset Formula $48=2+45+1$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset

Otro ejemplo,
 consideremos la expresion
\begin_inset Formula 
\[
\left\vert \alpha\beta\right\vert +\left\vert \alpha\right\vert ^{x}
\]

\end_inset

la cual tiene una variable numerica 
\begin_inset Formula $x$
\end_inset

 y dos variables alfabeticas 
\begin_inset Formula $\alpha$
\end_inset

 y 
\begin_inset Formula $\beta$
\end_inset

.
 Supongamos ademas que el alfabeto previamente fijado es 
\begin_inset Formula $\{@,\%\}$
\end_inset

.
 Si le asignamos a 
\begin_inset Formula $x$
\end_inset

 el valor 2,
 a 
\begin_inset Formula $\alpha$
\end_inset

 el valor 
\begin_inset Formula $@@$
\end_inset

 y a 
\begin_inset Formula $\beta$
\end_inset

 el valor 
\begin_inset Formula $\%\%\%$
\end_inset

,
 entonces la expresion 
\begin_inset Formula $\left\vert \alpha\beta\right\vert +\left\vert \alpha\right\vert ^{x}$
\end_inset

 produce o representa el valor 
\begin_inset Formula $\left\vert @@\%\%\%\right\vert +\left\vert @@\right\vert ^{2}=9$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset

Para ciertas valuaciones de sus variables la expresion puede no estar definida.
 Por ejemplo la expresion
\begin_inset Formula 
\[
Pred(\left\vert \alpha\right\vert )
\]

\end_inset

no asume valor o no esta definida cuando el valor asignado a 
\begin_inset Formula $\alpha$
\end_inset

 es 
\begin_inset Formula $\varepsilon$
\end_inset

.
 Otro ejemplo,
 consideremos la expresion
\begin_inset Formula 
\[
x/(y-\left\vert \alpha\right\vert )^{2}
\]

\end_inset

Esta expresion no esta definida o no asume valor para aquellas asignaciones de valores a sus variables en las cuales el valor asignado a 
\begin_inset Formula $y$
\end_inset

 sea igual a la longitud del valor asignado a 
\begin_inset Formula $\alpha$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(5)
\end_layout

\end_inset

En los ejemplos anteriores las expresiones producen valores numericos pero tambien trabajaremos con expresiones que producen valores alfabeticos.
 Por ejemplo la expresion
\begin_inset Formula 
\[
\beta^{y}
\]

\end_inset

tiene una variable numerica,
 
\begin_inset Formula $y$
\end_inset

,
 una variable alfabetica,
 
\begin_inset Formula $\beta$
\end_inset

,
 y una vez valuadas estas variables produce un valor alfabetico,
 a saber el resultado de elevar el valor asignado a la variable 
\begin_inset Formula $\beta$
\end_inset

,
 a el valor asignado a 
\begin_inset Formula $y$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(6)
\end_layout

\end_inset

Una expresion 
\begin_inset Formula $E$
\end_inset

 para poder ser utilizada en la notacion lambda relativa a un alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

 debera cumplir alguna de las dos siguientes propiedades
\end_layout

\begin_deeper
\begin_layout Enumerate
los valores que asuma 
\begin_inset Formula $E$
\end_inset

 cuando hayan sido asignados valores de 
\begin_inset Formula $\omega$
\end_inset

 a sus variables numericas y valores de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 a sus variables alfabeticas de manera que 
\begin_inset Formula $E$
\end_inset

 este definida para esos valores,
 deberan ser siempre elementos de 
\begin_inset Formula $\omega$
\end_inset


\end_layout

\begin_layout Enumerate
los valores que asuma 
\begin_inset Formula $E$
\end_inset

 cuando hayan sido asignados valores de 
\begin_inset Formula $\omega$
\end_inset

 a sus variables numericas y valores de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 a sus variables alfabeticas de manera que 
\begin_inset Formula $E$
\end_inset

 este definida para esos valores,
 deberan ser siempre elementos de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(7)
\end_layout

\end_inset

Por ejemplo la expresion
\begin_inset Formula 
\[
x/2
\]

\end_inset

no cumple la propiedad dada en (6) ya que para ciertos valores de 
\begin_inset Formula $\omega$
\end_inset

 asignados a la variable 
\begin_inset Formula $x$
\end_inset

,
 la expresion da valores numericos que se salen de 
\begin_inset Formula $\omega$
\end_inset

 por lo cual no cumple ni (a) ni (b).
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(8)
\end_layout

\end_inset

Otro ejemplo,
 si el alfabeto fijado es 
\begin_inset Formula $\Sigma=\{@,\%\}$
\end_inset

,
 entonces la expresion
\begin_inset Formula 
\[
@^{x}\$^{y}
\]

\end_inset

no cumple la propiedad dada en (6) ya que por ejemplo cuando le asignamos a 
\begin_inset Formula $x$
\end_inset

 el valor 2 y a 
\begin_inset Formula $y$
\end_inset

 el valor 6,
 la expresion nos da la palabra 
\begin_inset Formula $@@\$\$\$\$\$\$$
\end_inset

 la cual no pertenece a 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 por lo cual no cumple ni (a) ni (b).
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(9)
\end_layout

\end_inset

No necesariamente las expresiones que usaremos en la notacion lambda deben ser hechas como combinacion de operaciones matematicas conocidas.
 Muchas veces usaremos expresiones que involucran incluso lenguaje coloquial castellano.
 Por ejemplo la expresion
\begin_inset Formula 
\[
\mathrm{el\ menor\ numero\ primo\ que\ es\ mayor\ que\ }x
\]

\end_inset

Es claro que esta expresion para cada valor de 
\begin_inset Formula $\omega$
\end_inset

 asignado a la variable 
\begin_inset Formula $x$
\end_inset

 produce o representa un valor concreto de 
\begin_inset Formula $\omega$
\end_inset

.
 Otro ejemplo:
\begin_inset Formula 
\[
\mathrm{el\ tercer\ simbolo\ de\ }\alpha
\]

\end_inset

notese que esta expresion,
 una ves fijado un alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

,
 estara definida o producira un valor solo cuando le asignamos a 
\begin_inset Formula $\alpha$
\end_inset

 una palabra de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 de longitud mayor o igual a 
\begin_inset Formula $3$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(10)
\end_layout

\end_inset


\series bold
Expresiones Booleanas.

\series default
 A las expresiones Booleanas tales como la expresion
\begin_inset Formula 
\[
x=y+1\text{ y }\left\vert \alpha\right\vert \leq22
\]

\end_inset

las pensaremos que asumen valores del conjunto 
\begin_inset Formula $\{0,1\}\subseteq\omega$
\end_inset

.
 Por ejemplo la expresion anterior asume o produce el valor 
\begin_inset Formula $1$
\end_inset

 cuando le asignamos a 
\begin_inset Formula $x$
\end_inset

 el valor 11,
 a 
\begin_inset Formula $y$
\end_inset

 el valor 10 y a 
\begin_inset Formula $\alpha$
\end_inset

 la palabra 
\begin_inset Formula $\varepsilon$
\end_inset

.
 Las expresiones Booleanas pensadas de esta forma podran ser utilizadas en la notacion lambda si es que tambien cumplen con las anteriores condiciones.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(11)
\end_layout

\end_inset

La expresion
\begin_inset Formula 
\[
5
\]

\end_inset

no tiene variables por lo cual pensaremos que siempre produce el valor 
\begin_inset Formula $5$
\end_inset

 cualesquiera sean los valores asignados a las variables.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Expresiones lambdificables con respecto a 
\begin_inset Formula $\Sigma$
\end_inset


\end_layout

\begin_layout Standard
Dado un alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

 a las expresiones que cumplan las caracteristicas dadas anteriormente las llamaremos 
\shape italic
lambdificables con respecto a 
\shape default

\begin_inset Formula $\Sigma$
\end_inset

.
 Notese que este concepto es intuitivo y no un concepto matematicamente definido en forma precisa.
 Mas aun el concepto de expresion tampoco ha sido definido matematicamente (aunque obviamente si sabemos que una expresion es una palabra de cierto alfabeto).
 Esto no nos traera problemas para el uso notacional que las utilizaremos.
 Recien en la materia logica veremos la matematizacion de ciertas expresiones (no las lambdificables) y nos servira de ejemplo para imaginar como podriamos matematizar el concepto de expresion lambdificable.
\end_layout

\begin_layout Standard
Algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E1)
\end_layout

\end_inset


\begin_inset Formula $x/2$
\end_inset

 no es lambdificable con respecto a 
\begin_inset Formula $\Sigma$
\end_inset

 cualesquiera sea 
\begin_inset Formula $\Sigma$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E2)
\end_layout

\end_inset


\begin_inset Formula $@^{x}\$^{y}$
\end_inset

 es lambdificable con respecto a 
\begin_inset Formula $\{@,\$\}$
\end_inset

 y no es lambdificable con respecto a 
\begin_inset Formula $\{@,\#,\%\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E3)
\end_layout

\end_inset


\begin_inset Formula $x=y+1$
\end_inset

 es lambdificable con respecto a 
\begin_inset Formula $\Sigma$
\end_inset

 cualesquiera sea 
\begin_inset Formula $\Sigma$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E4)
\end_layout

\end_inset

la expresion
\begin_inset Formula 
\[
\mathrm{el\ menor\ numero\ primo\ que\ es\ mayor\ que\ }x^{\left\vert \beta\right\vert }
\]

\end_inset

es lambdificable con respecto a 
\begin_inset Formula $\Sigma$
\end_inset

 cualesquiera sea 
\begin_inset Formula $\Sigma$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E5)
\end_layout

\end_inset

la expresion
\begin_inset Formula 
\[
5
\]

\end_inset

es lambdificable con respecto a 
\begin_inset Formula $\Sigma$
\end_inset

 cualesquiera sea 
\begin_inset Formula $\Sigma$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Definicion de 
\begin_inset Formula $\lambda x_{1}...x_{n}\alpha_{1}...\alpha_{m}\left[E\right]$
\end_inset


\end_layout

\begin_layout Standard
Supongamos ya hemos fijado un alfabeto finito 
\begin_inset Formula $\Sigma$
\end_inset

 y supongamos 
\begin_inset Formula $E$
\end_inset

 es una expresion la cual es lambdificable con respecto a 
\begin_inset Formula $\Sigma$
\end_inset

.
 Sea 
\begin_inset Formula $x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}$
\end_inset

 una lista de variables todas distintas tal que las variables numericas que ocurren en 
\begin_inset Formula $E$
\end_inset

 estan todas contenidas en la lista 
\begin_inset Formula $x_{1},...,x_{n}$
\end_inset

 y las variables alfabeticas que ocurren en 
\begin_inset Formula $E$
\end_inset

 estan en la lista 
\begin_inset Formula $\alpha_{1},...,\alpha_{m}$
\end_inset


\begin_inset space \space{}
\end_inset

(puede suceder que haya variables de la lista 
\begin_inset Formula $x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}$
\end_inset

 las cuales no ocurran en 
\begin_inset Formula $E$
\end_inset

).
 Entonces
\begin_inset Formula 
\[
\lambda x_{1}...x_{n}\alpha_{1}...\alpha_{m}\left[E\right]
\]

\end_inset

denotara la funcion definida por:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(L1)
\end_layout

\end_inset

El dominio de 
\begin_inset Formula $\lambda x_{1}...x_{n}\alpha_{1}...\alpha_{m}\left[E\right]$
\end_inset

 es el conjunto de las 
\begin_inset Formula $(n+m)$
\end_inset

-uplas 
\begin_inset Formula $(k_{1},...,k_{n},\beta_{1},...,\beta_{m})\in\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 tales que 
\begin_inset Formula $E$
\end_inset

 esta definida cuando le asignamos a cada 
\begin_inset Formula $x_{i}$
\end_inset

 el valor 
\begin_inset Formula $k_{i}$
\end_inset

 y a cada 
\begin_inset Formula $\alpha_{i}$
\end_inset

 el valor 
\begin_inset Formula $\beta_{i}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(L2)
\end_layout

\end_inset


\begin_inset Formula $\lambda x_{1}...x_{n}\alpha_{1}...\alpha_{m}\left[E\right](k_{1},...,k_{n},\beta_{1},...,\beta_{m})=$
\end_inset

 valor que asume o representa 
\begin_inset Formula $E$
\end_inset

 cuando le asignamos a cada 
\begin_inset Formula $x_{i}$
\end_inset

 el valor 
\begin_inset Formula $k_{i}$
\end_inset

 y a cada 
\begin_inset Formula $\alpha_{i}$
\end_inset

 el valor 
\begin_inset Formula $\beta_{i}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notese que por tener 
\begin_inset Formula $E$
\end_inset

 la propiedad (6) de mas arriba,
 la funcion 
\begin_inset Formula $\lambda x_{1}...x_{n}\alpha_{1}...\alpha_{m}\left[E\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta de tipo 
\begin_inset Formula $(n,m,s)$
\end_inset

 para algun 
\begin_inset Formula $s\in\{\#,\ast\}$
\end_inset

.
 Algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset

Supongamos fijamos el alfabeto 
\begin_inset Formula $\Sigma=\{@,?,$
\end_inset

¡
\begin_inset Formula $\}$
\end_inset

.
 Entonces 
\begin_inset Formula $\lambda x\alpha\left[\alpha^{2x}\right]$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
\omega\times\{@,?,\text{¡}\}^{\ast} & \rightarrow & \{@,?,\text{¡}\}^{\ast}\\
(x,\alpha) & \rightarrow & \alpha^{2x}
\end{array}
\]

\end_inset

Aqui el lector puede notar la dependencia de la notacion lambda respecto del alfabeto fijado.
 Si en lugar de fijar 
\begin_inset Formula $\Sigma=\{@,?,$
\end_inset

¡
\begin_inset Formula $\}$
\end_inset

 hubieramos fijado 
\begin_inset Formula $\Sigma=\{\%\}$
\end_inset

,
 entonces 
\begin_inset Formula $\lambda x\alpha\left[\alpha^{2x}\right]$
\end_inset

 denotaria otra funcion,
 a saber
\begin_inset Formula 
\[
\begin{array}{rll}
\omega\times\{\%\}^{\ast} & \rightarrow & \{\%\}^{\ast}\\
(x,\alpha) & \rightarrow & \alpha^{2x}
\end{array}
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

Supongamos fijamos el alfabeto 
\begin_inset Formula $\Sigma=\{@,?,$
\end_inset

¡
\begin_inset Formula $\}$
\end_inset

.
 Entonces 
\begin_inset Formula $\lambda x\alpha\left[5\right]$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
\omega\times\{@,?,\text{¡}\}^{\ast} & \rightarrow & \omega\\
(x,y,z,\alpha) & \rightarrow & 5
\end{array}
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(c)
\end_layout

\end_inset

Supongamos fijamos el alfabeto 
\begin_inset Formula $\Sigma=\{\%,!\}$
\end_inset

.
 Entonces 
\begin_inset Formula $\lambda\alpha\beta\left[\alpha\beta\right]$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
\{\%,!\}^{\ast}\times\{\%,!\}^{\ast} & \rightarrow & \{\%,!\}^{\ast}\\
(\alpha,\beta) & \rightarrow & \alpha\beta
\end{array}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Tambien tenemos que 
\begin_inset Formula $\lambda\beta\alpha\left[\alpha\beta\right]$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
\{\%,!\}^{\ast}\times\{\%,!\}^{\ast} & \rightarrow & \{\%,!\}^{\ast}\\
(\beta,\alpha) & \rightarrow & \alpha\beta
\end{array}
\]

\end_inset

Notese que estas funciones son distintas.
 Por ejemplo 
\begin_inset Formula $\lambda\alpha\beta\left[\alpha\beta\right](\%,!)=\%!$
\end_inset

 y 
\begin_inset Formula $\lambda\beta\alpha\left[\alpha\beta\right](\%,!)=!\%$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(d)
\end_layout

\end_inset

Independientemente de quien sea 
\begin_inset Formula $\Sigma$
\end_inset

 el alfabeto previamente fijado,
 tenemos que 
\begin_inset Formula $\lambda xy[x+y]$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
\omega^{2} & \rightarrow & \omega\\
(x,y) & \rightarrow & x+y
\end{array}
\]

\end_inset

Tambien 
\begin_inset Formula $\lambda xyzw[x+w]$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
\omega^{4} & \rightarrow & \omega\\
(x,y,z,w) & \rightarrow & x+w
\end{array}
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(e)
\end_layout

\end_inset

Supongamos fijamos el alfabeto 
\begin_inset Formula $\Sigma=\{@,?,$
\end_inset

¡
\begin_inset Formula $\}$
\end_inset

.
 Entonces por la clausula (L1) tenemos que el dominio de la funcion 
\begin_inset Formula $\lambda xy\alpha\beta\left[Pred(\left\vert \alpha\right\vert )+Pred(y)\right]$
\end_inset

 es
\begin_inset Formula 
\[
D=\left\{ (x,y,\alpha,\beta)\in\omega^{2}\times\Sigma^{\ast2}:\left\vert \alpha\right\vert \geq1\text{ y }y\geq1\right\} 
\]

\end_inset

Es decir que 
\begin_inset Formula $\lambda xy\alpha\beta\left[Pred(\left\vert \alpha\right\vert )+Pred(y)\right]$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
D & \rightarrow & \omega\\
(x,y,\alpha,\beta) & \rightarrow & Pred(\left\vert \alpha\right\vert )+Pred(y)
\end{array}
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(f)
\end_layout

\end_inset

Atentos a (10) de mas arriba,
 la funcion 
\begin_inset Formula $\lambda xy\left[x=y\right]$
\end_inset

 es el predicado
\begin_inset Formula 
\[
\begin{array}{rll}
\omega\times\omega & \rightarrow & \omega\\
(x,y) & \rightarrow & \left\{ \begin{array}{l}
1\text{ si }x=y\\
0\text{ si }x\neq y
\end{array}\right.
\end{array}
\]

\end_inset

y 
\begin_inset Formula $\lambda x\alpha\left[Pred(x)=\left\vert \alpha\right\vert \right]$
\end_inset

 es el predicado
\begin_inset Formula 
\[
\begin{array}{rll}
\mathbf{N}\times\Sigma^{\ast} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & \left\{ \begin{array}{l}
1\text{ si }Pred(x)=\left\vert \alpha\right\vert \\
0\text{ si }Pred(x)\neq\left\vert \alpha\right\vert 
\end{array}\right.
\end{array}
\]

\end_inset

Tambien 
\begin_inset Formula $\lambda\alpha\beta\left[\alpha=\beta\right]$
\end_inset

 es el predicado
\begin_inset Formula 
\[
\begin{array}{rll}
\Sigma^{\ast}\times\Sigma^{\ast} & \rightarrow & \omega\\
(\alpha,\beta) & \rightarrow & \left\{ \begin{array}{l}
1\text{ si }\alpha=\beta\\
0\text{ si }\alpha\neq\beta
\end{array}\right.
\end{array}
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(g)
\end_layout

\end_inset

Notar que para 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 se tiene que 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}=\lambda x_{1}...x_{n}\alpha_{1}...\alpha_{m}\left[(\vec{x},\vec{\alpha})\in S\right]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(h)
\end_layout

\end_inset

Como dijimos,
 la notacion lambda depende del alfabeto previamente fijado,
 aunque para el caso en que la lista de variables que sigue a la letra 
\begin_inset Formula $\lambda$
\end_inset

 no tenga variables alfabeticas,
 la funcion representada no depende del alfabeto 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Un par de ejemplos sutiles
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset

La expresion
\begin_inset Formula 
\[
Suc
\]

\end_inset

no es lambdificable respecto de cualquier alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Esto es porque si bien cualesquiera sea el valor asignado a las variables,
 ella asume el valor 
\begin_inset Formula $Suc$
\end_inset

,
 no cumple (6) de mas arriba ya que 
\begin_inset Formula $Suc$
\end_inset

 no es un elemento de 
\begin_inset Formula $\omega$
\end_inset

 ni tampoco una palabra (es una funcion!)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

La expresion
\begin_inset Formula 
\[
Suc+(\left\vert \beta\right\vert +1)
\]

\end_inset

es lambdificable con respecto a 
\begin_inset Formula $\Sigma$
\end_inset

 cualesquiera sea 
\begin_inset Formula $\Sigma$
\end_inset

.
 Por ejemplo 
\begin_inset Formula $\lambda x\beta[Suc+(\left\vert \beta\right\vert +1)]$
\end_inset

 es la funcion 
\begin_inset Formula $\emptyset$
\end_inset

,
 ya que la expresion 
\begin_inset Formula $Suc+(\left\vert \beta\right\vert +1)$
\end_inset

 cualesquiera sean los valores de 
\begin_inset Formula $x$
\end_inset

 y 
\begin_inset Formula $\beta$
\end_inset

 no esta definida.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 15:
\end_layout

\end_inset

V o F o I,
 justifique
\end_layout

\begin_deeper
\begin_layout Enumerate
La expresion
\begin_inset Formula 
\[
\left\vert \alpha\#@@\right\vert +x
\]

\end_inset

no es lambdificable con respecto a 
\begin_inset Formula $\{\#,\%\}$
\end_inset


\end_layout

\begin_layout Enumerate
La expresion
\begin_inset Formula 
\[
x+1=1/3
\]

\end_inset

es lambdificable con respecto a 
\begin_inset Formula $\Sigma$
\end_inset

 cualesquiera sea 
\begin_inset Formula $\Sigma$
\end_inset


\end_layout

\begin_layout Enumerate
La expresion
\begin_inset Formula 
\[
\lambda x[x^{2}]+(\left\vert \beta\right\vert +1)
\]

\end_inset

es lambdificable con respecto a 
\begin_inset Formula $\Sigma$
\end_inset

 cualesquiera sea 
\begin_inset Formula $\Sigma$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 16:
\end_layout

\end_inset

V o F o I,
 justifique
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\lambda xy[x+y]=\lambda yx[x+y]$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f:\Sigma^{\ast2}\rightarrow\omega$
\end_inset

,
 entonces 
\begin_inset Formula $\lambda\alpha\beta[f(\alpha,\beta)]=\lambda\beta\alpha[f(\beta,\alpha)]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda xy\alpha\beta\left[Pred(\left\vert \alpha\right\vert )+Pred(y)\right]$
\end_inset

 es la función
\begin_inset Formula 
\[
\begin{array}{rll}
\left\{ (x,y,\alpha,\beta)\in\omega^{2}\times\Sigma^{\ast2}:\left\vert \alpha\right\vert .y\neq0\right\}  & \rightarrow & \omega\\
(x,y,\alpha,\beta) & \rightarrow & (\left\vert \alpha\right\vert +y)-2
\end{array}
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $D_{\lambda xy[x^{2}]}=\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda x[Pred(x).0]=C_{0}^{1,0}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Suc=\lambda x[Suc]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda xy[x.y]\circ[\lambda xy[x.y],C_{1}^{2,0}]=\lambda xy[x.y]$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma=\{\bigtriangledown,\square\}$
\end_inset

.
 Entonces 
\begin_inset Formula $\lambda\alpha\beta[\alpha=\square\beta]=\lambda\alpha\beta[\alpha=\beta]\circ\left[p_{1}^{0,2},\lambda\alpha\beta[\alpha\beta]\circ\left[d_{\square}\circ C_{\varepsilon}^{0,0},p_{2}^{0,2}\right]\right]$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Guia 2
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Section*
Codificacion de infinituplas de numeros
\end_layout

\begin_layout Standard
Usaremos 
\begin_inset Formula $\omega^{\mathbf{N}}$
\end_inset

 para denotar el conjunto de todas las infinituplas con coordenadas en 
\begin_inset Formula $\omega$
\end_inset

.
 Es decir
\begin_inset Formula 
\[
\omega^{\mathbf{N}}=\left\{ (s_{1},s_{2},...):s_{i}\in\omega\text{, para cada }i\geq1\right\} \text{.}
\]

\end_inset

Definamos el siguiente subconjunto de 
\begin_inset Formula $\omega^{\mathbf{N}}$
\end_inset


\begin_inset Formula 
\[
\omega^{\left[\mathbf{N}\right]}=\left\{ (s_{1},s_{2},...)\in\omega^{\mathbf{N}}:\text{ hay un }n\in\mathbf{N}\text{ tal que }s_{i}=0\text{, para }i\geq n\right\} \text{.}
\]

\end_inset

Notese que 
\begin_inset Formula $\omega^{\mathbf{N}}\neq\omega^{\left[\mathbf{N}\right]}$
\end_inset

,
 por ejemplo las infinituplas
\begin_inset Formula 
\begin{align*}
 & (10,20,30,40,50,...)\\
 & (1,0,1,0,1,0,1,0,...)
\end{align*}

\end_inset

no pertenecen a 
\begin_inset Formula $\omega^{\left[\mathbf{N}\right]}$
\end_inset

.
 Notese que 
\begin_inset Formula $(s_{1},s_{2},...)\in\omega^{\left[\mathbf{N}\right]}$
\end_inset

 si y solo si solo una cantidad finita de coordenadas de 
\begin_inset Formula $(s_{1},s_{2},...)$
\end_inset

 son no nulas (i.e.
 
\begin_inset Formula $\{i:s_{i}\neq0\}$
\end_inset

 es finito).
\end_layout

\begin_layout Standard
Definamos
\begin_inset Formula 
\[
\begin{array}{rll}
pr:\mathbf{N} & \rightarrow & \omega\\
n & \rightarrow & n\text{-esimo numero primo}
\end{array}
\]

\end_inset

Nótese que 
\begin_inset Formula $pr(1)=2$
\end_inset

,
 
\begin_inset Formula $pr(2)=3$
\end_inset

,
 
\begin_inset Formula $pr(3)=5$
\end_inset

,
 etc.
\end_layout

\begin_layout Standard
Es bien conocido que todo numero natural es expresable como producto de primos.
 Por ejemplo si tomamos 
\begin_inset Formula $x=57596$
\end_inset

 tenemos que 
\begin_inset Formula $x=2.2.7.11.11.17$
\end_inset

.
 Tambien es un hecho conocido que dicha representacion en producto de primos es unica,
 si escribimos a los factores primos de menor a mayor,
 tal como lo hicimos recien con el numero 
\begin_inset Formula $57596$
\end_inset

.
 El Teorema Fundamental de la Aritmetica justamente acevera esta propiedad de factorisacion unica de todo numero natural.
 Trataremos de escribir este teorema de una forma un poco mas 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

cheta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Ya que 
\begin_inset Formula $57596=2.2.7.11.11.17$
\end_inset

,
 podemos escribir
\begin_inset Formula 
\[
57596=pr(1)^{2}.pr(4)^{1}.pr(5)^{2}.pr(7)^{1}
\]

\end_inset

Notese que ahora cada primo que interviene en la factorizacion de 
\begin_inset Formula $57596$
\end_inset

 figura con un exponente que nos dice cuantas veces ocurre en dicha factorizacion.
 Hay muchos primos que no ocurren en esta factorizacion,
 es decir ocurren 
\begin_inset Formula $0$
\end_inset

 veces en la misma.
 Pero podemos escribir
\begin_inset Formula 
\[
57596=pr(1)^{2}.pr(2)^{0}.pr(3)^{0}.pr(4)^{1}.pr(5)^{2}.pr(6)^{0}.pr(7)^{1}.pr(8)^{0}.pr(9)^{0}.pr(10)^{0}....
\]

\end_inset

y la igualdad no se altera ya que agregamos factores iguales a 
\begin_inset Formula $1$
\end_inset

 (una cantidad infinita!).
 De esta manera hemos logrado que cada primo intervenga en la factorizacion.
 Ademas si vemos la infinitupla de exponentes de esta nueva factorizacion,
 es decir
\begin_inset Formula 
\[
(2,0,0,1,2,0,1,0,0,0,...)
\]

\end_inset

obtenemos un elemento de 
\begin_inset Formula $\omega^{\lbrack\mathbf{N}]}$
\end_inset

.
\end_layout

\begin_layout Standard
Por supuesto esto lo podemos hacer con cualquier numero natural y siempre la infinitupla de exponentes sera un elemento de 
\begin_inset Formula $\omega^{\lbrack\mathbf{N}]}$
\end_inset

.
 Ademas es facil notar (basandose en el Teorema Fundamental de la Aritmética) que estas representaciones 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

chetas
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 tambien resultan unicas.
 Mas concretamente tenemos la siguiente version del Teorema Fundamental de la Aritmetica.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Para cada 
\begin_inset Formula $x\in\mathbf{N}$
\end_inset

,
 hay una unica infinitupla 
\begin_inset Formula $(s_{1},s_{2},...)\in\omega^{\left[\mathbf{N}\right]}$
\end_inset

 tal que
\begin_inset Formula 
\[
x=\underset{i=1}{\overset{\infty}{\Pi}}pr(i)^{s_{i}}
\]

\end_inset

(Tiene sentido escribir 
\begin_inset Formula $\underset{i=1}{\overset{\infty}{\Pi}}pr(i)^{s_{i}}$
\end_inset

,
 ya que en esta productoria solo una cantidad finita de factores son no iguales a 
\begin_inset Formula $1$
\end_inset

.) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 1:
\end_layout

\end_inset

Pruebe la existencia en el teorema anterior.
 (Hint:
 Induccion completa.) 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Como podra notarse despues de hacer el ejercicio anterior,
 la existencia de dicha infinitupla para un numero 
\begin_inset Formula $x$
\end_inset

 en general,
 no es un hecho dificil de probar.
 En realidad la potencia del Teorema Fundamental de la Aritmética radica en el hecho de que dicha infinitupla es unica.
\end_layout

\begin_layout Standard
Para probar la unicidad es clave el siguiente resultado el cual aceptamos sin demostracion.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "primos"

\end_inset

Si 
\begin_inset Formula $p,p_{1},...,p_{n}$
\end_inset

 son numeros primos (con 
\begin_inset Formula $n\geq1$
\end_inset

) y 
\begin_inset Formula $p$
\end_inset

 divide a 
\begin_inset Formula $p_{1}.....p_{n}$
\end_inset

,
 entonces 
\begin_inset Formula $p=p_{i}$
\end_inset

,
 para algun 
\begin_inset Formula $i$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

Use el lema anterior para probar que
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $17^{1045}\neq13^{2000}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $5^{55}.13^{90}.17^{1045}\neq5^{55}.3^{122}.31^{400}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $2^{90}.3^{20}.17^{1045}\neq2^{100}.3^{12}.17^{1044}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

Enuncie en forma precisa que significa la 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

unicidad
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 en el teorema anterior
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

(O) Diga con palabras como se puede probar dicha unicidad usando el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "primos"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
A continuacion un poco de notacion.
 Dada una infinitupla 
\begin_inset Formula $(s_{1},s_{2},...)\in\omega^{\left[\mathbf{N}\right]}$
\end_inset

 usaremos 
\begin_inset Formula $\left\langle s_{1},s_{2},...\right\rangle $
\end_inset

 para denotar al numero 
\begin_inset Formula $\underset{i=1}{\overset{\infty}{\Pi}}pr(i)^{s_{i}}$
\end_inset

.
\end_layout

\begin_layout Standard
Dado 
\begin_inset Formula $x\in\mathbf{N}$
\end_inset

,
 usaremos 
\begin_inset Formula $(x)$
\end_inset

 para denotar a la unica infinitupla 
\begin_inset Formula $(s_{1},s_{2},...)\in\omega^{\left[\mathbf{N}\right]}$
\end_inset

 tal que
\begin_inset Formula 
\[
x=\left\langle s_{1},s_{2},...\right\rangle =\underset{i=1}{\overset{\infty}{\Pi}}pr(i)^{s_{i}}
\]

\end_inset

Ademas para 
\begin_inset Formula $i\in\mathbf{N}$
\end_inset

,
 usaremos 
\begin_inset Formula $(x)_{i}$
\end_inset

 para denotar a 
\begin_inset Formula $s_{i}$
\end_inset

 de dicha infinitupla.
 Es decir que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $(x)=((x)_{1},(x)_{2},...)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $(x)_{i}$
\end_inset

 es el exponente de 
\begin_inset Formula $pr(i)$
\end_inset

 en la (unica posible) factorizacion de 
\begin_inset Formula $x$
\end_inset

 como producto de primos 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Se le suele llamar la 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

bajada 
\begin_inset Formula $i$
\end_inset


\shape italic
-esima de 
\shape default

\begin_inset Formula $x$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 al numero 
\begin_inset Formula $(x)_{i}$
\end_inset

.
 La idea de este nombre es que para obtener 
\begin_inset Formula $(x)_{i}$
\end_inset

 debemos bajar el exponente de 
\begin_inset Formula $pr(i)$
\end_inset

 en la factorizacion de 
\begin_inset Formula $x$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Claramente entonces
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset


\begin_inset Formula $\left\langle (x)_{1},(x)_{2},...\right\rangle =x$
\end_inset

,
 para cada 
\begin_inset Formula $x\in\mathbf{N}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset

Para cada 
\begin_inset Formula $(s_{1},s_{2},...)\in\omega^{\left[\mathbf{N}\right]}$
\end_inset

,
 se tiene que
\begin_inset Formula 
\[
(\left\langle s_{1},s_{2},...\right\rangle )_{i}=s_{i}\text{, para }i\in\mathbf{N}
\]

\end_inset

Es decir que
\begin_inset Formula 
\[
(\left\langle s_{1},s_{2},...\right\rangle )=(s_{1},s_{2},...)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

Justifique con palabras las propiedades (3) y (4)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 6:
\end_layout

\end_inset

Pruebe que si 
\begin_inset Formula $x,y\in\mathbf{N}$
\end_inset

,
 entonces
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $(x)_{i}\leq x$
\end_inset

,
 para cada 
\begin_inset Formula $i\in\mathbf{N}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $(x.y)_{i}=(x)_{i}+(y)_{i}$
\end_inset

,
 para cada 
\begin_inset Formula $i\in\mathbf{N}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $x|y$
\end_inset

 si y solo si 
\begin_inset Formula $(x)_{i}\leq(y)_{i}$
\end_inset

,
 para cada 
\begin_inset Formula $i\in\mathbf{N}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Tenemos entonces el siguiente resultado fundamental
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Las funciones
\begin_inset Formula 
\[
\begin{array}{lll}
\mathbf{N} & \rightarrow & \omega^{\left[\mathbf{N}\right]}\\
x & \rightarrow & (x)
\end{array}\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \begin{array}{rll}
\omega^{\left[\mathbf{N}\right]} & \rightarrow & \mathbf{N}\\
(s_{1},s_{2},...) & \rightarrow & \left\langle s_{1},s_{2},...\right\rangle 
\end{array}
\]

\end_inset

son biyecciones una inversa de la otra.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Llamemos 
\begin_inset Formula $f$
\end_inset

 a la funcion de la izquierda y 
\begin_inset Formula $g$
\end_inset

 a la de la derecha.
 Notese que el Lema 3 de la Guia 1 nos dice que basta con probar que 
\begin_inset Formula $f\circ g=Id_{\omega^{\left[\mathbf{N}\right]}}$
\end_inset

 y 
\begin_inset Formula $g\circ f=Id_{\mathbf{N}}$
\end_inset

.
 Pero (3) justamente nos dice que 
\begin_inset Formula $g\circ f=Id_{\mathbf{N}}$
\end_inset

 y (4) nos dice que 
\begin_inset Formula $f\circ g=Id_{\omega^{\left[\mathbf{N}\right]}}$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Tal como se hace en la escuela primaria,
 el siguiente lema nos permite calcular 
\begin_inset Formula $(x)_{i}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Dados 
\begin_inset Formula $x,i\in\mathbf{N}$
\end_inset

,
 se tiene que
\begin_inset Formula 
\[
(x)_{i}=\max_{t}\left(pr(i)^{t}\text{ divide a }x\right)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

(O) Explique con palabras como se aplica el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "primos"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 para probar el lema anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Definamos la funcion 
\begin_inset Formula $Lt:\mathbf{N}\rightarrow\omega$
\end_inset

 de la siguiente manera:
\begin_inset Formula 
\[
Lt(x)=\left\{ \begin{array}{lll}
\max_{i}\;(x)_{i}\neq0 &  & \text{si }x\neq1\\
0 &  & \text{si }x=1
\end{array}\right.
\]

\end_inset

Se tienen las siguientes propiedades basicas
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Para cada 
\begin_inset Formula $x\in\mathbf{N}$
\end_inset

:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $Lt(x)=0$
\end_inset

 sii 
\begin_inset Formula $x=1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $x=\prod\nolimits_{i=1}^{Lt(x)}pr(i)^{(x)_{i}}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 8:
\end_layout

\end_inset

(S) Dar una prueba del lema anterior.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 9:
\end_layout

\end_inset

Encuentre el dominio de las siguientes funciones:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\lambda ix[(x)_{i}]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda x[Lt(x)]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda x[\left\langle (x)_{1},(x)_{2},(x)_{3},0,0,\dots\right\rangle ]$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Section*
Ordenes totales
\end_layout

\begin_layout Standard
Antes de introducir los órdenes totales,
 rapasaremos algunos conceptos básicos requeridos.
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $A$
\end_inset

 un conjunto.
 Recordemos que una 
\shape italic
relacion binaria sobre 
\shape default

\begin_inset Formula $A$
\end_inset

 es un subconjunto de 
\begin_inset Formula $A^{2}$
\end_inset

.
 Algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E1)
\end_layout

\end_inset

Sea 
\begin_inset Formula $R=\{(1,2),(2,3)\}$
\end_inset

.
 Entonces 
\begin_inset Formula $R$
\end_inset

 es una relacion binaria sobre 
\begin_inset Formula $\mathbf{N}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E2)
\end_layout

\end_inset

Sea 
\begin_inset Formula $R=\{(x,y)\in\omega^{2}:$
\end_inset

 
\begin_inset Formula $x$
\end_inset

 divide a 
\begin_inset Formula $y\}$
\end_inset

.
 Entonces 
\begin_inset Formula $R$
\end_inset

 es una relacion binaria sobre 
\begin_inset Formula $\omega$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E3)
\end_layout

\end_inset

Sea 
\begin_inset Formula $R=\{(r,t)\in\mathbf{R}^{2}:r\leq t\}$
\end_inset

.
 Entonces 
\begin_inset Formula $R$
\end_inset

 es una relacion binaria sobre 
\begin_inset Formula $\mathbf{R}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E4)
\end_layout

\end_inset


\begin_inset Formula $\emptyset$
\end_inset

 es una relacion binaria sobre 
\begin_inset Formula $A$
\end_inset

,
 cualesquiera sea el conjunto 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E5)
\end_layout

\end_inset

Sea 
\begin_inset Formula $R=\{(x,y)\in\omega^{2}:x<y$
\end_inset

 o 
\begin_inset Formula $y=0\}$
\end_inset

.
 Entonces 
\begin_inset Formula $R$
\end_inset

 es una relacion binaria sobre 
\begin_inset Formula $\omega$
\end_inset

 
\end_layout

\begin_layout Standard
Notese que si 
\begin_inset Formula $R$
\end_inset

 es una relacion binaria sobre 
\begin_inset Formula $A$
\end_inset

 y 
\begin_inset Formula $A\subseteq B$
\end_inset

 entonces 
\begin_inset Formula $R$
\end_inset

 es una relacion binaria sobre 
\begin_inset Formula $B$
\end_inset

.
 Por ejemplo las relaciones dadas en los ejemplos (E1),
 (E2),
 (E4) y (E5) tambien son relaciones binarias sobre 
\begin_inset Formula $\mathbf{R}$
\end_inset


\end_layout

\begin_layout Standard
Como es usual,
 cuando 
\begin_inset Formula $R$
\end_inset

 sea una relacion binaria sobre un conjunto 
\begin_inset Formula $A$
\end_inset

,
 algunas veces escribiremos 
\begin_inset Formula $aRb$
\end_inset

 en lugar de 
\begin_inset Formula $(a,b)\in R$
\end_inset

.
\end_layout

\begin_layout Standard
Recordemos que una relacion binaria 
\begin_inset Formula $R$
\end_inset

 sobre un conjunto 
\begin_inset Formula $A$
\end_inset

 es llamada un 
\shape italic
orden parcial sobre 
\shape default

\begin_inset Formula $A$
\end_inset


\shape italic

\begin_inset space \space{}
\end_inset


\shape default
si cumple las siguientes tres propiedades:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Reflexividad
\end_layout

\end_inset


\begin_inset Formula $xRx$
\end_inset

,
 cualesquiera sea 
\begin_inset Formula $x\in A$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Transitividad
\end_layout

\end_inset


\begin_inset Formula $xRy$
\end_inset

 y 
\begin_inset Formula $yRz$
\end_inset

 implica 
\begin_inset Formula $xRz$
\end_inset

,
 cualesquiera sean 
\begin_inset Formula $x,y,z\in A$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Antisimetria
\end_layout

\end_inset


\begin_inset Formula $xRy$
\end_inset

 y 
\begin_inset Formula $yRx$
\end_inset

 implica 
\begin_inset Formula $x=y$
\end_inset

,
 cualesquiera sean 
\begin_inset Formula $x,y\in A$
\end_inset

 
\end_layout

\begin_layout Standard
Algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E1)
\end_layout

\end_inset


\begin_inset Formula $\{(r,t)\in\mathbf{R}^{2}:r\leq t\}$
\end_inset

 es un orden parcial sobre 
\begin_inset Formula $\mathbf{R}$
\end_inset

,
 llamado el orden usual de 
\begin_inset Formula $\mathbf{R}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E2)
\end_layout

\end_inset

Sea 
\begin_inset Formula $R=\{(1,2),(1,3),(1,1),(2,2),(3,3)\}$
\end_inset

.
 Entonces 
\begin_inset Formula $R$
\end_inset

 es un orden parcial sobre 
\begin_inset Formula $\{1,2,3\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E3)
\end_layout

\end_inset

Sea 
\begin_inset Formula $R=\{(S,T)\in\mathcal{P}(\omega)^{2}:S\subseteq T\}$
\end_inset

.
 Entonces 
\begin_inset Formula $R$
\end_inset

 es un orden parcial sobre 
\begin_inset Formula $\mathcal{P}(\omega)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E4)
\end_layout

\end_inset


\begin_inset Formula $\{(x,y)\in\omega^{2}:$
\end_inset

 
\begin_inset Formula $x\leq y\}$
\end_inset

 es un orden parcial sobre 
\begin_inset Formula $\omega$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E5)
\end_layout

\end_inset

Sea 
\begin_inset Formula $R=\{(1,1)\}$
\end_inset

.
 Entonces 
\begin_inset Formula $R$
\end_inset

 es un orden parcial sobre 
\begin_inset Formula $\{1\}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E6)
\end_layout

\end_inset


\begin_inset Formula $\{(a,b)\in A^{2}:a=b\}$
\end_inset

 es un orden parcial sobre 
\begin_inset Formula $A$
\end_inset

,
 cualesquira sea el conjunto 
\begin_inset Formula $A$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E7)
\end_layout

\end_inset

Sea 
\begin_inset Formula $\mathrm{\leq}=\{(n,m)\in\mathbf{N}^{2}:n\mid m\}$
\end_inset

.
 Es facil ver que 
\begin_inset Formula $\leq$
\end_inset

 es un orden parcial sobre 
\begin_inset Formula $\mathbf{N}$
\end_inset

 
\end_layout

\begin_layout Standard
Notese que las relaciones dadas en (E1) y (E4) son distintas,
 ademas
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 10:
\end_layout

\end_inset

Es la relacion dada en (E4) un orden parcial sobre 
\begin_inset Formula $\mathbf{R}$
\end_inset

?
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Muchas veces denotaremos con 
\begin_inset Formula $\leq$
\end_inset

 a una relacion binaria que sea un orden parcial.
 Esto hace mas intuitiva nuestra escritura pero siempre hay que tener en cuenta que 
\begin_inset Formula $\leq$
\end_inset

 en estos casos esta denotando cierto conjunto de pares ordenados previamente definido.
\end_layout

\begin_layout Standard
Usaremos la siguiente
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Convencion notacional
\end_layout

\end_inset

Si hemos denotado con 
\begin_inset Formula $\leq$
\end_inset

 a cierto orden parcial sobre un conjunto 
\begin_inset Formula $A$
\end_inset

,
 entonces
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Denotaremos con 
\begin_inset Formula $<$
\end_inset

 a la relacion binaria 
\begin_inset Formula $\{(a,b)\in A^{2}:a\leq b$
\end_inset

 y 
\begin_inset Formula $a\neq b\}$
\end_inset

.
 Es decir que 
\begin_inset Formula $\mathrm{<}=\{(a,b)\in A^{2}:a\leq b$
\end_inset

 y 
\begin_inset Formula $a\neq b\}$
\end_inset

.
 Cuando se de 
\begin_inset Formula $a<b$
\end_inset

 diremos que 
\begin_inset Formula $a$
\end_inset

 
\shape italic
es menor que 
\shape default

\begin_inset Formula $b$
\end_inset

 o que 
\begin_inset Formula $b$
\end_inset

 
\shape italic
es mayor que 
\shape default

\begin_inset Formula $a$
\end_inset

 (
\shape italic
respecto de 
\shape default

\begin_inset Formula $\leq$
\end_inset

) 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Por ejemplo,
 si 
\begin_inset Formula $A=\{1,2,3,4\}$
\end_inset

 y 
\begin_inset Formula $\mathrm{\leq}=\{(1,2),(2,3),(1,3),(1,1),(2,2),(3,3),(4,4)\}$
\end_inset

,
 entonces 
\begin_inset Formula $\mathrm{<}=\{(1,2),(2,3),(1,3)\}$
\end_inset

.
\end_layout

\begin_layout Standard
Ahora sí estamos en condiciones de definir orden total.
 Sea 
\begin_inset Formula $A$
\end_inset

 un conjunto cualquiera.
 Por un 
\shape italic
orden total sobre
\shape default
 
\begin_inset Formula $A$
\end_inset

 entenderemos un orden parcial 
\begin_inset Formula $\leq$
\end_inset

 sobre 
\begin_inset Formula $A$
\end_inset

 el cual cumple:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(C)
\end_layout

\end_inset


\begin_inset Formula $a\leq b$
\end_inset

 o 
\begin_inset Formula $b\leq a$
\end_inset

,
 cualesquiera sean 
\begin_inset Formula $a,b\in A$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 11:
\end_layout

\end_inset

Decida cuáles ordenes parciales de la lista de ejemplos (E1)-(E7) son ordenes totales.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Supongamos 
\begin_inset Formula $A$
\end_inset

 es finito,
 no vacio,
 y que 
\begin_inset Formula $\leq$
\end_inset

 es un orden total sobre 
\begin_inset Formula $A$
\end_inset

.
 La propiedad (C) nos permite probar que para cada conjunto no vacio 
\begin_inset Formula $S\subseteq A$
\end_inset

,
 hay un elemento 
\begin_inset Formula $s\in S$
\end_inset

 el cual cumple 
\begin_inset Formula $s\leq s^{\prime}$
\end_inset

 para cada 
\begin_inset Formula $s^{\prime}\in S$
\end_inset

.
 Por supuesto,
 
\begin_inset Formula $s$
\end_inset

 es unico (por que?) y habitualmente es llamado el 
\shape italic
menor elemento de 
\shape default

\begin_inset Formula $S$
\end_inset

,
 ya que es menor que todo otro elemento de 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $A$
\end_inset

 es finito,
 no vacio,
 y 
\begin_inset Formula $\leq$
\end_inset

 es un orden total sobre 
\begin_inset Formula $A$
\end_inset

,
 podemos definir recursivamente una funcion 
\begin_inset Formula $f:\{1,...,\left\vert A\right\vert \}\rightarrow A$
\end_inset

 de la siguiente manera:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $f(1)=$
\end_inset

 menor elemento de 
\begin_inset Formula $A$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si 
\begin_inset Formula $i\in\{1,...,\left\vert A\right\vert -1\}$
\end_inset

,
 entonces
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $f(i+1)=$
\end_inset

 menor elemento de 
\begin_inset Formula $A-\{f(1),...,f(i)\}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
Como es habitual,
 
\begin_inset Formula $f(i)$
\end_inset

 es llamado el 
\begin_inset Formula $i$
\end_inset


\shape italic
-esimo elemento de 
\shape default

\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Standard
Muchas veces para dar un orden total sobre un conjunto finito 
\begin_inset Formula $A$
\end_inset

,
 daremos simplemente sus elementos en forma creciente ya que esto determina el orden por completo.
 Por ejemplo si 
\begin_inset Formula $A=\{1,2,3\}$
\end_inset

,
 el orden total dado por 
\begin_inset Formula $2<1<3$
\end_inset

 es la relacion 
\begin_inset Formula $\mathrm{\leq}=\{(2,1),(1,3),(2,3),(1,1),(2,2),(3,3)\}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 12:
\end_layout

\end_inset

(S) (O) Sea 
\begin_inset Formula $A$
\end_inset

 un conjunto finito de 
\begin_inset Formula $n>0$
\end_inset

 elementos.
 Encuentre una biyección entre 
\begin_inset Formula $\{R:R$
\end_inset

 es un orden total sobre 
\begin_inset Formula $A\}$
\end_inset

 y 
\begin_inset Formula $\{(a_{1},\dots,a_{n})\in A^{n}:a_{i}\neq a_{j}$
\end_inset

 para 
\begin_inset Formula $i\neq j\}$
\end_inset

.
 (¿Por qué este resultado se puede considerar informático?) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Section*
Ordenes naturales sobre 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset


\end_layout

\begin_layout Standard
Llamaremos 
\shape italic
numerales
\shape default
 a los siguientes simbolos
\begin_inset Formula 
\[
0\ 1\ 2\ 3\ 4\ 5\ 6\ 7\ 8\ 9
\]

\end_inset

Usaremos 
\begin_inset Formula $Num$
\end_inset

 para denotar el conjunto de numerales.
 Notese que 
\begin_inset Formula $Num\cap\omega=\emptyset$
\end_inset

.
 Es decir,
 no debemos confundir los simbolos que usualmente denotan los primeros diez numeros enteros con los numeros que ellos denotan.
 De hecho en china o japon los primeros diez numeros enteros se denotan con otros simbolos.
 Similarmente las palabras pertenecientes a 
\begin_inset Formula $Num^{\ast}$
\end_inset

 denotan (notacion decimal) a los numeros de 
\begin_inset Formula $\omega$
\end_inset

 pero debemos tener en cuenta que 
\begin_inset Formula $Num^{\ast}\cap\omega=\emptyset$
\end_inset

.
 Cuando tratamos con palabras de 
\begin_inset Formula $Num^{\ast}$
\end_inset

,
 debemos ser cuidadosos ya que muchas veces en nuestro discurso matematico (es decir las guias,
 el apunte,
 lo que escriben los profesores en el pizarron,
 etc) representamos dos objetos diferentes de la misma forma.
 Por ejemplo 
\begin_inset Formula $45$
\end_inset

 puede estar denotando al numero entero cuarenta y cinco o tambien 
\begin_inset Formula $45$
\end_inset

 puede estar denotando la palabra de longitud 
\begin_inset Formula $2$
\end_inset

 cuyo primer simbolo es el numeral 
\begin_inset Formula $4$
\end_inset

 y cuyo segundo simbolo es el numeral 
\begin_inset Formula $5$
\end_inset

,
 es decir en este caso la palabra 
\begin_inset Formula $45$
\end_inset

 se denota a ella misma.
 Por dar otro ejemplo,
 el simbolo 
\begin_inset Formula $1$
\end_inset

 en nuestro discurso algunas veces se denotara a si mismo y otras veces denotara al numero uno.
\end_layout

\begin_layout Standard
Es bien conocido que,
 en notacion decimal,
 las siguientes palabras del alfabeto 
\begin_inset Formula $Num$
\end_inset

,
 denotan,
 de menor a mayor,
 a los numeros de 
\begin_inset Formula $\omega$
\end_inset


\begin_inset Formula 
\[
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,...
\]

\end_inset

Por supuesto esta lista de palabras es infinita pero asumimos que el lector sabe como obtener la palabra siguiente a cada miembro de la lista (i.e.
 sumar 1 en notacion decimal),
 lo cual determina por completo la lista conociendo que la misma comienza con la palabra 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\begin_layout Standard
Cabe destacar que debido a la presencia del numeral 
\begin_inset Formula $0$
\end_inset

 en la lista,
 la 
\begin_inset Formula $n$
\end_inset

-esima palabra representa o denota al numero 
\begin_inset Formula $n-1$
\end_inset

 o,
 dicho de otra forma,
 el numero 
\begin_inset Formula $n\in\omega$
\end_inset

 es representado por la 
\begin_inset Formula $(n+1)$
\end_inset

-esima palabra de la lista.
\end_layout

\begin_layout Standard
Un detalle de la representacion decimal de numeros de 
\begin_inset Formula $\omega$
\end_inset

 mediante palabras de 
\begin_inset Formula $Num^{\ast}$
\end_inset

 es que la misma no nos da una biyeccion entre 
\begin_inset Formula $Num^{\ast}$
\end_inset

 y 
\begin_inset Formula $\omega$
\end_inset

 ya que por ejemplo las palabras 
\begin_inset Formula $00016$
\end_inset

 y 
\begin_inset Formula $16$
\end_inset

 representan el mismo numero.
 Dicho de otra forma en la lista anterior no figuran todas las palabras de 
\begin_inset Formula $Num^{\ast}$
\end_inset

,
 a saber estan omitidas todas las palabras que comienzan con el simbolo 
\begin_inset Formula $0$
\end_inset

 y tienen longitud mayor que uno.
 A continuacion daremos una representacion de los numeros de 
\begin_inset Formula $\omega$
\end_inset

 mediante palabras,
 la cual no tendra este problema.
 El alfabeto que usaremos tendra todos los numerales menos el 
\begin_inset Formula $0$
\end_inset

 y ademas tendra un simbolo para denotar al numero diez,
 a saber el simbolo 
\begin_inset Formula $d$
\end_inset

.
 Es decir
\begin_inset Formula 
\[
\widetilde{Num}=\{1,2,3,4,5,6,7,8,9,d\}
\]

\end_inset

Representaremos a los numeros de 
\begin_inset Formula $\omega$
\end_inset

 con la siguiente lista infinita de palabras de 
\begin_inset Formula $\widetilde{Num}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\bigskip$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\varepsilon,1,2,3,4,5,6,7,8,9,d,$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $11,12,...,1d,21,22,...,2d,...,91,92,...,9d,d1,d2,...,dd,$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $111,112,...,11d,121,122,...,12d,...$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
El lector ya se habra dado cuenta de que el siguiente a una palabra 
\begin_inset Formula $\alpha$
\end_inset

 de la lista anterior se obtiene aplicando las siguientes clausulas
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
C
\begin_inset Formula $_{1}$
\end_inset


\end_layout

\end_inset

si 
\begin_inset Formula $\alpha=d^{n}$
\end_inset

,
 con 
\begin_inset Formula $n\geq0$
\end_inset

 entonces el siguiente de 
\begin_inset Formula $\alpha$
\end_inset

 es 
\begin_inset Formula $1^{n+1}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
C
\begin_inset Formula $_{2}$
\end_inset


\end_layout

\end_inset

si 
\begin_inset Formula $\alpha$
\end_inset

 no es de la forma 
\begin_inset Formula $d^{n}$
\end_inset

,
 con 
\begin_inset Formula $n\geq0$
\end_inset

,
 entonces el siguiente de 
\begin_inset Formula $\alpha$
\end_inset

 se obtiene de la siguiente manera:
\end_layout

\begin_deeper
\begin_layout Enumerate
buscar de derecha a izquierda el primer simbolo no igual a 
\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Enumerate
reemplazar dicho simbolo por su siguiente en la lista 
\begin_inset Formula $1,2,3,4,5,6,7,8,9,d$
\end_inset


\end_layout

\begin_layout Enumerate
reemplazar por el simbolo 
\begin_inset Formula $1$
\end_inset

 a todos los simbolos iguales a 
\begin_inset Formula $d$
\end_inset

 que ocurrian a la derecha del simbolo reemplazado 
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notese que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $0$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $\varepsilon$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $1$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $1$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \vdots$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $9$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $9$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $10$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $11$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $11$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \vdots$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $19$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $19$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $20$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $1d$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $21$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $21$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El numero 
\begin_inset Formula $22$
\end_inset

 es representado en la lista anterior con la palabra 
\begin_inset Formula $22$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \vdots$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Como puede notarse en estos primeros veinte y pico numeros solo dos (el 
\begin_inset Formula $0$
\end_inset

 y el 
\begin_inset Formula $20$
\end_inset

) se representan en forma distinta a la reprentacion decimal clasica.
 Es natural que 
\begin_inset Formula $\varepsilon$
\end_inset

 denote al numero 
\begin_inset Formula $0$
\end_inset

 y ademas notese que la palabra 
\begin_inset Formula $1d$
\end_inset

 (que en la lista representa el 
\begin_inset Formula $20$
\end_inset

) puede leerse como 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

diecidiez
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 (es decir la palabra que sigue a 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

diecinueve
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

) que justamente es 
\begin_inset Formula $20$
\end_inset

.
 Por supuesto con esta manera de pensar la palabra 
\begin_inset Formula $2d$
\end_inset

 deberiamos leerla como 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

ventidiez
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 y si nos fijamos en la lista ella representa al numero treinta lo cual nuevamente es muy natural.
 Otro ejemplo:
 a 
\begin_inset Formula $6d$
\end_inset

 deberiamos leerla como 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

sesentidiez
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 y es natural ya que en la lista representa al setenta.
 Tambien,
 la palabra 
\begin_inset Formula $9d$
\end_inset

 puede leerse noventidiez ya que representa en la lista al numero 
\begin_inset Formula $100$
\end_inset

.
\end_layout

\begin_layout Standard
La lista anterior va representando los numeros de 
\begin_inset Formula $\omega$
\end_inset

 en forma muy natural pero,
 aunque nuestra intuicion nos diga que no,
 en principio podria pasar que una misma palabra del alfabeto 
\begin_inset Formula $\widetilde{Num}$
\end_inset

 ocurra dos veces en la lista y esto nos diria que una misma palabra estaria representando a dos numeros distintos.
 Tambien,
 en principio podria suceder que haya una palabra del alfabeto 
\begin_inset Formula $\widetilde{Num}$
\end_inset

 la cual nunca figure en la lista.
 Mas abajo daremos una serie de ejercicios que muestran que estas dos posibilidades no suceden,
 es decir muestran que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(S)
\end_layout

\end_inset

Toda palabra de 
\begin_inset Formula $\widetilde{Num}^{\ast}$
\end_inset

 aparece en la lista
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(I)
\end_layout

\end_inset

Ninguna palabra de 
\begin_inset Formula $\widetilde{Num}^{\ast}$
\end_inset

 aparece mas de una ves 
\end_layout

\begin_layout Standard
\noindent
Notese que la propiedad (S) nos dice que la funcion
\begin_inset Formula 
\[
\begin{array}[t]{rll}
\ast:\omega & \rightarrow & \widetilde{Num}^{\ast}\\
n & \rightarrow & (n+1)\text{-esimo elemento de la lista}
\end{array}
\]

\end_inset

es sobreyectiva y la propiedad (I) nos garantiza que dicha funcion es inyectiva,
 por lo cual entre las dos nos garantizan que dicha representacion establece una biyeccion entre 
\begin_inset Formula $\omega$
\end_inset

 y 
\begin_inset Formula $\widetilde{Num}^{\ast}$
\end_inset

.
\end_layout

\begin_layout Standard
Por supuesto,
 la pregunta que inmediatamente surge es como calcular la inversa de 
\begin_inset Formula $\ast$
\end_inset

.
 Llamemos 
\begin_inset Formula $\#$
\end_inset

 a la inversa de 
\begin_inset Formula $\ast$
\end_inset

.
 Notese que dada una palabra 
\begin_inset Formula $\alpha\in\widetilde{Num}^{\ast}$
\end_inset

,
 el numero 
\begin_inset Formula $\#(\alpha)$
\end_inset

 es justamente el numero representado por la palabra 
\begin_inset Formula $\alpha$
\end_inset

,
 o dicho de otra forma 
\begin_inset Formula $\#(\alpha)$
\end_inset

 es la posicion que ocupa 
\begin_inset Formula $\alpha$
\end_inset

 en la lista,
 contando desde el 
\begin_inset Formula $0$
\end_inset

 (es decir 
\begin_inset Formula $\alpha$
\end_inset

 es la 
\begin_inset Formula $(\#(\alpha)+1)$
\end_inset

-esima palabra de la lista).
 Por ejemplo:
\begin_inset Formula 
\begin{gather*}
\#(\varepsilon)=0\\
\#(1)=1\\
\vdots\\
\#(9)=9\\
\#(d)=10\\
\#(11)=11\\
\#(12)=12\\
\vdots\\
\#(19)=19\\
\#(1d)=20
\end{gather*}

\end_inset

Aqui hay que tener cuidado como leemos las igualdades anteriores.
 Por ejemplo en la igualdad
\begin_inset Formula 
\[
\#(1)=1
\]

\end_inset

la primera ocurrencia del simbolo 
\begin_inset Formula $1$
\end_inset

 se refiere al numeral uno,
 es decir denota una palabra y la segunda ocurrencia se esta refiriendo al numero uno,
 es decir denota un numero.
\end_layout

\begin_layout Standard
Dejamos al lector el ejercicio de ganar intuicion con ejemplos hasta que se convensa de que tal como en el caso de la notacion decimal,
 el numero 
\begin_inset Formula $\#(\alpha)$
\end_inset

 se expresa como una suma de potencias de 
\begin_inset Formula $10$
\end_inset

,
 con los coeficientes dados en funcion de los simbolos de 
\begin_inset Formula $\alpha$
\end_inset

.
 Mas concretamente si 
\begin_inset Formula $\alpha=s_{1}s_{2}...s_{k}$
\end_inset

 con 
\begin_inset Formula $k\geq1$
\end_inset

 y 
\begin_inset Formula $s_{1},s_{2},...,s_{k}\in\widetilde{Num}$
\end_inset

,
 entonces
\begin_inset Formula 
\[
\#(\alpha)=\#(s_{1}).10^{k-1}+\#(s_{2}).10^{k-2}+...+\#(s_{k}).10^{0}
\]

\end_inset

No daremos ahora una prueba formal de este hecho pero para ganar intuicion sobre el mismo el lector puede hacer los Ejercicios 13,
 14,
 15 y 16.
 Algunos ejemplos
\begin_inset Formula 
\begin{align*}
\#(1d) & =1.10^{1}+10.10^{0}=10+10=20\\
\#(dd) & =10.10^{1}+10.10^{0}=100+10=110\\
\#(111) & =1.10^{2}+1.10^{1}+1.10^{0}=100+10+1=111\\
\#(1d3d) & =1.10^{3}+10.10^{2}+3.10^{1}+10.10^{0}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Ahora que sabemos que las palabras de 
\begin_inset Formula $\widetilde{Num}$
\end_inset

 representan los numeros como suma de potencias de diez,
 en forma analoga a la notacion decimal clasica,
 podemos refozar aun mas la analogia poniendo nombres adecuados que,
 tal como en el caso clasico,
 nos permitan leer las palabras de 
\begin_inset Formula $\widetilde{Num}$
\end_inset

 describiendo su suma de potencias asociada.
 Por ejemplo podriamos llamar 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

decenta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 al numero 
\begin_inset Formula $100$
\end_inset

,
 por analogia a 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

treinta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

,
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

cuarenta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

,...,
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

noventa
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
 O sea una decenta es diez veces diez.
 De esta forma la palabra 
\begin_inset Formula $d1$
\end_inset

 se leera 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

decenta y uno
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 y esto es natural ya que en la lista representa al 
\begin_inset Formula $101$
\end_inset

.
 La palabra 
\begin_inset Formula $dd$
\end_inset

 se leera 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

decenta y diez
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 y esto describe a la perfeccion el numero que representa,
 i.e.
 el 
\begin_inset Formula $10.10+10=110$
\end_inset

.
 La palabra que sigue en la lista a 
\begin_inset Formula $dd$
\end_inset

 es 
\begin_inset Formula $111$
\end_inset

 la cual representa al 
\begin_inset Formula $111$
\end_inset

,
 es decir aqui como en los otros casos vistos en los cuales no hay ocurrencias del simbolo 
\begin_inset Formula $d$
\end_inset

 la palabra representa al mismo numero que representa en la notacion decimal clasica.
 Por dar otro ejemplo,
 la palabra 
\begin_inset Formula $59d3$
\end_inset

 se leera 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

cinco mil novecientos decenta y tres
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 y representara al numero 
\begin_inset Formula $6003$
\end_inset

.
\end_layout

\begin_layout Standard
Para seguir debemos ponerle nombre a 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

diez veces cien
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

,
 es decir,
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

decientos
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 (por analogia con 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

novecientos = nueve veces cien
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

) denotara al numero 
\begin_inset Formula $1000=10.100$
\end_inset

.
 De esta forma la palabra 
\begin_inset Formula $d51$
\end_inset

 se leera 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

decientos cincuenta y uno
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 y esto es natural ya que pensando un rato se puede ver que ella representa al 
\begin_inset Formula $1051$
\end_inset

.
 Tambien,
 la palabra 
\begin_inset Formula $ddd$
\end_inset

 se leera 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

decientos decenta y diez
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 y representara al numero 
\begin_inset Formula $1110$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Prueba de las propiedades (S) e (I)
\end_layout

\begin_layout Standard
Dado que el siguiente a un elemento 
\begin_inset Formula $\alpha$
\end_inset

 de la lista es de la misma longitud que 
\begin_inset Formula $\alpha$
\end_inset

 o tiene longitud igual a 
\begin_inset Formula $\left\vert \alpha\right\vert +1$
\end_inset

,
 podemos representar la lista anterior de la siguiente manera:
\begin_inset Formula 
\[
B_{0};B_{1};B_{2};B_{3};B_{4};...
\]

\end_inset

donde cada 
\begin_inset Formula $B_{n}$
\end_inset

 es,
 por definicion,
 la parte de la lista en la cual las palabras tienen longitud exactamente 
\begin_inset Formula $n$
\end_inset

.
 Por ejemplo:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $B_{0}$
\end_inset

 es 
\begin_inset Formula $\varepsilon$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $B_{1}$
\end_inset

 es 
\begin_inset Formula $1,2,3,4,5,6,7,8,9,d$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $B_{2}$
\end_inset

 es 
\begin_inset Formula $11,12,...,1d,21,22,...,2d,...,91,92,...,9d,d1,d2,...,dd$
\end_inset

 
\end_layout

\begin_layout Standard
Notese que hasta el momento nada nos asegura que no suceda que para algun 
\begin_inset Formula $n$
\end_inset

 se de que 
\begin_inset Formula $B_{n}$
\end_inset

 sea una lista infinita,
 lo cual ademas nos diria que los bloques 
\begin_inset Formula $B_{n+1},B_{n+2},...$
\end_inset

 son todos vacios.
 Es decir podria pasar que la lista se estanque en una longitud 
\begin_inset Formula $n$
\end_inset

 y nunca aparezca una palabra de longitud mayor que 
\begin_inset Formula $n$
\end_inset

.
 Esto por supuesto obligaria a que se repitan muchas veces palabras de dicha longitud 
\begin_inset Formula $n$
\end_inset

 ya que hay una cantidad finita de las mismas (
\begin_inset Formula $10^{n}$
\end_inset

).
\end_layout

\begin_layout Standard
Por supuesto nuestra intuicion nos dice que en el bloque 
\begin_inset Formula $B_{n}$
\end_inset

 estan listadas sin repeticion todas las palabras de 
\begin_inset Formula $\widetilde{Num}^{\ast}$
\end_inset

 de longitud 
\begin_inset Formula $n$
\end_inset

,
 pero debemos justificar esto con argumentos solidos.
 Algunas propiedades basicas que se pueden probar facilmente son:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

Si 
\begin_inset Formula $B_{n}=\alpha_{1},...,\alpha_{k}$
\end_inset

,
 entonces 
\begin_inset Formula $\alpha_{1}=1^{n}$
\end_inset

 y 
\begin_inset Formula $\alpha_{k}=d^{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

Si 
\begin_inset Formula $d^{n}$
\end_inset

 ocurre en 
\begin_inset Formula $B_{n}$
\end_inset

 lo hace en la ultima posicion 
\end_layout

\begin_layout Standard
\noindent
estas propiedades son consecuencias inmediatas de como se calcula el elemento siguiente a uno dado en la lista.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 13:
\end_layout

\end_inset

(O) Justifique con palabras la propiedad (1)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 14:
\end_layout

\end_inset

(O) Justifique con palabras la propiedad (2) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Otra propiedad importante es la siguiente
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset

Si 
\begin_inset Formula $B_{n}=\alpha_{1},...,\alpha_{k}$
\end_inset

,
 entonces 
\begin_inset Formula $B_{n+1}=1\alpha_{1},...,1\alpha_{k},2\alpha_{1},...,2\alpha_{k},...,d\alpha_{1},...,d\alpha_{k}$
\end_inset

 
\end_layout

\begin_layout Standard
Para probar (3) es muy util el siguiente resultado obvio
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\sigma\in\widetilde{Num}$
\end_inset

 y supongamos 
\begin_inset Formula $\alpha\in\widetilde{Num}^{\ast}$
\end_inset

 no es de la forma 
\begin_inset Formula $d^{n}$
\end_inset

.
 Entonces el siguiente a 
\begin_inset Formula $\sigma\alpha$
\end_inset

 es 
\begin_inset Formula $\sigma\beta$
\end_inset

 donde 
\begin_inset Formula $\beta$
\end_inset

 es el siguiente a 
\begin_inset Formula $\alpha$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 15:
\end_layout

\end_inset

(O) Use (1),
 (2) y el lema anterior para dar una explicacion solida con palabras de por que es cierta la propiedad (3) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Ahora es facil usando (3) probar inductivamente que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset


\begin_inset Formula $B_{n}$
\end_inset

 es una lista sin repeticiones de todas las palabras de longitud 
\begin_inset Formula $n$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 16:
\end_layout

\end_inset

(O) Pruebe (4) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Pero claramente de (4) se desprenden en forma obvia las propiedades (S) y (I).
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
El caso general
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto no vacio y supongamos 
\begin_inset Formula $\leq$
\end_inset

 es un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Supongamos que 
\begin_inset Formula $\Sigma=\{a_{1},...,a_{n}\}$
\end_inset

,
 con 
\begin_inset Formula $a_{1}<a_{2}<...<a_{n}$
\end_inset

.
 Inspirados en la lista dada anteriormente de las palabras de 
\begin_inset Formula $\widetilde{Num}^{\ast}$
\end_inset

,
 podemos dar la siguiente lista de palabras de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\small \varepsilon,a}_{1}{\small ,a}_{2}{\small ,...,a}_{n}{\small ,}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\small a}_{1}{\small a}_{1}{\small ,a}_{1}{\small a}_{2}{\small ,...,a}_{1}{\small a}_{n}{\small ,a}_{2}{\small a}_{1}{\small ,a}_{2}{\small a}_{2}{\small ,...,a}_{2}{\small a}_{n}{\small ,...,a}_{n}{\small a}_{1}{\small ,a}_{n}{\small a}_{2}{\small ,...,a}_{n}{\small a}_{n}{\small ,}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\small a}_{1}{\small a}_{1}{\small a}_{1}{\small ,a}_{1}{\small a}_{1}{\small a}_{2}{\small ,...,a}_{1}{\small a}_{1}{\small a}_{n}{\small ,a}_{1}{\small a}_{2}{\small a}_{1}{\small ,a}_{1}{\small a}_{2}{\small a}_{2}{\small ,...,a}_{1}{\small a}_{2}{\small a}_{n}{\small ,...,a}_{1}{\small a}_{n}{\small a}_{1}{\small ,a}_{1}{\small a}_{n}{\small a}_{2}{\small ,a}_{1}{\small a}_{n}{\small a}_{n}{\small ,}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\small a}_{2}{\small a}_{1}{\small a}_{1}{\small ,a}_{2}{\small a}_{1}{\small a}_{2}{\small ,...,a}_{2}{\small a}_{1}{\small a}_{n}{\small ,a}_{2}{\small a}_{2}{\small a}_{1}{\small ,a}_{2}{\small a}_{2}{\small a}_{2}{\small ,...,a}_{2}{\small a}_{2}{\small a}_{n}{\small ,...,a}_{2}{\small a}_{n}{\small a}_{1}{\small ,a}_{2}{\small a}_{n}{\small a}_{2}{\small ,a}_{2}{\small a}_{n}{\small a}_{n}{\small ,}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\small \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ }\vdots$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\small a}_{n}{\small a}_{1}{\small a}_{1}{\small ,a}_{n}{\small a}_{1}{\small a}_{2}{\small ,...,a}_{n}{\small a}_{1}{\small a}_{n}{\small ,a}_{n}{\small a}_{2}{\small a}_{1}{\small ,a}_{n}{\small a}_{2}{\small a}_{2}{\small ,...,a}_{n}{\small a}_{2}{\small a}_{n}{\small ,...,a}_{n}{\small a}_{n}{\small a}_{1}{\small ,a}_{n}{\small a}_{n}{\small a}_{2}{\small ,a}_{n}{\small a}_{n}{\small a}_{n}{\small ,}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula ${\small a}_{1}{\small a}_{1}{\small a}_{1}{\small a}_{1}{\small ,a}_{1}{\small a}_{1}{\small a}_{1}{\small a}_{2}{\small ,...}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
El objetivo es probar que la lista anterior enumera sin repeticiones todas las palabras de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

,
 i.e.
 produce naturalmente una biyeccion entre 
\begin_inset Formula $\omega$
\end_inset

 y 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

.
 Pero antes debemos definir mas formalmente la lista.
 Para esto definamos 
\begin_inset Formula $s^{\leq}:\Sigma^{\ast}\rightarrow\Sigma^{\ast}$
\end_inset

 de la siguiente manera
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $s^{\leq}((a_{n})^{m})=(a_{1})^{m+1}$
\end_inset

,
 para cada 
\begin_inset Formula $m\geq0$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $s^{\leq}(\alpha a_{i}(a_{n})^{m})=\alpha a_{i+1}(a_{1})^{m}$
\end_inset

,
 cada vez que 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 
\begin_inset Formula $1\leq i<n$
\end_inset

 y 
\begin_inset Formula $m\geq0$
\end_inset

 
\end_layout

\begin_layout Standard
Notese que la definicion de 
\begin_inset Formula $s^{\leq}$
\end_inset

 es correcta ya que toda palabra de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 es de la forma 
\begin_inset Formula $(a_{n})^{m}$
\end_inset

,
 con 
\begin_inset Formula $m\geq0$
\end_inset

,
 o es de la forma 
\begin_inset Formula $\alpha a_{i}(a_{n})^{m}$
\end_inset

,
 con 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 
\begin_inset Formula $1\leq i<n$
\end_inset

 y 
\begin_inset Formula $m\geq0$
\end_inset

;
 y estos dos casos posibles son mutuamente excluyentes (convencerse fuertemente de que esto es asi).
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 17:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,!,@\}$
\end_inset

 y sea 
\begin_inset Formula $\leq$
\end_inset

 el orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

 dado por 
\begin_inset Formula $\%<!<@$
\end_inset

 (es decir que aqui 
\begin_inset Formula $a_{1}=\%$
\end_inset

,
 
\begin_inset Formula $a_{2}=!$
\end_inset

 y 
\begin_inset Formula $a_{3}=@$
\end_inset

).
 Escriba los primeros elementos de la lista y describa para este caso particular la funcion 
\begin_inset Formula $s^{\leq}$
\end_inset

,
 sin hablar de 
\begin_inset Formula $a_{i}%TCIMACRO{\U{b4}}%
%BeginExpansion
\acute{}%EndExpansion
s$
\end_inset

,
 i.e.
 solo haciendo referencia a los simbolos 
\begin_inset Formula $\%,!,@$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 18:
\end_layout

\end_inset

Pruebe para el caso general que
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\varepsilon\neq s^{\leq}(\alpha)$
\end_inset

,
 para cada 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $\alpha\neq\varepsilon$
\end_inset

,
 entonces 
\begin_inset Formula $\alpha=s^{\leq}(\beta)$
\end_inset

 para algun 
\begin_inset Formula $\beta$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 19:
\end_layout

\end_inset

(a) Convensace de que valen las siguientes ecuaciones
\begin_inset Formula 
\begin{align*}
s^{\leq}(\varepsilon) & =a_{1}\\
s^{\leq}(\alpha a_{i}) & =\alpha a_{i+1}\text{, }i<n\\
s^{\leq}(\alpha a_{n}) & =s^{\leq}(\alpha)a_{1}
\end{align*}

\end_inset

(b) (S) Pruebe formalmente que valen las ecuaciones de (a)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 20:
\end_layout

\end_inset

(S) Note que sucesivas aplicaciones de las ecuaciones anteriores determinan por completo el valor de 
\begin_inset Formula $s^{\leq}$
\end_inset

 en una palabra 
\begin_inset Formula $\alpha$
\end_inset

 previamente fijada.
 Explique esto con palabras.
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Por supuesto,
 la lista anterior puede ser escrita de la siguiente manera
\end_layout

\begin_layout Standard
\begin_inset Formula $\bigskip$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\varepsilon,s^{\leq}(\varepsilon),s^{\leq}(s^{\leq}(\varepsilon)),s^{\leq}(s^{\leq}(s^{\leq}(\varepsilon))),s^{\leq}(s^{\leq}(s^{\leq}(s^{\leq}(\varepsilon)))),...$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Con esta definicion formal de la lista,
 podemos probar de la misma forma en la que lo hicimos arriba que:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(S)
\end_layout

\end_inset

Toda palabra de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 aparece en la lista
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(I)
\end_layout

\end_inset

Ninguna palabra de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 aparese mas de una ves en la lista 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 21:
\end_layout

\end_inset

(S) (O) Pruebe (S) e (I).
 Hint:
 use las mismas ideas que se usaron para probar (S) e (I) para el caso de 
\begin_inset Formula $\Sigma=\widetilde{Num}$
\end_inset

 y 
\begin_inset Formula $\leq$
\end_inset

 dado por 
\begin_inset Formula $1<2<3<4<5<6<7<8<9<d$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Definamos 
\begin_inset Formula $\ast^{\leq}:\omega\rightarrow\Sigma^{\ast}$
\end_inset

 recursivamente de la siguiente manera:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\ast^{\leq}(0)=\varepsilon$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\ast^{\leq}(i+1)=s^{\leq}(\ast^{\leq}(i))$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
Es claro que entonces 
\begin_inset Formula $\ast^{\leq}(i)$
\end_inset

 nos da el 
\begin_inset Formula $(i+1)$
\end_inset

-esimo elemento de la lista,
 o lo que es lo mismo,
 el 
\begin_inset Formula $i$
\end_inset

-esimo elemento de la lista contando desde el 
\begin_inset Formula $0$
\end_inset

.
 O sea que las propiedades (S) y (I) nos garantizan que la funcion 
\begin_inset Formula $\ast^{\leq}$
\end_inset

 es biyectiva.
 A continuacion describiremos su inversa.
 Primero un lema facil pero muy importante.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto no vacio y supongamos 
\begin_inset Formula $\leq$
\end_inset

 es un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Supongamos que 
\begin_inset Formula $\Sigma=\{a_{1},...,a_{n}\}$
\end_inset

,
 con 
\begin_inset Formula $a_{1}<a_{2}<...<a_{n}$
\end_inset

.
 Entonces para cada 
\begin_inset Formula $\alpha\in\Sigma^{\ast}-\{\varepsilon\}$
\end_inset

 hay unicos 
\begin_inset Formula $k\in\omega$
\end_inset

 y 
\begin_inset Formula $i_{0},i_{1},...,i_{k}\in\{1,...,n\}$
\end_inset

 tales que
\begin_inset Formula 
\[
\alpha=a_{i_{k}}...a_{i_{0}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notar que 
\begin_inset Formula $k$
\end_inset

 del lema anterior es 
\begin_inset Formula $\left\vert \alpha\right\vert -1$
\end_inset

 y los numeros 
\begin_inset Formula $i_{k},...,i_{0}$
\end_inset

 van dando el numero de orden de cada simbolo de 
\begin_inset Formula $\alpha$
\end_inset

 yendo de izquierda a derecha.
 Por ejemplo si 
\begin_inset Formula $\Sigma=\{\%,!,@\}$
\end_inset

 y 
\begin_inset Formula $\leq$
\end_inset

 es el orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

 dado por 
\begin_inset Formula $\%<!<@$
\end_inset

 (es decir que aqui 
\begin_inset Formula $a_{1}=\%$
\end_inset

,
 
\begin_inset Formula $a_{2}=!$
\end_inset

 y 
\begin_inset Formula $a_{3}=@$
\end_inset

) entonces para la palabra 
\begin_inset Formula $!\%@\%@$
\end_inset

 tenemos 
\begin_inset Formula $k=4$
\end_inset

 y 
\begin_inset Formula $i_{4}=2$
\end_inset

,
 
\begin_inset Formula $i_{3}=1$
\end_inset

,
 
\begin_inset Formula $i_{2}=3$
\end_inset

,
 
\begin_inset Formula $i_{1}=1$
\end_inset

 y 
\begin_inset Formula $i_{0}=3$
\end_inset

.
 Sin envargo si hubieramos tomado el orden dado por 
\begin_inset Formula $@<\%<!$
\end_inset

,
 para la misma palabra hubieramos tenido 
\begin_inset Formula $i_{4}=3$
\end_inset

,
 
\begin_inset Formula $i_{3}=2$
\end_inset

,
 
\begin_inset Formula $i_{2}=1$
\end_inset

,
 
\begin_inset Formula $i_{1}=2$
\end_inset

 y 
\begin_inset Formula $i_{0}=1$
\end_inset

.
\end_layout

\begin_layout Standard
Ahora podemos definir la funcion 
\begin_inset Formula $\#^{\leq}$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\[
\begin{array}[t]{rll}
\#^{\leq}:\Sigma^{\ast} & \rightarrow & \omega\\
\varepsilon & \rightarrow & 0\\
a_{i_{k}}...a_{i_{0}} & \rightarrow & i_{k}n^{k}+...+i_{0}n^{0}
\end{array}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 22:
\end_layout

\end_inset

Si 
\begin_inset Formula $\leq$
\end_inset

 es el orden de 
\begin_inset Formula $\{@,\&\}$
\end_inset

 dado por 
\begin_inset Formula $@<\&$
\end_inset

,
 entonces 
\begin_inset Formula $\#^{\leq}(@\&@\&@)=2^{4}+2^{4}+2^{2}+2^{2}+1$
\end_inset

 y 
\begin_inset Formula $\#^{\leq}(@\&@\&@)=2^{5}+2^{3}+1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 23:
\end_layout

\end_inset

Si 
\begin_inset Formula $\leq$
\end_inset

 es el orden de 
\begin_inset Formula $\{@,\&\}$
\end_inset

 dado por 
\begin_inset Formula $@<\&$
\end_inset

,
 entonces 
\begin_inset Formula $\#^{\leq}(\alpha@)=\#^{\leq}(\alpha).2+1$
\end_inset

,
 para todo 
\begin_inset Formula $\alpha\in\{@,\&\}^{\ast}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 24:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito no vacio y sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Inspirese en el ejercicio anterior para dar una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

definicion recursiva
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 de la funcion 
\begin_inset Formula $\#^{\leq}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Aceptaremos sin prueba el siguiente resultado fundamental
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 La funcion 
\begin_inset Formula $\#^{\leq}$
\end_inset

 es la inversa de 
\begin_inset Formula $\ast^{\leq}$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Cabe destacar que dada una palabra 
\begin_inset Formula $\alpha$
\end_inset

,
 el numero 
\begin_inset Formula $\#^{\leq}(\alpha)$
\end_inset

 nos dice en que posicion se hubica 
\begin_inset Formula $\alpha$
\end_inset

 en la lista,
 es decir 
\begin_inset Formula $\alpha$
\end_inset

 es la (
\begin_inset Formula $\#^{\leq}(\alpha)+1$
\end_inset

)-esima palabra de la lista.
\end_layout

\begin_layout Standard
De los desarrollos hechos se desprende el siguiente interesante resultado
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $n\geq1$
\end_inset

 fijo.
 Entonces cada 
\begin_inset Formula $x\geq1$
\end_inset

 se escribe en forma unica de la siguiente manera:
\begin_inset Formula 
\[
x=i_{k}n^{k}+i_{k-1}n^{k-1}+...+i_{0}n^{0},
\]

\end_inset

con 
\begin_inset Formula $k\geq0$
\end_inset

 y 
\begin_inset Formula $1\leq i_{k},i_{k-1},...,i_{0}\leq n$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 25:
\end_layout

\end_inset

(S) Pruebe el lema anterior
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 26:
\end_layout

\end_inset

(S) Si 
\begin_inset Formula $\leq$
\end_inset

 es un orden total sobre un alfabeto no vacio 
\begin_inset Formula $\Sigma$
\end_inset

,
 entonces 
\begin_inset Formula $s^{\leq}=\ast^{\leq}\circ Suc\circ\#^{\leq}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Como hemos visto las biyecciones dadas producen una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

identificacion
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 entre numeros de 
\begin_inset Formula $\omega$
\end_inset

 y palabras del alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Es decir,
 en algun sentido identificamos palabras y numeros ya que se corresponden biunivocamente.
 Supongamos que 
\begin_inset Formula $\alpha$
\end_inset

 es una palabra de 
\begin_inset Formula $\Sigma^{\ast}-\{\varepsilon\}$
\end_inset

 y queremos 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

verla como un numero
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
 Entonces en ves de ver sus simbolos vemos los ordenes de aparicion en 
\begin_inset Formula $\Sigma$
\end_inset

 de los mismos y miramos la suma de potencias asociada.
\end_layout

\begin_layout Standard
Supongamos ahora que 
\begin_inset Formula $x$
\end_inset

 es un numero de 
\begin_inset Formula $\omega-\{0\}$
\end_inset

 y ademas supongamos que somos super inteligentes y que cuando vemos a 
\begin_inset Formula $x$
\end_inset

 vemos la secuencia unica de numeros 
\begin_inset Formula $i_{k},i_{k-1},...,i_{0}$
\end_inset

 que nos permite expresarlo como suma de potencias segun el lema anterior.
 Entonces si queremos ver a 
\begin_inset Formula $x$
\end_inset

 como una palabra simplemente miramos la secuencia 
\begin_inset Formula $i_{k},i_{k-1},...,i_{0}$
\end_inset

 como palabra,
 reemplazando cada 
\begin_inset Formula $i_{j}$
\end_inset

 por el simbolo 
\begin_inset Formula $i_{j}$
\end_inset

-esimo de 
\begin_inset Formula $\Sigma$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 27:
\end_layout

\end_inset

Mastique mastique e imagine hasta que entienda con claridad el ultimo parrafo.
 Luego sera mas mariposa.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Extension del orden total de 
\begin_inset Formula $\Sigma$
\end_inset

 a 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset


\end_layout

\begin_layout Standard
Podemos extender el orden de 
\begin_inset Formula $\Sigma$
\end_inset

 a 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 de la siguiente manera.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\alpha\leq\beta$
\end_inset

 sii 
\begin_inset Formula $\#^{\leq}(\alpha)\leq\#^{\leq}(\beta)$
\end_inset

 
\end_layout

\begin_layout Standard
Es decir 
\begin_inset Formula $\alpha\leq\beta$
\end_inset

 sii 
\begin_inset Formula $\alpha=\beta$
\end_inset

 o 
\begin_inset Formula $\alpha$
\end_inset

 ocurre antes que 
\begin_inset Formula $\beta$
\end_inset

 en la lista.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 28:
\end_layout

\end_inset

Probar que 
\begin_inset Formula $\leq$
\end_inset

 es un orden total sobre 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Una propiedad importante e intuitivamente clara es que el orden recien definido sobre 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 posee las mismas caracteristicas que el orden usual de 
\begin_inset Formula $\omega$
\end_inset

.
 Por ejemplo:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Si 
\begin_inset Formula $S\subseteq\Sigma^{\ast}$
\end_inset

 es no vacio,
 entonces existe 
\begin_inset Formula $\alpha\in S$
\end_inset

 tal que 
\begin_inset Formula $\alpha\leq\beta$
\end_inset

,
 para cada 
\begin_inset Formula $\beta\in S$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 29:
\end_layout

\end_inset

(S) Pruebe el lema anterior 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Guia 3
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Section*
Procedimientos efectivos
\end_layout

\begin_layout Standard
Un concepto importante en ciencias de la computacion es el de 
\shape italic
procedimiento
\shape default
 o 
\shape italic
metodo
\shape default
 para realizar alguna tarea determinada.
 Nos interesan los procedimientos que estan definidos en forma precisa e inambigua,
 es decir aquellos en los cuales en cada paso a seguir,
 la tarea a realizar esta objetivamente descripta.
 Tambien deben ser repetibles,
 en el sentido de que si realizamos un procedimiento dos veces con el mismo dato de entrada,
 entonces ambas ejecuciones deben ser identicas,
 es decir se realizaran las mismas tareas y en el mismo orden.
\end_layout

\begin_layout Standard
Nos interesan los procedimientos 
\begin_inset Formula $\mathbb{P}$
\end_inset

 que posean las siguientes caracteristicas:
\end_layout

\begin_layout Enumerate
Siempre supondremos que el interprete o ejecutante de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es una persona que trabajara con papel y lapiz (ambos recursos disponibles en forma ilimitada).
\end_layout

\begin_layout Enumerate
Cada paso o tarea que 
\begin_inset Formula $\mathbb{P}$
\end_inset

 encomiende a realizar debe ser simple y facil de realizar en forma 
\shape italic
efectiva
\shape default
 por cualquier persona.
\end_layout

\begin_layout Enumerate
El procedimiento 
\begin_inset Formula $\mathbb{P}$
\end_inset

 comienza a funcionar siempre a partir de cierto dato de entrada y una ves que haya comensado,
 siempre sucedera una de las dos siguientes posibilidades
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathbb{P}$
\end_inset

 se detiene y da cierto dato de salida
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathbb{P}$
\end_inset

 nunca se detiene,
 es decir a medida que se van realizando las instrucciones o tareas,
 
\begin_inset Formula $\mathbb{P}$
\end_inset

 siempre direcciona a realizar nuevas tareas y lo hace sucesiva e indefinidamente.
 
\end_layout

\begin_layout Standard
En el caso (a) diremos que 
\begin_inset Formula $\mathbb{P}$
\end_inset

 se detiene partiendo del dato de entrada en cuestion y en el caso (b) diremos que 
\begin_inset Formula $\mathbb{P}$
\end_inset

 no se detiene partiendo de dicho dato.
\end_layout

\end_deeper
\begin_layout Enumerate
Hay 
\begin_inset Formula $n,m\in\omega$
\end_inset

 y un alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

 tales que el conjunto de datos de entrada de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Cabe aclarar que para ciertas 
\begin_inset Formula $(n+m)$
\end_inset

-uplas de 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 el procedimiento 
\begin_inset Formula $\mathbb{P}$
\end_inset

 se detendra y para ciertas otras no lo hara.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Llamaremos 
\shape italic
procedimientos efectivos
\shape default
 a aquellos procedimientos que posean las caracteristicas arriba mencionadas.
\end_layout

\begin_layout Standard
El 
\shape italic
conjunto de datos de salida de 
\shape default

\begin_inset Formula $\mathbb{P}$
\end_inset

 es el conjunto de todos los datos que el procedimiento 
\begin_inset Formula $\mathbb{P}$
\end_inset

 dara como salida en alguna de las posibles ejecuciones al variar todos los datos de entrada posibles.
 Si bien siempre el conjunto de datos de entrada sera de la forma 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

,
 puede ser muy dificil o imposible,
 en general,
 conocer con precision el conjunto de datos de salida de un procedimiento (esto lo justificaremos mas adelante).
\end_layout

\begin_layout Standard
Ya que el interprete de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es una persona dotada de lapiz y papel,
 supondremos que los elementos de 
\begin_inset Formula $\omega$
\end_inset

 que intervienen en los datos de entrada y de salida estaran representados por palabras de 
\begin_inset Formula $Num$
\end_inset

 usando la notacion decimal.
\end_layout

\begin_layout Standard
Quisas el procedimiento efectivo mas famoso de la matematica es aquel que se enseña en los colegios para sumar dos numeros naturales expresados en notacion decimal.
 Notar que el conjunto de datos de entrada de dicho procedimiento es 
\begin_inset Formula $\omega^{2}$
\end_inset

 y el conjunto de datos de salida es el conjunto formado por todas las sumas posibles de pares de elementos de 
\begin_inset Formula $\omega$
\end_inset

,
 es decir 
\begin_inset Formula $\omega$
\end_inset

.
 Por supuesto este procedimiento solo usa lapiz,
 papel y pasos extremadamente simples a seguir en cada momento de la computacion,
 es decir,
 en algun sentido,
 no es necesario 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

entender que es lo que se esta haciendo
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 para llegar al final y obtener la palabra que representa en notacion decimal a la suma de los numeros iniciales.
 Dejamos al lector repasar este procedimiento asi como el que calcula dado un numero 
\begin_inset Formula $x$
\end_inset

 no nulo de 
\begin_inset Formula $\omega$
\end_inset

,
 al numero 
\begin_inset Formula $x-1$
\end_inset

,
 los cuales nos haran falta mas adelante en los ejemplos.
\end_layout

\begin_layout Subsection*
Funciones 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables
\end_layout

\begin_layout Standard
Una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 sera llamada 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-efectivamente computable
\shape default
 si hay un procedimiento efectivo 
\begin_inset Formula $\mathbb{P}$
\end_inset

 tal que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

El conjunto de datos de entrada de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

El conjunto de datos de salida esta contenido en 
\begin_inset Formula $\omega$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $\mathbb{P}$
\end_inset

 se detiene partiendo de 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

,
 dando como dato de salida 
\begin_inset Formula $f(\vec{x},\vec{\alpha})$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in(\omega^{n}\times\Sigma^{\ast m})-D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $\mathbb{P}$
\end_inset

 no se detiene partiendo desde 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

 
\end_layout

\begin_layout Standard
Analogamente una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\Sigma^{\ast}$
\end_inset

 sera llamada 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-efectivamente computable
\shape default
 si hay un procedimiento efectivo 
\begin_inset Formula $\mathbb{P}$
\end_inset

 tal que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

El conjunto de datos de entrada de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

El conjunto de datos de salida esta contenido en 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $\mathbb{P}$
\end_inset

 se detiene partiendo de 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

,
 dando como dato de salida 
\begin_inset Formula $f(\vec{x},\vec{\alpha})$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in(\omega^{n}\times\Sigma^{\ast m})-D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $\mathbb{P}$
\end_inset

 no se detiene partiendo desde 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

 
\end_layout

\begin_layout Standard
En ambos casos diremos que 
\begin_inset Formula $\mathbb{P}$
\end_inset

 
\shape italic
computa
\shape default
 a la funcion 
\begin_inset Formula $f$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Veamos algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $($
\end_inset

E
\begin_inset Formula $1)$
\end_inset


\end_layout

\end_inset

La funcion 
\begin_inset Formula $\lambda xy\left[x+y\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 cualquiera sea el alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

 ya que el procedimiento enseñado en la escuela primaria para sumar numeros en notacion decimal es efectivo y computa esta funcion.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $($
\end_inset

E
\begin_inset Formula $2)$
\end_inset


\end_layout

\end_inset

La funcion 
\begin_inset Formula $C_{3}^{1,2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable ya que el siguiente procedimiento 
\begin_inset Formula $\mathbb{P}$
\end_inset

 con conjunto de datos de entrada 
\begin_inset Formula $\omega\times\Sigma^{\ast2}$
\end_inset

 la computa:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Independientemente de quien sea el dato de entrada 
\begin_inset Formula $(x_{1},\alpha_{1},\alpha_{2})$
\end_inset

,
 detenerse dando como salida el numero 
\begin_inset Formula $3$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $($
\end_inset

E
\begin_inset Formula $3)$
\end_inset


\end_layout

\end_inset

La funcion 
\begin_inset Formula $p_{3}^{2,3}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable ya que el siguiente procedimiento con conjunto de datos de entrada 
\begin_inset Formula $\omega^{2}\times\Sigma^{\ast3}$
\end_inset

 la computa:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Dado el dato de entrada 
\begin_inset Formula $(x_{1},x_{2},\alpha_{1},\alpha_{2},\alpha_{3})$
\end_inset

,
 detenerse y dar como salida la palabra 
\begin_inset Formula $\alpha_{1}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $($
\end_inset

E
\begin_inset Formula $4)$
\end_inset


\end_layout

\end_inset


\begin_inset Formula $Pred$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Para realizar el procedimiento efectivo que compute a 
\begin_inset Formula $Pred$
\end_inset

 necesitaremos el procedimiento de la escuela primaria que dado un numero no nulo 
\begin_inset Formula $x$
\end_inset

,
 expresado en notacion decimal,
 calcula el numero 
\begin_inset Formula $x-1$
\end_inset

,
 en notacion decimal.
 Llamemos 
\begin_inset Formula $\mathbb{P}_{-1}$
\end_inset

 a dicho procedimiento.
 El siguiente procedimiento (con conjunto de datos de entrada igual a 
\begin_inset Formula $\omega$
\end_inset

) computa a 
\begin_inset Formula $Pred$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Standard
Dado como dato de entrada un elemento 
\begin_inset Formula $x\in\omega$
\end_inset

,
 realizar lo siguiente:
\end_layout

\begin_layout Standard
Etapa 1
\end_layout

\begin_layout Standard
\noindent
Si 
\begin_inset Formula $x=0$
\end_inset

,
 entonces ir a Etapa 3,
 en caso contrario ir a Etapa 2.
\end_layout

\begin_layout Standard
Etapa 2
\end_layout

\begin_layout Standard
\noindent
Correr 
\begin_inset Formula $\mathbb{P}_{-1}$
\end_inset

 con dato de entrada 
\begin_inset Formula $x$
\end_inset

 obteniendo 
\begin_inset Formula $y$
\end_inset

 como dato de salida.
 Detenerse y dar 
\begin_inset Formula $y$
\end_inset

 como dato de salida.
\end_layout

\begin_layout Standard
Etapa 3
\end_layout

\begin_layout Standard
\noindent
Si 
\begin_inset Formula $x=0$
\end_inset

,
 entonces ir a Etapa 1.
\end_layout

\begin_layout Standard
Como puede notarse el procedimiento anterior es efectivo ya que como todos sabemos,
 los sucesivos pasos efectuados al correr 
\begin_inset Formula $\mathbb{P}_{-1}$
\end_inset

 en la Etapa 2 son todos simples y efectivamente realizables.
 Por supuesto si uno quisiera ser mas prolijo,
 deberia reemplazar la Etapa 2 por las distintas instrucciones de 
\begin_inset Formula $\mathbb{P}_{-1}$
\end_inset

,
 referidas a 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E
\begin_inset Formula $5$
\end_inset

)
\end_layout

\end_inset

El predicado 
\begin_inset Formula $\lambda xy[x<y]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable cualquiera sea el alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Describiremos con palabras un procedimiento 
\begin_inset Formula $\mathbb{P}_{<}$
\end_inset

 que computa a 
\begin_inset Formula $\lambda xy[x<y]$
\end_inset

.
 Su conjunto de datos de entrada es 
\begin_inset Formula $\omega^{2}$
\end_inset

.
 Dado un par 
\begin_inset Formula $(x,y)\in\omega^{2}$
\end_inset

,
 el procedimiento primero compara las longitudes de las palabras que en notacion decimal representan a 
\begin_inset Formula $x$
\end_inset

 y 
\begin_inset Formula $y$
\end_inset

.
 Por supuesto esto lo hace borrando de a un simbolo y viendo si alguna se termina primero.
 Si resultan de distinta longitud,
 es facil darse cuenta como sigue.
 En caso de que las palabras resulten de igual longitud,
 entonces se hace el procedimiento clasico de ir comparando digitos de izquierda a derecha.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E
\begin_inset Formula $6$
\end_inset

)
\end_layout

\end_inset

Veamos que la funcion 
\begin_inset Formula $\lambda\alpha[\left\vert \alpha\right\vert ]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Como en los lenguajes de programacion,
 usaremos variables y asignaciones para diseñar el procedimiento.
 Ademas llamemos 
\begin_inset Formula $\mathbb{P}_{+1}$
\end_inset

 a el procedimiento de la escuela primaria que dado un numero no nulo 
\begin_inset Formula $x$
\end_inset

,
 expresado en notacion decimal,
 calcula el numero 
\begin_inset Formula $x+1$
\end_inset

,
 en notacion decimal.
 Sea 
\begin_inset Formula $\mathbb{P}_{\left\vert \ \right\vert }$
\end_inset

 el siguiente procedimiento.
\end_layout

\begin_deeper
\begin_layout Standard
Dado como dato de entrada un elemento 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 realizar lo siguiente:
\end_layout

\begin_layout Standard
Etapa 1:
 Hacer las siguientes asignaciones
\begin_inset Formula 
\begin{align*}
A & \leftarrow\alpha\\
B & \leftarrow0
\end{align*}

\end_inset

e ir a Etapa 2.
\end_layout

\begin_layout Standard
Etapa 2:
 Si 
\begin_inset Formula $A$
\end_inset

 no es 
\begin_inset Formula $\varepsilon$
\end_inset

,
 ir a Etapa 3.
 En caso contrario detenerse y dar como salida 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
Etapa 3:
 Correr 
\begin_inset Formula $\mathbb{P}_{+1}$
\end_inset

 con dato de entrada igual al contenido de 
\begin_inset Formula $B$
\end_inset

,
 obteniendo 
\begin_inset Formula $y$
\end_inset

 como salida.
 Hacer las siguientes asignaciones
\begin_inset Formula 
\begin{align*}
A & \leftarrow\text{resultado de remover el 1er simbolo de }A\\
B & \leftarrow y
\end{align*}

\end_inset

e ir a Etapa 2.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1:
\end_layout

\end_inset

Convensase que el uso de asignaciones puede realizarse usando solo lapiz y papel.
 Imagine como lo haria en el caso anterior y corrobore que dicho procedimiento es efectivo y ademas computa a 
\begin_inset Formula $\lambda\alpha[\left\vert \alpha\right\vert ]$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

Use los procedimientos 
\begin_inset Formula $\mathbb{P}_{<}$
\end_inset

 y 
\begin_inset Formula $\mathbb{P}_{\left\vert \ \right\vert }$
\end_inset

 de los dos ejemplos anteriores para diseñar usando asignaciones un procedimiento que compute a la funcion 
\begin_inset Formula $\lambda i\alpha[[\alpha]_{i}]$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Un ultimo ejemplo:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $($
\end_inset

E
\begin_inset Formula $7)$
\end_inset


\end_layout

\end_inset

Si 
\begin_inset Formula $\leq$
\end_inset

 es el orden total sobre 
\begin_inset Formula $\Sigma=\{\blacktriangle,\%\}$
\end_inset

 dado por 
\begin_inset Formula $\blacktriangle<\%$
\end_inset

,
 entonces veremos que la funcion 
\begin_inset Formula $s^{\leq}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 En un par de ejercicios de la Guia2 vimos que cualquiera sea 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 se cumple
\begin_inset Formula 
\begin{align*}
s^{\leq}(\varepsilon) & =\blacktriangle\\
s^{\leq}(\alpha\blacktriangle) & =\alpha\%\\
s^{\leq}(\alpha\%) & =s^{\leq}(\alpha)\blacktriangle
\end{align*}

\end_inset

y que estas ecuaciones permiten calcular el valor de 
\begin_inset Formula $s^{\leq}$
\end_inset

.
 Usaremos esta idea para dar un procedimiento efectivo (con conjunto de datos de entrada igual a 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

) que compute a 
\begin_inset Formula $s^{\leq}$
\end_inset

.
 Como en los lenguajes de programacion,
 usaremos variables y asignaciones para diseñar el procedimiento.
\end_layout

\begin_deeper
\begin_layout Standard
Etapa 1:
 Dado el dato de entrada 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 hacer las siguientes asignaciones
\begin_inset Formula 
\begin{align*}
A & \leftarrow\alpha\\
B & \leftarrow\varepsilon\\
F & \leftarrow\blacktriangle
\end{align*}

\end_inset

e ir a Etapa 2.
\end_layout

\begin_layout Standard
Etapa 2:
 Si 
\begin_inset Formula $A$
\end_inset

 comiensa con 
\begin_inset Formula $\blacktriangle$
\end_inset

,
 entonces hacer las siguientes asignaciones
\begin_inset Formula 
\begin{align*}
A & \leftarrow\text{resultado de remover el 1er simbolo de }A\\
F & \leftarrow B\%\\
B & \leftarrow B\blacktriangle
\end{align*}

\end_inset

e ir a la Etapa 2.
 En caso contrario ir a la Etapa 3.
\end_layout

\begin_layout Standard
Etapa 3:
 Si 
\begin_inset Formula $A$
\end_inset

 comiensa con 
\begin_inset Formula $\%$
\end_inset

,
 entonces hacer las siguientes asignaciones
\begin_inset Formula 
\begin{align*}
A & \leftarrow\text{resultado de remover el 1er simbolo de }A\\
F & \leftarrow F\blacktriangle\\
B & \leftarrow B\%
\end{align*}

\end_inset

e ir a la Etapa 2.
 En caso contrario ir a la Etapa 4.
\end_layout

\begin_layout Standard
Etapa 4:
 Dar como salida 
\begin_inset Formula $F$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Observacion:

\series default
 Notese que la definicion de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable para el caso 
\begin_inset Formula $f=\emptyset$
\end_inset

 tiene a priori cierta ambiguedad ya que cualesquiera sean 
\begin_inset Formula $n,m\in\omega$
\end_inset

 y 
\begin_inset Formula $O\in\{\omega,\Sigma^{\ast}\}$
\end_inset

 tenemos que 
\begin_inset Formula $\emptyset:\emptyset\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

 ya que 
\begin_inset Formula $D_{\emptyset}=\emptyset$
\end_inset

 y 
\begin_inset Formula $I_{\emptyset}=\emptyset$
\end_inset

.
 De todas maneras,
 cualesquiera sean los 
\begin_inset Formula $n,m$
\end_inset

 y 
\begin_inset Formula $O$
\end_inset

 elejidos,
 siempre hay un procedimiento efectivo que computa a 
\begin_inset Formula $f=\emptyset$
\end_inset

,
 i.e.
 un procedimiento que nunca se detiene,
 cualesquiera sea el dato de entrada de 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Es decir que la funcion 
\begin_inset Formula $\emptyset$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable cualesquiera sea el alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Cabe destacar que para el caso de una funcion 
\begin_inset Formula $f\neq\emptyset$
\end_inset

,
 nuestra definicion es inambigua ya que hay unicos 
\begin_inset Formula $n,m\in\omega$
\end_inset

 y 
\begin_inset Formula $O\in\{\omega,\Sigma^{\ast}\}$
\end_inset

 tales que 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\mathbb{P}_{+}$
\end_inset

 un procedimiento efectivo que compute a la funcion 
\begin_inset Formula $\lambda xy\left[x+y\right]$
\end_inset

.
 Basado en 
\begin_inset Formula $\mathbb{P}_{+}$
\end_inset

 diseñe un procedimiento efectivo que compute a 
\begin_inset Formula $\lambda xy\left[x.y\right]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\leq$
\end_inset

 es el orden total sobre 
\begin_inset Formula $\Sigma=\{\blacktriangle,\%\}$
\end_inset

 dado por 
\begin_inset Formula $\blacktriangle<\%$
\end_inset

.
 Usando que 
\begin_inset Formula $s^{\leq}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable diseñe un procedimiento efectivo que compute a 
\begin_inset Formula $\ast^{\leq}:\omega\rightarrow\Sigma^{\ast}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\blacktriangle,\%\}$
\end_inset

 y sea 
\begin_inset Formula $f:D_{f}\subseteq\omega\times\omega\times\Sigma^{\ast}\rightarrow\omega$
\end_inset

 dada por:
\begin_inset Formula 
\begin{align*}
D_{f} & =\{(0,1,\varepsilon),(55,54,\blacktriangle\%\blacktriangle\%\blacktriangle),(1,1,\blacktriangle\blacktriangle)\}\\
f(0,1,\varepsilon) & =1\\
f(55,54,\blacktriangle\%\blacktriangle\%\blacktriangle) & =2\\
f(1,1,\blacktriangle\blacktriangle) & =3
\end{align*}

\end_inset

Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 6:
\end_layout

\end_inset

Diga con palabras como diseñaria un procedimiento efectivo que compute la funcion 
\begin_inset Formula $\lambda ix[(x)_{i}]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

Sean
\begin_inset Formula 
\begin{align*}
f & :D_{f}\subseteq\omega\times\omega\times\Sigma^{\ast}\rightarrow\omega\\
f_{1} & :D_{f_{1}}\subseteq\omega\times\Sigma^{\ast}\rightarrow\omega\\
f_{2} & :D_{f_{2}}\subseteq\omega\times\Sigma^{\ast}\rightarrow\omega\\
f_{3} & :D_{f_{3}}\subseteq\omega\times\Sigma^{\ast}\rightarrow\Sigma^{\ast}
\end{align*}

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Es verdad que 
\begin_inset Formula $D_{f\circ[f_{1},f_{2},f_{3}]}=D_{f_{1}}\cap D_{f_{2}}\cap D_{f_{3}}$
\end_inset

?
\end_layout

\begin_layout Enumerate
De una descripcion del dominio de 
\begin_inset Formula $f\circ[f_{1},f_{2},f_{3}]$
\end_inset

.
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f,f_{1},f_{2},f_{3}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables,
 entonces 
\begin_inset Formula $f\circ[f_{1},f_{2},f_{3}]$
\end_inset

 lo es.
 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 8:
\end_layout

\end_inset

V o F o I.
 Justifique
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es un procedimiento efectivo que computa una funcion no vacia 
\begin_inset Formula $f:D_{f}\subseteq\omega\rightarrow\omega$
\end_inset

 entonces el conjunto de datos de salida de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es 
\begin_inset Formula $\omega$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $\mathbb{P}$
\end_inset

 y 
\begin_inset Formula $\mathbb{Q}$
\end_inset

 son procedimientos efectivos,
 entonces 
\begin_inset Formula $\mathbb{PQ}$
\end_inset

 lo es.
\end_layout

\begin_layout Enumerate
Denotemos con 
\begin_inset Formula $e$
\end_inset

 a la cantidad de veces que estornudó Alan Turing a lo largo de su vida.
 Sea 
\begin_inset Formula $f:\omega\rightarrow\omega$
\end_inset

,
 dada por 
\begin_inset Formula $f(x)=x^{e}$
\end_inset

.
 Entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\emptyset$
\end_inset

-efectivamente computable.
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables entonces 
\begin_inset Formula $f.g$
\end_inset

 lo es 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 8,3:
\end_layout

\end_inset

Si 
\begin_inset Formula $f:D_{f}\subseteq\omega\times\omega\times\{@,\uparrow\}^{\ast}\rightarrow\omega$
\end_inset

 es tal que 
\begin_inset Formula $D_{f}$
\end_inset

 es finito,
 entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\{@,\uparrow\}$
\end_inset

-efectivamente computable 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $X$
\end_inset

 un conjunto cualquiera y sea 
\begin_inset Formula $S\subseteq X$
\end_inset

.
 Usaremos 
\begin_inset Formula $\chi_{S}^{X}$
\end_inset

 para denotar la funcion
\begin_inset Formula 
\[
\begin{array}{rcl}
\chi_{S}^{X}:X & \rightarrow & \omega\\
x & \rightarrow & \left\{ \begin{array}{c}
1\text{ si }x\in S\\
0\text{ si }x\notin S
\end{array}\right.
\end{array}
\]

\end_inset

Llamaremos a 
\begin_inset Formula $\chi_{S}^{X}$
\end_inset

 la 
\shape italic
funcion caracteristica de 
\shape default

\begin_inset Formula $S$
\end_inset


\shape italic

\begin_inset space \space{}
\end_inset

con respecto a 
\shape default

\begin_inset Formula $X$
\end_inset

.
\end_layout

\begin_layout Standard
Un conjunto 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 sera llamado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-efectivamente computable
\shape default
 cuando la funcion 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Notese que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable sii hay un procedimiento efectivo 
\begin_inset Formula $\mathbb{P}$
\end_inset

,
 el cual computa 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

,
 es decir:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

El conjunto de datos de entrada de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

,
 siempre termina y da como dato de salida un elemento de 
\begin_inset Formula $\{0,1\}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Dado 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}$
\end_inset

,
 
\begin_inset Formula $\mathbb{P}$
\end_inset

 da como salida al numero 
\begin_inset Formula $1$
\end_inset

 si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in S$
\end_inset

 y al numero 
\begin_inset Formula $0$
\end_inset

 si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\notin S$
\end_inset

.
 
\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es un procedimiento efectivo el cual computa a 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

,
 diremos que 
\begin_inset Formula $\mathbb{P}$
\end_inset

 
\shape italic
decide la pertenecia a 
\shape default

\begin_inset Formula $S$
\end_inset

,
 con respecto al conjunto 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Observacion:

\series default
 Notese que la definicion de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 para el caso 
\begin_inset Formula $S=\emptyset$
\end_inset

,
 tiene a priori cierta ambiguedad ya que cualesquiera sean 
\begin_inset Formula $n,m\in\omega$
\end_inset

 tenemos que 
\begin_inset Formula $\emptyset\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 De todas maneras,
 cualesquiera sean los 
\begin_inset Formula $n,m$
\end_inset

 elejidos,
 siempre hay un procedimiento efectivo que computa a 
\begin_inset Formula $\chi_{\emptyset}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

,
 i.e.
 un procedimiento que siempre da como salida 
\begin_inset Formula $0$
\end_inset

,
 cualesquiera sea el dato de entrada de 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Es decir que el conjunto 
\begin_inset Formula $\emptyset$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable cualesquiera sea el alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Cabe destacar que para el caso de un conjunto 
\begin_inset Formula $S\neq\emptyset$
\end_inset

,
 nuestra definicion es inambigua ya que hay unicos 
\begin_inset Formula $n,m\in\omega$
\end_inset

 tales que 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 9:
\end_layout

\end_inset


\begin_inset Formula $\omega^{3}\times\Sigma^{\ast2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 9,3:
\end_layout

\end_inset

Si 
\begin_inset Formula $S\subseteq\omega^{2}\times\{@,\uparrow\}^{\ast3}$
\end_inset

 es finito,
 entonces es 
\begin_inset Formula $\{@,\uparrow\}$
\end_inset

-efectivamente computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 10:
\end_layout

\end_inset


\begin_inset Formula $\{(x,\alpha)\in\omega\times\Sigma^{\ast}:\left\vert \alpha\right\vert ^{x}$
\end_inset

 es par
\begin_inset Formula $\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 11:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\blacktriangle,\%\}$
\end_inset

 y sea
\begin_inset Formula 
\[
S=\{(0,1,\varepsilon),(55,54,\blacktriangle\%\blacktriangle\%\blacktriangle),(1,1,\blacktriangle\blacktriangle)\}
\]

\end_inset

Pruebe que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 12:
\end_layout

\end_inset

Sean 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables.
 Entonces 
\begin_inset Formula $S_{1}\cup S_{2},S_{1}\cap S_{2}$
\end_inset

 y 
\begin_inset Formula $(\omega^{n}\times\Sigma^{\ast m})-S_{1}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 13:
\end_layout

\end_inset

(S) Sean 
\begin_inset Formula $S\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L\subseteq\{@,\uparrow\}^{\ast}$
\end_inset

 tales que 
\begin_inset Formula $(0,\varepsilon)\in S\times L$
\end_inset

.
 Entonces 
\begin_inset Formula $S$
\end_inset

 y 
\begin_inset Formula $L$
\end_inset

 son ambos 
\begin_inset Formula $\{@,\uparrow\}$
\end_inset

-efectivamente computables sii 
\begin_inset Formula $S\times L$
\end_inset

 es 
\begin_inset Formula $\{@,\uparrow\}$
\end_inset

-efectivamente computable 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerables
\end_layout

\begin_layout Standard
Supongamos que 
\begin_inset Formula $k,l,n,m\in\omega$
\end_inset

 y que 
\begin_inset Formula $F:D_{F}\subseteq\omega^{k}\times\Sigma^{\ast l}\rightarrow\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Supongamos ademas que 
\begin_inset Formula $n+m\geq1$
\end_inset

.
 Entonces denotaremos con 
\begin_inset Formula $F_{(i)}$
\end_inset

 a la funcion 
\begin_inset Formula $p_{i}^{n,m}\circ F$
\end_inset

.
 Notar que
\begin_inset Formula 
\begin{align*}
F_{(i)} & :D_{F}\subseteq\omega^{k}\times\Sigma^{\ast l}\rightarrow\omega\text{, para cada }i=1,...,n\\
F_{(i)} & :D_{F}\subseteq\omega^{k}\times\Sigma^{\ast l}\rightarrow\Sigma^{\ast}\text{, para cada }i=n+1,...,n+m
\end{align*}

\end_inset

Por lo cual cada una de las funciones 
\begin_inset Formula $F_{(i)}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 14:
\end_layout

\end_inset

Sea 
\begin_inset Formula $F:\{(x,\alpha)\in\omega\times\Sigma^{\ast}:\left\vert \alpha\right\vert ^{x}$
\end_inset

 es par
\begin_inset Formula $\}\subseteq\omega\times\Sigma^{\ast}\rightarrow\omega^{2}\times\Sigma^{\ast}$
\end_inset

 dada por 
\begin_inset Formula $F(x,\alpha)=(x,x^{2}+\left\vert \alpha\right\vert ,\varepsilon)$
\end_inset

.
 Diga quienes son 
\begin_inset Formula $F_{(1)}$
\end_inset

,
\begin_inset Formula $F_{(2)}$
\end_inset

 y 
\begin_inset Formula $F_{(3)}$
\end_inset

.
 Que funcion es 
\begin_inset Formula $[F_{(1)},F_{(2)},F_{(3)}]$
\end_inset

?
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 15:
\end_layout

\end_inset

En la definicion anterior,
 para el caso 
\begin_inset Formula $n+m=1$
\end_inset

,
 quien es 
\begin_inset Formula $F_{(1)}$
\end_inset

?
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 16:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $F=[F_{(1)},...,F_{(n+m)}]$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Un conjunto 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 sera llamado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-efectivamente enumerable
\shape default
 cuando sea vacio o haya una funcion 
\begin_inset Formula $F:\omega\rightarrow\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 tal que 
\begin_inset Formula $I_{F}=S$
\end_inset

 y 
\begin_inset Formula $F_{(i)}$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 para cada 
\begin_inset Formula $i\in\{1,...,n+m\}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Observacion:

\series default
 Notese que para el caso 
\begin_inset Formula $n=m=0$
\end_inset

,
 la condicion anterior de que 
\begin_inset Formula $F_{(i)}$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 para cada 
\begin_inset Formula $i\in\{1,...,n+m\}$
\end_inset

 se cumple vacuamente y por lo tanto la definicion anterior nos dice que un conjunto 
\begin_inset Formula $S\subseteq\omega^{0}\times\Sigma^{\ast0}=\{\Diamond\}$
\end_inset

 sera 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable sii es vacio o hay una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable 
\begin_inset Formula $F:\omega\rightarrow\{\Diamond\}$
\end_inset

,
 tal que 
\begin_inset Formula $I_{F}=S$
\end_inset

.
 Por supuesto,
 esto nos dice que 
\begin_inset Formula $\emptyset$
\end_inset

 y 
\begin_inset Formula $\{\Diamond\}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerables.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Para entender mejor la idea de esta definicion consideremos el siguiente resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Un conjunto no vacio 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable sii hay un procedimiento efectivo 
\begin_inset Formula $\mathbb{P}$
\end_inset

 tal que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

El conjunto de datos de entrada de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es 
\begin_inset Formula $\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $\mathbb{P}$
\end_inset

 se detiene para cada 
\begin_inset Formula $x\in\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset

El conjunto de datos de salida de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es igual a 
\begin_inset Formula $S$
\end_inset

.
 (Es decir,
 siempre que 
\begin_inset Formula $\mathbb{P}$
\end_inset

 se detiene,
 da como salida un elemento de 
\begin_inset Formula $S$
\end_inset

,
 y para cada elemento 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in S$
\end_inset

,
 hay un 
\begin_inset Formula $x\in\omega$
\end_inset

 tal que 
\begin_inset Formula $\mathbb{P}$
\end_inset

 da como salida a 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

 cuando lo corremos con 
\begin_inset Formula $x$
\end_inset

 como dato de entrada) 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 17:
\end_layout

\end_inset

(S) Explique con palabras una justificacion del lema anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Cuando un procedimiento 
\begin_inset Formula $\mathbb{P}$
\end_inset

 cumpla (1),
 (2) y (3) del lema anterior,
 diremos que 
\begin_inset Formula $\mathbb{P}$
\end_inset

 
\shape italic
enumera
\shape default
 a 
\begin_inset Formula $S$
\end_inset

.
 O sea que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable sii es vacio o hay un procedimiento efectivo el cual enumera a 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Standard
Dicho de otra forma un conjunto no vacio 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable sii hay un procedimiento efectivo 
\begin_inset Formula $\mathbb{P}$
\end_inset

 el cual tiene conjunto de datos de entrada 
\begin_inset Formula $\omega$
\end_inset

 y ademas para los sucesivos datos de entrada 
\begin_inset Formula $0,1,2,3,...$
\end_inset

,
 el procedimiento 
\begin_inset Formula $\mathbb{P}$
\end_inset

 produce respectivamente los datos de salida 
\begin_inset Formula $e_{0},e_{1},e_{2},e_{3},...$
\end_inset

 de manera que 
\begin_inset Formula $S=\{e_{0},e_{1},e_{2},...\}$
\end_inset

.
 Cabe destacar aqui que puede suceder que 
\begin_inset Formula $e_{i}=e_{j}$
\end_inset

,
 para ciertos 
\begin_inset Formula $i,j$
\end_inset

,
 con 
\begin_inset Formula $i\neq j$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Nota Importante:

\series default
 en lo que sigue muchas veces daremos procedimientos que son efectivos en terminos de otros que ya se han dado,
 es decir daremos un procedimiento que en principio no es claro que sea efectivo pero el cual se volveria efectivo si reemplazamos ciertas instrucciones por la manera efectiva de simularlas.
 Para hacer mas dinamico el discurso no distinguiremos entre este tipo de procedimientos (efectivisables) y los efectivos propiamente dichos.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E
\begin_inset Formula $1$
\end_inset

)
\end_layout

\end_inset

Un procedimiento efectivo que enumera 
\begin_inset Formula $\omega\times\omega$
\end_inset

 es el siguiente:
\end_layout

\begin_deeper
\begin_layout Standard
Etapa 1
\end_layout

\begin_layout Standard
\noindent
Si 
\begin_inset Formula $x=0$
\end_inset

,
 dar como salida el par 
\begin_inset Formula $(0,0)$
\end_inset

 y terminar.
 Si 
\begin_inset Formula $x\neq0$
\end_inset

,
 calcular 
\begin_inset Formula $x_{1}=(x)_{1}$
\end_inset

 y 
\begin_inset Formula $x_{2}=(x)_{2}$
\end_inset

.
\end_layout

\begin_layout Standard
Etapa 2
\end_layout

\begin_layout Standard
\noindent
Dar como dato de salida el par 
\begin_inset Formula $(x_{1},x_{2})$
\end_inset

 y terminar
\end_layout

\begin_layout Standard
Como puede notarse el procedimiento es efectivo (efectivisable) y ademas el conjunto de datos de salida es 
\begin_inset Formula $\omega\times\omega$
\end_inset

 ya que si tomamos un par cualquiera 
\begin_inset Formula $(a,b)\in\omega\times\omega$
\end_inset

,
 el procedimiento lo dara como dato de salida para la entrada 
\begin_inset Formula $x=2^{a}3^{b}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E
\begin_inset Formula $2$
\end_inset

)
\end_layout

\end_inset

Veamos que 
\begin_inset Formula $\omega^{2}\times\Sigma^{\ast3}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable cualquiera sea el alfabeto no vacio 
\begin_inset Formula $\Sigma$
\end_inset

.
 Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total para el alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Utilisando el orden 
\begin_inset Formula $\leq$
\end_inset

 podemos diseñar el siguiente procedimiento para enumerar 
\begin_inset Formula $\omega^{2}\times\Sigma^{\ast3}$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Standard
Etapa 1
\end_layout

\begin_layout Standard
\noindent
Si 
\begin_inset Formula $x=0$
\end_inset

,
 dar como salida 
\begin_inset Formula $(0,0,\varepsilon,\varepsilon,\varepsilon)$
\end_inset

 y terminar.
 Si 
\begin_inset Formula $x\neq0$
\end_inset

,
 calcular
\end_layout

\begin_layout Standard
\begin_inset Formula $x_{1}=(x)_{1}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $x_{2}=(x)_{2}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\alpha_{1}=\ast^{\leq}((x)_{3})$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\alpha_{2}=\ast^{\leq}((x)_{4})$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\alpha_{3}=\ast^{\leq}((x)_{5})$
\end_inset


\end_layout

\begin_layout Standard
Etapa 2
\end_layout

\begin_layout Standard
\noindent
Dar como dato de salida la 5-upla 
\begin_inset Formula $(x_{1},x_{2},\alpha_{1},\alpha_{2},\alpha_{3})$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 18:
\end_layout

\end_inset

Explique por que es efectivo el procedimiento de (E
\begin_inset Formula $2$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 19:
\end_layout

\end_inset

Pruebe que el procedimiento de (E
\begin_inset Formula $2$
\end_inset

) tiene conjunto de datos de salida igual a 
\begin_inset Formula $\omega^{2}\times\Sigma^{\ast3}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 20:
\end_layout

\end_inset

Sea 
\begin_inset Formula $S=\{(x,\uparrow^{x}):x$
\end_inset

 es par
\begin_inset Formula $\}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\{@,\uparrow\}$
\end_inset

-efectivamente enumerable.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 21:
\end_layout

\end_inset

Sean 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerables.
 Entonces 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 22:
\end_layout

\end_inset

(S) Sean 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerables.
 Entonces 
\begin_inset Formula $S_{1}\cap S_{2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 (No es facil,
 en el apunte esta probado en forma de lema.)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 23:
\end_layout

\end_inset

(Explicado en video en granlogico.com) Si 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es un procedimiento efectivo cuyo conjunto de datos de entrada es 
\begin_inset Formula $\omega\times\Sigma^{\ast}$
\end_inset

 entonces el conjunto 
\begin_inset Formula $\{(x,\alpha)\in\omega\times\Sigma^{\ast}:\mathbb{P}$
\end_inset

 termina partiendo de 
\begin_inset Formula $(x,\alpha)\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 Saque como conclusion que el dominio de una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Si 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable entonces 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $S\neq\emptyset$
\end_inset

.
 Sea 
\begin_inset Formula $(\vec{z},\gamma)\in S$
\end_inset

,
 fijo.
 Sea 
\begin_inset Formula $\mathbb{P}$
\end_inset

 un procedimiento efectivo que compute a 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

.
 Ya vimos en el ejemplo anterior que 
\begin_inset Formula $\omega^{2}\times\Sigma^{\ast3}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 En forma similar se puede ver que 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 lo es.
 Sea 
\begin_inset Formula $\mathbb{P}_{1}$
\end_inset

 un procedimiento efectivo que enumere a 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Entonces el siguiente procedimiento enumera a 
\begin_inset Formula $S$
\end_inset

:
\end_layout

\begin_layout Standard
Etapa 1
\end_layout

\begin_layout Standard
\noindent
Realizar 
\begin_inset Formula $\mathbb{P}_{1}$
\end_inset

 con 
\begin_inset Formula $x$
\end_inset

 de entrada para obtener como salida un 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
\end_layout

\begin_layout Standard
Etapa 2
\end_layout

\begin_layout Standard
\noindent
Realizar 
\begin_inset Formula $\mathbb{P}$
\end_inset

 con 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

 de entrada para obtener el valor Booleano 
\begin_inset Formula $e$
\end_inset

 de salida.
\end_layout

\begin_layout Standard
Etapa 3
\end_layout

\begin_layout Standard
\noindent
Si 
\begin_inset Formula $e=1$
\end_inset

 dar como dato de salida 
\begin_inset Formula $(\vec{x},\vec{\alpha}).$
\end_inset

 Si 
\begin_inset Formula $e=0$
\end_inset

 dar como dato de salida 
\begin_inset Formula $(\vec{z},\gamma)$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Como veremos mas adelante en la Guia 9,
 hay conjuntos que son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerables y no 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables.
 Sin envargo tenemos el siguiente interesante resultado:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Son equivalentes
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 y 
\begin_inset Formula $(\omega^{n}\times\Sigma^{\ast m})-S$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerables 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a)
\begin_inset Formula $\Rightarrow$
\end_inset

(b).
 Por el lema anterior tenemos que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 Notese ademas que,
 dado que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 
\begin_inset Formula $(\omega^{n}\times\Sigma^{\ast m})-S$
\end_inset

 tambien lo es (por que?).
 Es decir que aplicando nuevamente el lema anterior tenemos que 
\begin_inset Formula $(\omega^{n}\times\Sigma^{\ast m})-S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
\end_layout

\begin_layout Standard
(b)
\begin_inset Formula $\Rightarrow$
\end_inset

(a).
 Si 
\begin_inset Formula $S=\emptyset$
\end_inset

 o 
\begin_inset Formula $S=\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es claro que se cumple (a).
 O sea que podemos suponer que ni 
\begin_inset Formula $S$
\end_inset

 ni 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son igual al conjunto vacio.
 Sea 
\begin_inset Formula $\mathbb{P}_{1}$
\end_inset

 un procedimiento efectivo que enumere a 
\begin_inset Formula $S$
\end_inset

 y sea 
\begin_inset Formula $\mathbb{P}_{2}$
\end_inset

 un procedimiento efectivo que enumere a 
\begin_inset Formula $(\omega^{n}\times\Sigma^{\ast m})-S$
\end_inset

.
 Es facil ver que el siguiente procedimiento computa el predicado 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

:
\end_layout

\begin_layout Standard
Etapa 1
\end_layout

\begin_layout Standard
\noindent
Darle a la variable 
\begin_inset Formula $T$
\end_inset

 el valor 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\begin_layout Standard
Etapa 2
\end_layout

\begin_layout Standard
\noindent
Realizar 
\begin_inset Formula $\mathbb{P}_{1}$
\end_inset

 con el valor de 
\begin_inset Formula $T$
\end_inset

 como entrada para obtener de salida la upla 
\begin_inset Formula $(\vec{y},\vec{\beta})$
\end_inset

.
\end_layout

\begin_layout Standard
Etapa 3
\end_layout

\begin_layout Standard
\noindent
Realizar 
\begin_inset Formula $\mathbb{P}_{2}$
\end_inset

 con el valor de 
\begin_inset Formula $T$
\end_inset

 como entrada para obtener de salida la upla 
\begin_inset Formula $(\vec{z},\vec{\gamma})$
\end_inset

.
\end_layout

\begin_layout Standard
Etapa 4
\end_layout

\begin_layout Standard
\noindent
Si 
\begin_inset Formula $(\vec{y},\vec{\beta})=(\vec{x},\vec{\alpha})$
\end_inset

,
 entonces detenerse y dar como dato de salida el valor 
\begin_inset Formula $1$
\end_inset

.
 Si 
\begin_inset Formula $(\vec{z},\vec{\gamma})=(\vec{x},\vec{\alpha})$
\end_inset

,
 entonces detenerse y dar como dato de salida el valor 
\begin_inset Formula $0.$
\end_inset

 Si no suceden ninguna de las dos posibilidades antes mensionadas,
 aumentar en 
\begin_inset Formula $1$
\end_inset

 el valor de la variable 
\begin_inset Formula $T$
\end_inset

 y dirijirse a la Etapa 2.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 24:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!,\%\}$
\end_inset

.
 Supongamos 
\begin_inset Formula $f:S\subseteq\omega\times\Sigma^{\ast}\rightarrow\Sigma^{\ast}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Suponga ademas que 
\begin_inset Formula $(1,@@)\in S$
\end_inset

 y 
\begin_inset Formula $f(1,@@)=@!!$
\end_inset

.
 Pruebe que el conjunto
\begin_inset Formula 
\[
\{(x,\alpha)\in S:f(x,\alpha)=@!!\}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 25:
\end_layout

\end_inset

Sea 
\begin_inset Formula $S=\{(x,\alpha)\in\omega\times\{@,\uparrow\}^{\ast}:\alpha$
\end_inset

 tiene exactamente 
\begin_inset Formula $x$
\end_inset

 ocurrencias de 
\begin_inset Formula $@\}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\{@,\uparrow\}$
\end_inset

-efectivamente enumerable.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 26:
\end_layout

\end_inset

(Explicado en video en granlogico.com) Si 
\begin_inset Formula $S\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $f:S\rightarrow\omega$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 entonces el conjunto
\begin_inset Formula 
\[
\{x\in S:x\text{ es par }x/2\in S\text{ y }f(x)=f(x/2)\}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 27:
\end_layout

\end_inset

Sean 
\begin_inset Formula $S\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L\subseteq\{@,\uparrow\}^{\ast}$
\end_inset

 tales que 
\begin_inset Formula $(0,\varepsilon)\in S\times L$
\end_inset

.
 Entonces 
\begin_inset Formula $S\times L$
\end_inset

 es 
\begin_inset Formula $\{@,\uparrow\}$
\end_inset

-efectivamente enumerable si y solo si ambos 
\begin_inset Formula $S$
\end_inset

 y 
\begin_inset Formula $L$
\end_inset

 son 
\begin_inset Formula $\{@,\uparrow\}$
\end_inset

-efectivamente enumerables
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
Ejercicio 27,5:
\end_layout

\end_inset

Sea 
\begin_inset Formula $f:S\subseteq\Sigma^{\ast}\rightarrow\Sigma^{\ast}$
\end_inset

 una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Supongamos que 
\begin_inset Formula $\varepsilon\in S$
\end_inset

 y que 
\begin_inset Formula $f(\varepsilon)=\varepsilon$
\end_inset

.
 Sea 
\begin_inset Formula 
\[
L=\{\alpha\in S:f(\alpha)\in S\text{ y }f(f(\alpha))=\alpha\}
\]

\end_inset

Notar que 
\begin_inset Formula $\varepsilon\in L$
\end_inset

.
 Pruebe que 
\begin_inset Formula $L$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 28:
\end_layout

\end_inset

V o F o I.
 Justifique
\end_layout

\begin_deeper
\begin_layout Enumerate
Denotemos con 
\begin_inset Formula $e$
\end_inset

 a la cantidad de veces que estornudó Alan Turing a lo largo de su vida.
 Sea 
\begin_inset Formula $S=\{e\}$
\end_inset

.
 Entonces 
\begin_inset Formula $S$
\end_inset

 es un conjunto 
\begin_inset Formula $\emptyset$
\end_inset

-efectivamente computable
\end_layout

\begin_layout Enumerate
\begin_inset Formula $(2,4,6,8,10,...)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es un procedimiento efectivo,
 entonces 
\begin_inset Formula $I_{\mathbb{P}}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $S\subseteq\omega$
\end_inset

 y supongamos 
\begin_inset Formula $\mathbb{P}$
\end_inset

 es un procedimiento efectivo el cual enumera a 
\begin_inset Formula $S$
\end_inset

.
 Entonces el siguiente procedimiento (con dato de entrada 
\begin_inset Formula $x\in\omega$
\end_inset

) enumera a 
\begin_inset Formula $\{u\in S:u$
\end_inset

 es par
\begin_inset Formula $\}$
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
Etapa 1:
 Guardar en la variable 
\begin_inset Formula $X$
\end_inset

 el valor 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\begin_layout Enumerate
Etapa 2:
 Correr 
\begin_inset Formula $\mathbb{P}$
\end_inset

 con dato de entrada 
\begin_inset Formula $X$
\end_inset

 y guardar en la variable 
\begin_inset Formula $E$
\end_inset

 el dato de salida dado por 
\begin_inset Formula $\mathbb{P}$
\end_inset


\end_layout

\begin_layout Enumerate
Etapa 3:
 Si 
\begin_inset Formula $E$
\end_inset

 es par,
 dar como salida 
\begin_inset Formula $E$
\end_inset

 y detenerse.
 Caso contrario aumentar en 1 el valor de 
\begin_inset Formula $X$
\end_inset

 e ir a Etapa 2 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Guia 4
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Section*
Tres paradigmas matematicos de la computabilidad efectiva
\end_layout

\begin_layout Standard
Ya que el concepto de procedimiento efectivo es un concepto intuitivo,
 impresiso y a priori no expresado en el formalismo matematico,
 los conceptos de
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable 
\end_layout

\begin_layout Standard
\noindent
tambien son impresisos y estan fuera del formalismo matematico,
 debido a que los tres se definen en terminos de la existencia de procedimientos efectivos.
 Por supuesto,
 los tres conceptos son fundamentales en el estudio teorico de la computabilidad por lo que es muy importante poder dar un modelo o formalizacion matematica de estos conceptos.
 Pero notese que los dos ultimos se definen en funcion del primero por lo que una formalizacion matematica precisa del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 resuelve el problema de modelizar en forma matematica a estos tres conceptos.
\end_layout

\begin_layout Standard
En esta materia daremos las tres formalizaciones matematicas mas clasicas del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 La primera y la mas apegada a la idea intuitiva de procedimiento efectivo es la dada por Alan Turing via la matematizacion del concepto de maquina y es tema central de esta guia.
 La segunda,
 es la dada por Godel en su estudio de sistemas formales de la logica de primer orden.
 Por ultimo veremos una formalizacion via un lenguaje de programacion imperativo.
 En honor a la influencia que tuvo Von Neumann en el diseño de la primer computadora de caracter universal (i.e.
 programable de proposito general),
 llamaremos a este paradigma el paradigma imperativo de Von Neumann.
\end_layout

\begin_layout Section*
El paradigma de Turing
\end_layout

\begin_layout Standard
Estudiaremos el concepto de maquina de Turing,
 el cual fue introducido por Alam Turing para formalizar o modelizar matematicamente la idea de procedimiento efectivo.
 Una vez definidas las maquinas podremos dar una modelizacion matematica precisa del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Llamaremos a estas funciones 
\begin_inset Formula $\Sigma$
\end_inset

-Turing computables y seran aquellas que (en algun sentido que sera bien precisado matematicamente) pueden ser computadas por una maquina de Turing.
 Por supuesto,
 la fidedignidad de este concepto,
 es decir cuan buena es la modelizacion matematica dada por Turing,
 puede no ser clara al comienzo pero a medida que vayamos avanzando en nuestro estudio y conozcamos ademas los otros paradigmas y su relacion,
 quedara claro que el modelo de Turing es acertado.
\end_layout

\begin_layout Standard
Vivimos en un mundo plagado de maquinas (ascensores,
 celulares,
 relojes,
 taladros,
 etc).
 Una caracteristica comun a todas las maquinas es que tienen distintos estados posibles.
 Un estado es el conjunto de caracteristicas que determinan un momento concreto posible de la maquina cuando esta funcionando.
 Por ejemplo un estado posible de un ascensor seria:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

esta en el tercer piso,
 con la primer puerta abierta y la otra cerrada,
 esta apretado el boton de ir al sexto piso,
 etc 
\end_layout

\begin_layout Standard
\noindent
donde ponemos etc porque dependiendo del tipo de ascensor (si es con memoria,
 a que pisos puede ir,
 etc) habra mas datos que especificar para determinar un estado concreto.
\end_layout

\begin_layout Standard
Otra caracteristica comun de las maquinas es que interactuan de distintas formas con el usuario o mas generalmente su entorno.
 Dependiendo de que accion se ejecute sobre la maquina y en que estado este,
 la maquina realizara alguna tarea y ademas cambiara de estado.
 En general las maquinas son 
\shape italic
deterministicas
\shape default
 en el sentido que siempre que esten en determinado estado y se les aplique determinada accion,
 realizaran la misma tarea y pasaran al mismo estado.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Descripcion informal de las maquinas de Turing
\end_layout

\begin_layout Standard
Son un modelo abstracto de maquina con una cantidad finita de estados la cual trabaja sobre una cinta de papel dividida en cuadros e interactua o recibe acciones externas por medio de una cabeza lectora la cual lee de a un cuadro de la cinta a la ves y ademas puede borrar el contenido del cuadro leido y escribir en el un simbolo.
 Tambien la cabeza lectora puede moverse un cuadro hacia la izquierda o hacia la derecha.
 La cinta tiene un primer cuadro hacia su izquierda pero hacia la derecha puede extenderse todo lo necesario.
 En un cuadro de la cinta podra haber un simbolo o un cuadro puede simplemente estar en blanco.
 Es decir que habra un alfabeto 
\begin_inset Formula $\Gamma$
\end_inset

 el cual consiste de todos los simbolos que pueden figurar en la cinta.
 Esto sera parte de los datos o caracteristicas de cada maquina,
 es decir,
 
\begin_inset Formula $\Gamma$
\end_inset

 puede cambiar dependiendo de la maquina.
 La maquina,
 en funcion del estado en que se encuentre y de lo que vea su cabeza lectora en el cuadro escaneado,
 podra modificar lo que encuentre en dicho cuadro (borrando y escribiendo algun nuevo simbolo),
 moverse a lo sumo un cuadro (izquierda,
 derecha o quedarse quieta),
 y cambiar de estado (posiblemente al mismo que tenia).
 Para simplificar supondremos que hay en 
\begin_inset Formula $\Gamma$
\end_inset

 un simbolo el cual si aparece en un cuadro de la cinta,
 significara que dicho cuadro esta sin escribir o en blanco.
 Esto nos permitira describir mas facilmente el funcionamiento de la maquina.
 En gral llamaremos 
\begin_inset Formula $B$
\end_inset

 a tal simbolo.
 Tambien por lo general llamaremos 
\begin_inset Formula $Q$
\end_inset

 al conjunto de estados de la maquina.
\end_layout

\begin_layout Standard
Tambien cada maquina tendra un estado especial el cual sera llamado su estado inicial,
 generalmente denotado con 
\begin_inset Formula $q_{0}$
\end_inset

,
 el cual sera el estado en el que estara la maquina al comenzar a trabajar sobre la cinta.
 Hay otras caracteristicas que tendran las maquinas de Turing pero para dar un primer ejemplo ya nos basta.
 Describiremos una maquina de Turing 
\begin_inset Formula $M$
\end_inset

 que tendra 
\begin_inset Formula $\Gamma=\{@,a,b,B\}$
\end_inset

 y tendra dos estados,
 es decir 
\begin_inset Formula $Q=\{q_{0},q_{1}\}$
\end_inset

.
 Obviamente 
\begin_inset Formula $q_{0}$
\end_inset

 sera su estado inicial y ademas el 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

comportamiento o personalidad
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 de 
\begin_inset Formula $M$
\end_inset

 estara dado por las siguientes clausulas:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Estando en estado 
\begin_inset Formula $q_{0}$
\end_inset

 si ve ya sea 
\begin_inset Formula $b$
\end_inset

 o 
\begin_inset Formula $B$
\end_inset

 o 
\begin_inset Formula $@$
\end_inset

,
 entonces se queda en estado 
\begin_inset Formula $q_{0}$
\end_inset

 y se mueve a la derecha
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Estando en estado 
\begin_inset Formula $q_{0}$
\end_inset

 si ve 
\begin_inset Formula $a$
\end_inset

 entonces reescribe 
\begin_inset Formula $@$
\end_inset

,
 se mueve a la izquierda y cambia al estado 
\begin_inset Formula $q_{1}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Estando en estado 
\begin_inset Formula $q_{1}$
\end_inset

 si ve 
\begin_inset Formula $a$
\end_inset

 o 
\begin_inset Formula $b$
\end_inset

 o 
\begin_inset Formula $B$
\end_inset

 o 
\begin_inset Formula $@$
\end_inset

 entonces lo deja como esta,
 se mueve a la izquierda y queda en estado 
\begin_inset Formula $q_{1}$
\end_inset

 
\end_layout

\begin_layout Standard
Supongamos ahora que tomamos una palabra 
\begin_inset Formula $\alpha\in\Gamma^{\ast}$
\end_inset

 y la distribuimos en la cinta dejando el primer cuadro en blanco y luego poniendo los simbolos de 
\begin_inset Formula $\alpha$
\end_inset

 en los siguientes cuadros.
 Supongamos ademas que ponemos la maquina en estado 
\begin_inset Formula $q_{0}$
\end_inset

 y con su cabeza lectora escaneando el primer cuadro de la cinta.
 Esto lo podemos representar graficamente de la siguiente manera
\begin_inset Formula 
\[
\begin{array}{cccccccc}
B & \alpha_{1} & ... & \alpha_{n} & B & B & B & ...\\
\uparrow\\
q_{0}
\end{array}
\]

\end_inset

donde 
\begin_inset Formula $\alpha_{1},...,\alpha_{n}$
\end_inset

 son los sucesivos simbolos de 
\begin_inset Formula $\alpha$
\end_inset

.
 Supongamos ademas que 
\begin_inset Formula $a$
\end_inset

 ocurre an 
\begin_inset Formula $\alpha$
\end_inset

.
 Dejamos al lector ir aplicando las clausulas de 
\begin_inset Formula $M$
\end_inset

 para convencerse que luego de un rato de funcionar 
\begin_inset Formula $M$
\end_inset

,
 la situacion sera
\begin_inset Formula 
\[
\begin{array}{cccccccc}
B & \beta_{1} & ... & \beta_{n} & B & B & B & ...\\
\uparrow\\
q_{1}
\end{array}
\]

\end_inset

donde 
\begin_inset Formula $\beta_{1}...\beta_{n}$
\end_inset

 es el resultado de reemplazar en 
\begin_inset Formula $\alpha$
\end_inset

 la primer ocurrencia de 
\begin_inset Formula $a$
\end_inset

 por 
\begin_inset Formula $@$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1:
\end_layout

\end_inset

Que sucede cuando 
\begin_inset Formula $a$
\end_inset

 no ocurre en 
\begin_inset Formula $\alpha$
\end_inset

?
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Una cosa que puede pasar es que para un determinado estado 
\begin_inset Formula $p$
\end_inset

 y un 
\begin_inset Formula $\sigma\in\Gamma$
\end_inset

,
 la maquina no tenga contemplada ninguna accion posible.
 Por ejemplo sea 
\begin_inset Formula $M$
\end_inset

 la maquina de Turing dada por 
\begin_inset Formula $Q=\{q_{0}\}$
\end_inset

,
 
\begin_inset Formula $\Gamma=\{@,\$,B\}$
\end_inset

 y por la siguiente clausula:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Estando en estado 
\begin_inset Formula $q_{0}$
\end_inset

 si ve ya sea 
\begin_inset Formula $@$
\end_inset

 o 
\begin_inset Formula $B$
\end_inset

,
 entonces se queda en estado 
\begin_inset Formula $q_{0}$
\end_inset

 y se mueve a la derecha 
\end_layout

\begin_layout Standard
Es facil ver que si partimos de una situacion
\begin_inset Formula 
\[
\begin{array}{cccccccc}
B & \alpha_{1} & ... & \alpha_{n} & B & B & B & ...\\
\uparrow\\
q_{0}
\end{array}
\]

\end_inset

donde 
\begin_inset Formula $\alpha_{1},...,\alpha_{n}\in\Gamma$
\end_inset

,
 entonces si ningun 
\begin_inset Formula $\alpha_{i}$
\end_inset

 es igual a 
\begin_inset Formula $\$$
\end_inset

,
 la maquina se movera indefinidamente hacia la derecha y en caso contrario se movera 
\begin_inset Formula $i$
\end_inset

 pasos a la derecha y se detendra,
 donde 
\begin_inset Formula $i$
\end_inset

 es el menor 
\begin_inset Formula $l$
\end_inset

 tal que 
\begin_inset Formula $\alpha_{l}=\$$
\end_inset

.
\end_layout

\begin_layout Standard
Otro caso posible de detencion de una maquina de Turing es cuando esta escaneando el primer cuadro de la cinta y su unica accion posible implica moverse un cuadro a la izquierda.
 Tambien en estos casos diremos que la maquina se detiene ya que la cinta no es extensible hacia la izquierda.
\end_layout

\begin_layout Standard
Otra caracteristica de las maquinas de Turing es que poseen un 
\shape italic
alfabeto de entrada
\shape default
 el cual esta contenido en el alfabeto 
\begin_inset Formula $\Gamma$
\end_inset

 y en el cual estan los simbolos que se usaran para formar la configuracion inicial de la cinta (exepto 
\begin_inset Formula $B$
\end_inset

).
 En general lo denotaremos con 
\begin_inset Formula $\Sigma$
\end_inset

 al alfabeto de entrada y los simbolos de 
\begin_inset Formula $\Gamma-\Sigma$
\end_inset

 son considerados auxiliares.
 Tambien habra un conjunto 
\begin_inset Formula $F$
\end_inset

 contenido en el conjunto 
\begin_inset Formula $Q$
\end_inset

 de los estados de la maquina,
 cuyos elementos seran llamados 
\shape italic
estados finales
\shape default
.
\end_layout

\begin_layout Standard
Diremos que una palabra 
\begin_inset Formula $\alpha=\alpha_{1}...\alpha_{n}\in\Sigma^{\ast}$
\end_inset

 es 
\shape italic
aceptada por 
\shape default

\begin_inset Formula $M$
\end_inset

 
\shape italic
por alcance de estado final
\shape default
 si partiendo de
\begin_inset Formula 
\[
\begin{array}{cccccccc}
B & \alpha_{1} & ... & \alpha_{n} & B & B & B & ...\\
\uparrow\\
q_{0}
\end{array}
\]

\end_inset

en algun momento de la computacion 
\begin_inset Formula $M$
\end_inset

 esta en un estado de 
\begin_inset Formula $F$
\end_inset

.
 Llamaremos 
\begin_inset Formula $L(M)$
\end_inset

 al conjunto formado por todas las palabras que son aceptadas por alcance de estado final
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

Para cada uno de los siguientes lenguajes,
 encuentre una máquina de Turing 
\begin_inset Formula $M$
\end_inset

 tal que 
\begin_inset Formula $L(M)$
\end_inset

 sea dicho lenguaje
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\{\alpha\in\{a,b\}^{\ast}:a$
\end_inset

 ocurre en 
\begin_inset Formula $\alpha\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{ab\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{a^{n}b^{n}:n\geq2\}$
\end_inset

 (explicada en video en granlogico.com)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{\alpha\in\{a,b\}^{\ast}:\left\vert \alpha\right\vert _{a}$
\end_inset

 es par y 
\begin_inset Formula $\left\vert \alpha\right\vert _{b}$
\end_inset

 es impar
\begin_inset Formula $\}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Diremos que una palabra 
\begin_inset Formula $\alpha=\alpha_{1}...\alpha_{n}\in\Sigma^{\ast}$
\end_inset

 es 
\shape italic
aceptada por 
\shape default

\begin_inset Formula $M$
\end_inset

 
\shape italic
por detencion
\shape default
 si partiendo de
\begin_inset Formula 
\[
\begin{array}{cccccccc}
B & \alpha_{1} & ... & \alpha_{n} & B & B & B & ...\\
\uparrow\\
q_{0}
\end{array}
\]

\end_inset

en algun momento 
\begin_inset Formula $M$
\end_inset

 se detiene.
 Llamaremos 
\begin_inset Formula $H(M)$
\end_inset

 al conjunto formado por todas las palabras que son aceptadas por detencion
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

Para cada uno de los lenguajes del ejercicio anterior encuentre una máquina de Turing 
\begin_inset Formula $M$
\end_inset

 tal que 
\begin_inset Formula $H(M)$
\end_inset

 sea dicho lenguaje (hint:
 modifique adecuadamente cada una de las maquinas construidas para el ejercicio anterior) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Definicion matematica de maquina de Turing
\end_layout

\begin_layout Standard
Una 
\shape italic
maquina de Turing 
\shape default
es una 7-upla 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,F\right)$
\end_inset

 donde
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $Q$
\end_inset

 es un conjunto finito cuyos elementos son llamados 
\shape italic
estados
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\Gamma$
\end_inset

 es un alfabeto que contiene a 
\begin_inset Formula $\Sigma$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\Sigma$
\end_inset

 es un alfabeto llamado el 
\shape italic
alfabeto de entrada
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $B\in\Gamma-\Sigma$
\end_inset

 es un simbolo de 
\begin_inset Formula $\Gamma$
\end_inset

 llamado el 
\shape italic
blank symbol
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\delta:D_{\delta}\subseteq Q\times\Gamma\rightarrow Q\times\Gamma\times\{L,R,K\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $q_{0}$
\end_inset

 es un estado llamado el 
\shape italic
estado inicial
\shape default
 de 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $F\subseteq Q$
\end_inset

 es un conjunto de estados llamados 
\shape italic
finales
\shape default
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notese que la funcion 
\begin_inset Formula $\delta$
\end_inset

 da la 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

personalidad
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 de la maquina.
 Aqui los simbolos 
\begin_inset Formula $L,R,K$
\end_inset

 serviran para especificar que hace el cabezal.
 O sea:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\delta(p,\sigma)=(q,\gamma,L)$
\end_inset

 significara que la maquina estando en estado 
\begin_inset Formula $p$
\end_inset

 y leyendo el simbolo 
\begin_inset Formula $\sigma$
\end_inset

 borrara 
\begin_inset Formula $\sigma$
\end_inset

 y escribira 
\begin_inset Formula $\gamma$
\end_inset

 en su lugar y luego se movera un cuadro a la izquierda (esto en caso que el cabezal no este en el cuadro de mas a la izquierda,
 en cuyo caso no podra realizar dicha tarea y se detendra).
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\delta(p,\sigma)=(q,\gamma,K)$
\end_inset

 significara que la maquina estando en estado 
\begin_inset Formula $p$
\end_inset

 y leyendo el simbolo 
\begin_inset Formula $\sigma$
\end_inset

 borrara 
\begin_inset Formula $\sigma$
\end_inset

 y escribira 
\begin_inset Formula $\gamma$
\end_inset

 en su lugar y luego el cabezal se quedara kieto
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\delta(p,\sigma)=(q,\gamma,R)$
\end_inset

 significara que la maquina estando en estado 
\begin_inset Formula $p$
\end_inset

 y leyendo el simbolo 
\begin_inset Formula $\sigma$
\end_inset

 borrara 
\begin_inset Formula $\sigma$
\end_inset

 y escribira 
\begin_inset Formula $\gamma$
\end_inset

 en su lugar y luego el cabezal se movera un cuadro a la derecha 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Si bien en nuestra definicion de maquina de Turing no hay ninguna restriccion acerca de la naturaleza de los elementos de 
\begin_inset Formula $Q$
\end_inset

,
 para continuar nuestro analisis asumiremos en lo que sigue de esta guia que 
\begin_inset Formula $Q$
\end_inset

 es un alfabeto disjunto con 
\begin_inset Formula $\Gamma$
\end_inset

.
 Esto nos permitira dar definiciones matematicas precisas que formalizaran el funcionamiento de las maquinas de Turing en el contexto de las funciones mixtas.
 Deberia quedar claro que el hecho que solo analicemos maquinas en las cuales 
\begin_inset Formula $Q$
\end_inset

 es un alfabeto disjunto con 
\begin_inset Formula $\Gamma$
\end_inset

,
 no afectara la profundidad y generalidad de nuestros resultados.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,F\right)$
\end_inset

 es una maquina de Turing,
 entonces 
\begin_inset Formula $\delta$
\end_inset

 es una funcion 
\begin_inset Formula $(Q\cup\Gamma\cup\{L,K,R\})$
\end_inset

-mixta
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,F\right)$
\end_inset

 es una maquina de Turing,
 entonces 
\begin_inset Formula $D_{\delta}$
\end_inset

 es un conjunto 
\begin_inset Formula $(Q\cup\Gamma)$
\end_inset

-mixto 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph
Descripciones instantaneas
\end_layout

\begin_layout Standard
Una 
\shape italic
descripcion instantanea
\shape default
 sera una palabra de la forma 
\begin_inset Formula $\alpha q\beta$
\end_inset

,
 donde 
\begin_inset Formula $\alpha,\beta\in\Gamma^{\ast}$
\end_inset

,
 
\begin_inset Formula $\left[\beta\right]_{\left\vert \beta\right\vert }\neq B$
\end_inset

 y 
\begin_inset Formula $q\in Q$
\end_inset

.
 Notese que la condicion 
\begin_inset Formula $\left[\beta\right]_{\left\vert \beta\right\vert }\neq B$
\end_inset

 nos dice que 
\begin_inset Formula $\beta=\varepsilon$
\end_inset

 o el ultimo simbolo de 
\begin_inset Formula $\beta$
\end_inset

 es distinto de 
\begin_inset Formula $B$
\end_inset

.
 La descripcion instantanea 
\begin_inset Formula $\alpha_{1}...\alpha_{n}q\beta_{1}...\beta_{m}$
\end_inset

,
 con 
\begin_inset Formula $\alpha_{1},...,\alpha_{n}$
\end_inset

,
 
\begin_inset Formula $\beta_{1},...,\beta_{m}\in\Gamma$
\end_inset

,
 
\begin_inset Formula $n,m\geq0$
\end_inset

 representara la siguiente situacion
\begin_inset Formula 
\[
\begin{array}{cccccccccccc}
\alpha_{1} & \alpha_{2} & ... & \alpha_{n} & \beta_{1} & \beta_{2} & ... & \beta_{m} & B & B & B & ...\\
 &  &  &  & \uparrow\\
 &  &  &  & q
\end{array}
\]

\end_inset

Notese que aqui 
\begin_inset Formula $n$
\end_inset

 y 
\begin_inset Formula $m$
\end_inset

 pueden ser 
\begin_inset Formula $0$
\end_inset

.
 Por ejemplo si 
\begin_inset Formula $n=0$
\end_inset

 tenemos que 
\begin_inset Formula $\alpha_{1}...\alpha_{n}q\beta_{1}...\beta_{m}=q\beta_{1}...\beta_{m}$
\end_inset

 y representa la siguiente situacion
\begin_inset Formula 
\[
\begin{array}{cccccccccccc}
\beta_{1} & \beta_{2} & ... & \beta_{m} & B & B & B & ...\\
\uparrow\\
q
\end{array}
\]

\end_inset

Si 
\begin_inset Formula $m=0$
\end_inset

 tenemos que 
\begin_inset Formula $\alpha_{1}...\alpha_{n}q\beta_{1}...\beta_{m}=\alpha_{1}...\alpha_{n}q$
\end_inset

 y representa la siguiente situacion
\begin_inset Formula 
\[
\begin{array}{cccccccccccc}
\alpha_{1} & \alpha_{2} & ... & \alpha_{n} & B & B & ... &  &  &  & ...\\
 &  &  &  & \uparrow\\
 &  &  &  & q
\end{array}
\]

\end_inset

Si ambos 
\begin_inset Formula $n$
\end_inset

 y 
\begin_inset Formula $m$
\end_inset

 son 
\begin_inset Formula $0$
\end_inset

 entonces tenemos que 
\begin_inset Formula $\alpha_{1}...\alpha_{n}q\beta_{1}...\beta_{m}=q$
\end_inset

 y representa la siguiente situacion
\begin_inset Formula 
\[
\begin{array}{cccccccccccc}
B & B & B & ...\\
\uparrow\\
q
\end{array}
\]

\end_inset

La condicion de que en una descripcion instantanea 
\begin_inset Formula $\alpha q\beta$
\end_inset

 deba suceder que 
\begin_inset Formula $\left[\beta\right]_{\left\vert \beta\right\vert }\neq B$
\end_inset

 es para que haya una correspondencia biuniboca entre descripciones instantaneas y situaciones de funcionamiento de la maquina.
 Dejamos al lector meditar sobre esto hasta convenserse de su veracidad.
\end_layout

\begin_layout Standard
Usaremos 
\begin_inset Formula $Des$
\end_inset

 para denotar el conjunto de las descripciones instantaneas.
 Definamos la funcion 
\begin_inset Formula $St:Des\rightarrow Q$
\end_inset

,
 de la siguiente manera
\begin_inset Formula 
\[
St(d)=\text{unico simbolo de }Q\text{ que ocurre en }d
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $d$
\end_inset

 es una descripcion instantanea,
 entonces 
\begin_inset Formula $Ti(d)=3\mathrm{-UPLA}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $d$
\end_inset

 es una descripcion instantanea,
 entonces 
\begin_inset Formula $St(d)=d\cap Q$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
La relacion 
\begin_inset Formula $\vdash$
\end_inset


\end_layout

\begin_layout Standard
Dado 
\begin_inset Formula $\alpha\in(Q\cup\Gamma)^{\ast}$
\end_inset

,
 definamos 
\begin_inset Formula $\left\lfloor \alpha\right\rfloor $
\end_inset

 de la siguiente manera
\begin_inset Formula 
\begin{align*}
\left\lfloor \varepsilon\right\rfloor  & =\varepsilon\\
\left\lfloor \alpha\sigma\right\rfloor  & =\alpha\sigma\text{, si }\sigma\neq B\\
\left\lfloor \alpha B\right\rfloor  & =\left\lfloor \alpha\right\rfloor 
\end{align*}

\end_inset

Es decir 
\begin_inset Formula $\left\lfloor \alpha\right\rfloor $
\end_inset

 es el resultado de remover de 
\begin_inset Formula $\alpha$
\end_inset

 el tramo final mas grande de la forma 
\begin_inset Formula $B^{n}$
\end_inset

.
 Dada cualquier palabra 
\begin_inset Formula $\alpha$
\end_inset

 definimos
\begin_inset Formula 
\[
^{\curvearrowright}\alpha=\left\{ \begin{array}{lll}
\left[\alpha\right]_{2}...\left[\alpha\right]_{\left\vert \alpha\right\vert } & \text{si} & \left\vert \alpha\right\vert \geq2\\
\varepsilon & \text{si} & \left\vert \alpha\right\vert \leq1
\end{array}\right.\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \alpha^{\curvearrowleft}=\left\{ \begin{array}{lll}
\left[\alpha\right]_{1}...\left[\alpha\right]_{\left\vert \alpha\right\vert -1} & \text{si} & \left\vert \alpha\right\vert \geq2\\
\varepsilon & \text{si} & \left\vert \alpha\right\vert \leq1
\end{array}\right.
\]

\end_inset

Dadas 
\begin_inset Formula $d_{1},d_{2}\in Des$
\end_inset

,
 escribiremos 
\begin_inset Formula $d_{1}\vdash d_{2}$
\end_inset

 cuando existan 
\begin_inset Formula $\sigma\in\Gamma$
\end_inset

,
 
\begin_inset Formula $\alpha,\beta\in\Gamma^{\ast}$
\end_inset

 y 
\begin_inset Formula $p,q\in Q$
\end_inset

 tales que se cumple alguno de los siguientes casos
\end_layout

\begin_layout Standard
Caso 1.
\begin_inset Formula 
\begin{align*}
d_{1} & =\alpha p\beta\\
\delta\left(p,\left[\beta B\right]_{1}\right) & =(q,\sigma,R)\\
d_{2} & =\alpha\sigma q^{\curvearrowright}\beta
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Caso 2.
\begin_inset Formula 
\begin{align*}
d_{1} & =\alpha p\beta\\
\delta\left(p,\left[\beta B\right]_{1}\right) & =(q,\sigma,L)\text{ y }\alpha\neq\varepsilon\\
d_{2} & =\left\lfloor \alpha^{\curvearrowleft}q\left[\alpha\right]_{\left\vert \alpha\right\vert }\sigma^{\curvearrowright}\beta\right\rfloor 
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
Caso 3.
\begin_inset Formula 
\begin{align*}
d_{1} & =\alpha p\beta\\
\delta(p,\left[\beta B\right]_{1}) & =(q,\sigma,K)\\
d_{2} & =\left\lfloor \alpha q\sigma^{\curvearrowright}\beta\right\rfloor 
\end{align*}

\end_inset

Escribiremos 
\begin_inset Formula $d\nvdash d^{\prime}$
\end_inset

 para expresar que no se da 
\begin_inset Formula $d\vdash d^{\prime}$
\end_inset

.
 Para 
\begin_inset Formula $d,d^{\prime}\in Des$
\end_inset

 y 
\begin_inset Formula $n\geq0$
\end_inset

,
 escribiremos 
\begin_inset Formula $d\overset{n}{\vdash}d^{\prime}$
\end_inset

 si existen 
\begin_inset Formula $d_{1},...,d_{n+1}\in Des$
\end_inset

 tales que
\begin_inset Formula 
\begin{align*}
d & =d_{1}\\
d^{\prime} & =d_{n+1}\\
d_{i} & \vdash d_{i+1}\text{, para }i=1,...,n.
\end{align*}

\end_inset

Notese que 
\begin_inset Formula $d\overset{0}{\vdash}d^{\prime}$
\end_inset

 sii 
\begin_inset Formula $d=d^{\prime}$
\end_inset

.
 Finalmente definamos
\begin_inset Formula 
\[
d\overset{\ast}{\vdash}d^{\prime}\text{ sii }(\exists n\in\omega)\;d\overset{n}{\vdash}d^{\prime}\text{.}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 6:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $d\vdash d$
\end_inset

,
 para cada 
\begin_inset Formula $d\in Des$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $\alpha p\beta\nvdash d$
\end_inset

 para toda descripción instantánea 
\begin_inset Formula $d$
\end_inset

 entonces 
\begin_inset Formula $(p,[\beta B]_{1})\notin D_{\delta}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $\delta(p,a)=(p,a,L)$
\end_inset

 entonces 
\begin_inset Formula $pa\nvdash d$
\end_inset

 para toda descripción instantánea 
\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Enumerate
Dadas 
\begin_inset Formula $d,d^{\prime}\in Des$
\end_inset

,
 se tiene que si 
\begin_inset Formula $d\vdash d^{\prime}$
\end_inset

,
 entonces 
\begin_inset Formula $\left\vert d\right\vert \leq\left\vert d^{\prime}\right\vert +1$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Detencion
\end_layout

\begin_layout Standard
Dada 
\begin_inset Formula $d\in Des$
\end_inset

,
 diremos que 
\begin_inset Formula $M$
\end_inset

 
\shape italic
se detiene partiendo de 
\shape default

\begin_inset Formula $d$
\end_inset

 si existe 
\begin_inset Formula $d^{\prime}\in Des$
\end_inset

 tal que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $d\overset{\ast}{\vdash}d^{\prime}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $d^{\prime}\nvdash d^{\prime\prime}$
\end_inset

,
 para cada 
\begin_inset Formula $d^{\prime\prime}\in Des$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

Estudie los dos posibles casos de detencion:
\end_layout

\begin_deeper
\begin_layout Enumerate
estando el cabezal sobre el primer cuadro de la cinta
\end_layout

\begin_layout Enumerate
estando el cabezal en un cuadro que no es el primero 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 8:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $d\in Des$
\end_inset

.
 Entonces existe una infinitupla 
\begin_inset Formula $(d_{1},d_{2},...)$
\end_inset

 tal que 
\begin_inset Formula $d\vdash d_{1}\vdash d_{2}\vdash d_{3}\vdash d_{4}\vdash\cdots$
\end_inset

 si y solo si 
\begin_inset Formula $M$
\end_inset

 no se detiene partiendo de
\shape italic

\begin_inset space \space{}
\end_inset


\shape default

\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Enumerate
Supongamos que para cada 
\begin_inset Formula $(p,\sigma)\in Q\times\Gamma$
\end_inset

 la tercera coordenada de 
\begin_inset Formula $\delta(p,\sigma)$
\end_inset

 es igual a 
\begin_inset Formula $L$
\end_inset

.
 Entonces 
\begin_inset Formula $M$
\end_inset

 se detiene partiendo de cada 
\begin_inset Formula $d\in Des$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
El lenguaje 
\begin_inset Formula $L(M)$
\end_inset


\end_layout

\begin_layout Standard
Diremos que una palabra 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

 es 
\shape italic
aceptada por 
\shape default

\begin_inset Formula $M$
\end_inset

 
\shape italic
por alcance de estado final
\shape default
 cuando
\begin_inset Formula 
\[
\left\lfloor q_{0}B\alpha\right\rfloor \overset{\ast}{\vdash}d\text{, con }d\text{ tal que }St(d)\in F.
\]

\end_inset

El 
\shape italic
lenguage aceptado por 
\shape default

\begin_inset Formula $M$
\end_inset

 
\shape italic
por alcance de estado final
\shape default
 se define de la siguiente manera
\begin_inset Formula 
\[
L(M)=\{\alpha\in\Sigma^{\ast}:\alpha\text{ es aceptada por }M\text{ por alcance de estado final}\}\text{.}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 9:
\end_layout

\end_inset

Para cada uno de los siguientes conjuntos,
 encuentre una máquina de Turing 
\begin_inset Formula $M$
\end_inset

 tal que 
\begin_inset Formula $L(M)$
\end_inset

 sea dicho conjunto
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\{\alpha\in\{a,b\}^{\ast}:\left\vert \alpha\right\vert _{a}=2\left\vert \alpha\right\vert _{b}\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left\{ a^{i}b^{j}c^{k}:i\neq j\text{ o }j\neq k\right\} $
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left\{ \alpha\in\{a,b\}^{\ast}:\alpha=\alpha^{R}\right\} $
\end_inset

 (palabras capicuas)
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{\alpha\in\{@,\%\}^{+}:\exists x\in\Sigma^{\ast}$
\end_inset

 tal que 
\begin_inset Formula $\alpha=xx\}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 10:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $q_{2}$
\end_inset

 es un estado final de la máquina 
\begin_inset Formula $M$
\end_inset

,
 
\begin_inset Formula $\delta(q_{0},B)=(q_{1},B,R)$
\end_inset

 y 
\begin_inset Formula $\delta(q_{1},a)=(q_{2},b,R)$
\end_inset

 entonces 
\begin_inset Formula $a\in L(M)$
\end_inset

.
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $q_{2}$
\end_inset

 es un estado final de la máquina 
\begin_inset Formula $M$
\end_inset

,
 
\begin_inset Formula $\delta(q_{0},B)=(q_{1},B,R)$
\end_inset

 y 
\begin_inset Formula $\delta(q_{1},a)=(q_{2},b,R)$
\end_inset

 entonces 
\begin_inset Formula $b\in L(M)$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\alpha\notin L(M)$
\end_inset

 si y solo si existe una infinitupla 
\begin_inset Formula $(d_{1},d_{2},...)$
\end_inset

 tal que
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $St(d_{i})\notin F$
\end_inset

,
 para cada 
\begin_inset Formula $i=1,2,...$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\left\lfloor q_{0}B\alpha\right\rfloor \vdash d_{1}\vdash d_{2}\vdash d_{3}\vdash d_{4}\vdash\cdots$
\end_inset

 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
El lenguaje 
\begin_inset Formula $H(M)$
\end_inset


\end_layout

\begin_layout Standard
Diremos que una palabra 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

 es 
\shape italic
aceptada por 
\shape default

\begin_inset Formula $M$
\end_inset

 
\shape italic
por detencion
\shape default
 cuando 
\begin_inset Formula $M$
\end_inset

 se detiene partiendo de 
\begin_inset Formula $\left\lfloor q_{0}B\alpha\right\rfloor $
\end_inset

.
 El 
\shape italic
lenguage aceptado por 
\shape default

\begin_inset Formula $M$
\end_inset

 
\shape italic
por detencion
\shape default
 se define de la siguiente manera
\begin_inset Formula 
\[
H(M)=\{\alpha\in\Sigma^{\ast}:\alpha\text{ es aceptada por }M\text{ por detencion}\}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 11:
\end_layout

\end_inset

Para cada uno de los conjuntos del Ejercicio 9 encuentre una máquina de Turing 
\begin_inset Formula $M$
\end_inset

 tal que 
\begin_inset Formula $H(M)$
\end_inset

 sea dicho conjunto (hint:
 modifique adecuadamente cada una de las maquinas construidas para el Ejercicio 9)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 12:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $q_{2}$
\end_inset

 es un estado final de la máquina 
\begin_inset Formula $M$
\end_inset

,
 
\begin_inset Formula $\delta(q_{0},B)=(q_{1},B,R)$
\end_inset

 y 
\begin_inset Formula $\delta(q_{1},a)=(q_{2},b,R)$
\end_inset

 entonces 
\begin_inset Formula $a\in H(M)$
\end_inset

.
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $q_{2}$
\end_inset

 es un estado final de la máquina 
\begin_inset Formula $M$
\end_inset

,
 
\begin_inset Formula $\delta(q_{0},B)=(q_{1},B,R)$
\end_inset

 y 
\begin_inset Formula $\delta(q_{1},a)=(q_{2},b,K)$
\end_inset

 entonces 
\begin_inset Formula $a\in H(M)$
\end_inset

.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

.
 Existe una infinitupla 
\begin_inset Formula $(d_{1},d_{2},...)$
\end_inset

 tal que 
\begin_inset Formula $\left\lfloor q_{0}B\alpha\right\rfloor \vdash d_{1}\vdash d_{2}\vdash d_{3}\vdash d_{4}\vdash\cdots$
\end_inset

 sii 
\begin_inset Formula $\alpha\notin H(M)$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Aceptaremos sin demostracion el siguiente resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $L\subseteq\Sigma^{\ast}$
\end_inset

.
 Entonces son equivalentes
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

Existe una maquina de Turing 
\begin_inset Formula $M=(Q,\Sigma,\Gamma,\delta,q_{0},B,F)$
\end_inset

 tal que 
\begin_inset Formula $L=L(M)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

Existe una maquina de Turing 
\begin_inset Formula $M=(Q,\Sigma,\Gamma,\delta,q_{0},B,F)$
\end_inset

 tal que 
\begin_inset Formula $L=H(M)$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Funciones 
\begin_inset Formula $\Sigma$
\end_inset

-Turing computables
\end_layout

\begin_layout Standard
Para poder computar funciones mixtas con una maquina de Turing necesitaremos un simbolo para representar numeros sobre la cinta.
 Llamaremos a este simbolo 
\shape italic
unit
\shape default
 y lo denotaremos con 
\begin_inset Formula $\shortmid$
\end_inset

.
 Mas formalmente una 
\shape italic
maquina de Turing con unit
\shape default
 es una 8-upla 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,\shortmid,F\right)$
\end_inset

 tal que 
\begin_inset Formula $\left(Q,\Sigma,\Gamma,\delta,q_{0},B,F\right)$
\end_inset

 es una maquina de Turing y 
\begin_inset Formula $\shortmid$
\end_inset

 es un simbolo distingido perteneciente a 
\begin_inset Formula $\Gamma-(\{B\}\cup\Sigma)$
\end_inset

.
\end_layout

\begin_layout Standard
Diremos que una funcion 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\Sigma^{\ast}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-
\shape italic
Turing computable
\shape default
 si existe una maquina de Turing con unit,
 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,\shortmid,F\right)$
\end_inset

 tal que:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in D_{f}$
\end_inset

,
 entonces hay un 
\begin_inset Formula $p\in Q$
\end_inset

 tal que
\begin_inset Formula 
\[
\left\lfloor q_{0}B\shortmid^{x_{1}}B...B\shortmid^{x_{n}}B\alpha_{1}B...B\alpha_{m}\right\rfloor \overset{\ast}{\vdash}\left\lfloor pBf(\vec{x},\vec{\alpha})\right\rfloor 
\]

\end_inset

y 
\begin_inset Formula $\left\lfloor pBf(\vec{x},\vec{\alpha})\right\rfloor \nvdash d$
\end_inset

,
 para cada 
\begin_inset Formula $d\in Des$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}-D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $M$
\end_inset

 no se detiene partiendo de
\begin_inset Formula 
\[
\left\lfloor q_{0}B\shortmid^{x_{1}}B...B\shortmid^{x_{n}}B\alpha_{1}B...B\alpha_{m}\right\rfloor .
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
En forma similar,
 una funcion 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast}{}^{m}\rightarrow\omega$
\end_inset

,
 es llamada 
\begin_inset Formula $\Sigma$
\end_inset

-
\shape italic
Turing computable
\shape default
 si existe una maquina de Turing con unit,
 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,\shortmid,F\right)$
\end_inset

,
 tal que:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in D_{f}$
\end_inset

,
 entonces hay un 
\begin_inset Formula $p\in Q$
\end_inset

 tal que
\begin_inset Formula 
\[
\left\lfloor q_{0}B\shortmid^{x_{1}}B...B\shortmid^{x_{n}}B\alpha_{1}B...B\alpha_{m}\right\rfloor \overset{\ast}{\vdash}\left\lfloor pB\shortmid^{f(\vec{x},\vec{\alpha})}\right\rfloor 
\]

\end_inset

y 
\begin_inset Formula $\left\lfloor pB\shortmid^{f(\vec{x},\vec{\alpha})}\right\rfloor \nvdash d$
\end_inset

,
 para cada 
\begin_inset Formula $d\in Des$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}-D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $M$
\end_inset

 no se detiene partiendo de
\begin_inset Formula 
\[
\left\lfloor q_{0}B\shortmid^{x_{1}}B...B\shortmid^{x_{n}}B\alpha_{1}B...B\alpha_{m}\right\rfloor 
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
Cuando 
\begin_inset Formula $M$
\end_inset

 y 
\begin_inset Formula $f$
\end_inset

 cumplan los items (1) y (2) de la definicion anterior,
 diremos que la funcion 
\begin_inset Formula $f$
\end_inset

 es 
\shape italic
computada
\shape default
 por 
\begin_inset Formula $M$
\end_inset

.
\end_layout

\begin_layout Standard
Por supuesto esta definicion no tendria sentido como modelo matematico del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable si no sucediera que toda funcion 
\begin_inset Formula $\Sigma$
\end_inset

-Turing computable fuera 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Este hecho es intuitivamente claro y lo expresamos en forma de proposicion.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast}{}^{m}\rightarrow O$
\end_inset

,
 con 
\begin_inset Formula $O\in\{\omega,\Sigma^{\ast}\}$
\end_inset

,
 es computada por una maquina de Turing con unit 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,\shortmid,F\right)$
\end_inset

,
 entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Haremos el caso 
\begin_inset Formula $O=\Sigma^{\ast}$
\end_inset

.
 Sea 
\begin_inset Formula $\mathbb{P}$
\end_inset

 el siguiente procedimiento efectivo.
\end_layout

\begin_layout Standard
- Conjunto de datos de entrada de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 igual a 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast}{}^{m}$
\end_inset


\end_layout

\begin_layout Standard
- Conjunto de datos de salida de 
\begin_inset Formula $\mathbb{P}$
\end_inset

 contenido en 
\begin_inset Formula $O$
\end_inset


\end_layout

\begin_layout Standard
- Funcionamiento:
 Hacer funcionar paso a paso la maquina 
\begin_inset Formula $M$
\end_inset

 partiendo de la descripcion instantanea 
\begin_inset Formula $\left\lfloor q_{0}B\shortmid^{x_{1}}B...B\shortmid^{x_{n}}B\alpha_{1}B...B\alpha_{m}\right\rfloor $
\end_inset

.
 Si en alguna instancia 
\begin_inset Formula $M$
\end_inset

 termina,
 dar como salida el resultado de remover de la descripcion instantanea final los dos primeros simbolos.
\end_layout

\begin_layout Standard
Notese que este procedimiento termina solo en aquelos elementos 
\begin_inset Formula $(\vec{x},\vec{\sigma})\in\omega^{n}\times\Sigma^{\ast}{}^{m}$
\end_inset

 tales que la maquina 
\begin_inset Formula $M$
\end_inset

 termina partiendo desde
\begin_inset Formula 
\[
\left\lfloor q_{0}B\shortmid^{x_{1}}B...B\shortmid^{x_{n}}B\alpha_{1}B...B\alpha_{m}\right\rfloor 
\]

\end_inset

por lo cual termina solo en los elementos de 
\begin_inset Formula $D_{f}$
\end_inset

 ya que 
\begin_inset Formula $M$
\end_inset

 computa a 
\begin_inset Formula $f$
\end_inset

.
 Ademas es claro que en caso de terminacion el procedimiento da como salida 
\begin_inset Formula $f(\vec{x},\vec{\sigma})$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Sin envargo el modelo Turingniano podria a priori no ser del todo correcto ya que podria pasar que haya una funcion que sea computada por un procedimiento efectivo pero que no exista una maquina de Turing que la compute.
 En otras palabras el modelo podria ser incompleto.
 La completitud de este modelo puede no ser clara al comienzo pero a medida que vayamos avanzando en nuestro estudio y conozcamos ademas los otros paradigmas y su relacion,
 quedara claro que el modelo de Turing es acertado.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 13:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{a,b\}$
\end_inset

.
 Para cada una de las siguientes funciones 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas dar una máquina de Turing 
\begin_inset Formula $\left(Q,\Gamma,\Sigma,\delta,q_{0},B,\shortmid,\emptyset\right)$
\end_inset

 que la compute
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\begin{array}[t]{rll}
Suc:\omega & \rightarrow & \omega\\
n & \rightarrow & n+1
\end{array}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\begin{array}[t]{rll}
Pred:\mathbf{N} & \rightarrow & \omega\\
n & \rightarrow & n-1
\end{array}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\begin{array}[t]{rll}
p_{2}^{1,1}:\omega\times\Sigma^{\ast} & \rightarrow & \Sigma^{\ast}\\
(x,\alpha) & \rightarrow & \alpha
\end{array}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
(explicada en video en granlogico.com)
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $\begin{array}[t]{rll}
C_{2}^{1,1}:\omega\times\Sigma^{\ast} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & 2
\end{array}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 13,5:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\%\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}[t]{rll}
f:\{(x,\alpha)\in\omega\times\Sigma^{\ast}:\left\vert \alpha\right\vert \text{ es impar}\} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & x+\left\vert \alpha\right\vert 
\end{array}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
De el diagrama de una maquina de Turing 
\begin_inset Formula $M$
\end_inset

 la cual compute a 
\begin_inset Formula $f$
\end_inset

.
\end_layout

\begin_layout Enumerate
Para cada una de los siguientes pares 
\begin_inset Formula $(x,\alpha)$
\end_inset

 dar la sucecion de descripciones instantaneas que parte de 
\begin_inset Formula $\left\lfloor q_{0}B\shortmid^{x}B\alpha\right\rfloor $
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $(x,\alpha)=(0,\varepsilon)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $(x,\alpha)=(100,@)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $(x,\alpha)=(3,@@\%)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $(x,\alpha)=(100,@\%)$
\end_inset

 
\end_layout

\begin_layout Standard
(Note que dicha sucesion para ciertos casos debe ser infinita) 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 13,7:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\%\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}[t]{rll}
R:\{\alpha\in\Sigma^{+}:\exists x\in\Sigma^{\ast}\text{ tal que }\alpha=xx\} & \rightarrow & \Sigma^{\ast}\\
\alpha & \rightarrow & \text{único }x\text{ tal que }\alpha=xx
\end{array}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
De el diagrama de una maquina de Turing 
\begin_inset Formula $M$
\end_inset

 la cual compute a 
\begin_inset Formula $R$
\end_inset

.
\end_layout

\begin_layout Enumerate
Para cada una de las siguientes palabras 
\begin_inset Formula $\alpha$
\end_inset

 dar la sucecion de descripciones instantaneas que parte de 
\begin_inset Formula $\left\lfloor q_{0}B\alpha\right\rfloor $
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\alpha=\varepsilon$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\alpha=@@$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\alpha=@@\%\%$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\alpha=@\%@\%\%$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\alpha=@@\%@$
\end_inset

 
\end_layout

\begin_layout Standard
(Note que dicha sucesion para ciertos casos debe ser infinita) 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 14:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,\shortmid,F\right)$
\end_inset

 una maquina de Turing con unit y supongamos que 
\begin_inset Formula $M$
\end_inset

 computa a 
\begin_inset Formula $f$
\end_inset

.
 Entonces 
\begin_inset Formula $D_{f}=\{d\in Des:M$
\end_inset

 se detiene partiendo desde 
\begin_inset Formula $d\}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 son dos funciones y 
\begin_inset Formula $M$
\end_inset

 es es una máquina de Turing que computa a 
\begin_inset Formula $f$
\end_inset

 y a 
\begin_inset Formula $g$
\end_inset

 entonces 
\begin_inset Formula $f=g$
\end_inset

.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,\shortmid,F\right)$
\end_inset

 una maquina de Turing con unit y supongamos que 
\begin_inset Formula $M$
\end_inset

 computa a 
\begin_inset Formula $f$
\end_inset

 y que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-total.
 Entonces 
\begin_inset Formula $M$
\end_inset

 se detiene partiendo desde 
\begin_inset Formula $d$
\end_inset

,
 cualesquiera sea 
\begin_inset Formula $d\in Des$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 15:
\end_layout

\end_inset

Como se vio anteriormente el modelo de Turing del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable es el concepto matematico de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-Turing computable.
\end_layout

\begin_deeper
\begin_layout Enumerate
Cual seria el modelo de Turing del concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable?
 que nombre le pondria?
\end_layout

\begin_layout Enumerate
Cual seria el modelo de Turing del concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable?
 que nombre le pondria?
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Guia 5
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Section*
El paradigma de Godel:
 Funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas
\end_layout

\begin_layout Standard
En esta guia y la siguiente desarrollaremos el modelo matematico del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 dado por Godel.
 Dichas funciones seran llamadas 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas.
 La idea es partir de un conjunto inicial de funciones muy simples y obviamente 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables y luego obtener nuevas funciones 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables usando constructores que preservan la computabilidad efectiva.
 Las funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas seran las que se obtienen iterando el uso de estos constructores,
 partiendo del conjunto inicial de funciones antes mencionado.
 Nos referiremos a este paradigma como el paradigma Godeliano o recursivo.
 A veces tambien lo llamaremos el paradigma funcional.
\end_layout

\begin_layout Standard
La familia de funciones simples y obviamente 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables de la que partiremos es la siguiente
\begin_inset Formula 
\[
\left\{ Suc,Pred,C_{0}^{0,0},C_{\varepsilon}^{0,0}\right\} \cup\left\{ d_{a}:a\in\Sigma\right\} \cup\left\{ p_{j}^{n,m}:1\leq j\leq n+m\right\} 
\]

\end_inset

Los constructores que usaremos son:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Composicion
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Recursion primitiva
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Minimizacion de predicados totales 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Estos constructores nos permiten dadas ciertas funciones construir o definir una nueva funcion y tienen la propiedad de preservar la computabilidad efectiva en el sentido que si las funciones iniciales son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables,
 entonces la funcion obtenida tambien lo es.
 Un concepto fundamental es el de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva primitiva.
 Estas funciones seran aquellas que se obtienen a partir de las del conjunto inicial usando solo los dos primeros constructores:
 composicion y recursion primitiva.
 Nuestro primer objetivo es definir el concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva primitiva para lo cual en las proximas dos secciones definiremos y estudiaremos los constructores de composicion y recursion primitiva.
 Luego definiremos el concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva primitiva y nos abocaremos a desarrollar este concepto fundamental.
 Recien despues ya en la Guia 6 estudiaremos el constructor de minimizacion y definiremos el concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
\end_layout

\begin_layout Subsection*
Composicion
\end_layout

\begin_layout Standard
Dadas funciones 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas 
\begin_inset Formula $f,f_{1},...,f_{r}$
\end_inset

,
 con 
\begin_inset Formula $r\geq1$
\end_inset

,
 diremos que la funcion 
\begin_inset Formula $f\circ[f_{1},...,f_{r}]$
\end_inset

 es 
\shape italic
obtenida por composicion a partir de las funciones 
\shape default

\begin_inset Formula $f,f_{1},...,f_{r}$
\end_inset

.
 Un hecho que a priori no es obvio es que si 
\begin_inset Formula $f,f_{1},...,f_{r}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas,
 entonces 
\begin_inset Formula $f\circ[f_{1},...,f_{r}]$
\end_inset

 lo es.
 Esto es consecuencia del siguiente lema.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Supongamos que 
\begin_inset Formula $f,f_{1},...,f_{r}$
\end_inset

 son funciones 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas,
 con 
\begin_inset Formula $r\geq1$
\end_inset

.
 Supongamos ademas que 
\begin_inset Formula $f\circ[f_{1},...,f_{r}]\neq\emptyset$
\end_inset

.
 Entonces hay 
\begin_inset Formula $n,m,k,l\in\omega$
\end_inset

 y 
\begin_inset Formula $s\in\{\#,\ast\}$
\end_inset

 tales que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $r=n+m$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset

 es de tipo 
\begin_inset Formula $(n,m,s)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $f_{i}$
\end_inset

 es de tipo 
\begin_inset Formula $(k,l,\#)$
\end_inset

,
 para cada 
\begin_inset Formula $i=1,...,n$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $f_{i}$
\end_inset

 es de tipo 
\begin_inset Formula $(k,l,\ast)$
\end_inset

,
 para cada 
\begin_inset Formula $i=n+1,...,n+m$
\end_inset

 
\end_layout

\begin_layout Standard
Mas aun,
 en tal caso la funcion 
\begin_inset Formula $f\circ[f_{1},...,f_{n+m}]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta de tipo 
\begin_inset Formula $(k,l,s)$
\end_inset

 y:
\begin_inset Formula 
\begin{align*}
D_{f\circ[f_{1},...,f_{n+m}]} & =\left\{ (\vec{x},\vec{\alpha})\in\bigcap_{i=1}^{n+m}D_{f_{i}}:(f_{1}(\vec{x},\vec{\alpha}),...,f_{n+m}(\vec{x},\vec{\alpha}))\in D_{f}\right\} \\
f\circ[f_{1},...,f_{n+m}](\vec{x},\vec{\alpha}) & =f(f_{1}(\vec{x},\vec{\alpha}),...,f_{n+m}(\vec{x},\vec{\alpha})).
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1:
\end_layout

\end_inset

Justifique con palabras la veracidad del lema anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Ahora si es facil probar que la composicion preserva la computabilidad efectiva.
 Mas formalmente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "composicion preserva computabilidad efectiva"

\end_inset

Si 
\begin_inset Formula $f,f_{1},...,f_{r}$
\end_inset

,
 con 
\begin_inset Formula $r\geq1$
\end_inset

,
 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables,
 entonces 
\begin_inset Formula $f\circ[f_{1},...,f_{r}]$
\end_inset

 lo es.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f\circ[f_{1},...,f_{r}]=\emptyset$
\end_inset

,
 entonces claramente es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Supongamos entonces que 
\begin_inset Formula $f\circ[f_{1},...,f_{r}]\neq\emptyset$
\end_inset

.
 Por el lema anterior hay 
\begin_inset Formula $n,m,k,l\in\omega$
\end_inset

 y 
\begin_inset Formula $s\in\{\#,\ast\}$
\end_inset

 tales que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $r=n+m$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset

 es de tipo 
\begin_inset Formula $(n,m,s)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $f_{i}$
\end_inset

 es de tipo 
\begin_inset Formula $(k,l,\#)$
\end_inset

,
 para cada 
\begin_inset Formula $i=1,...,n$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $f_{i}$
\end_inset

 es de tipo 
\begin_inset Formula $(k,l,\ast)$
\end_inset

,
 para cada 
\begin_inset Formula $i=n+1,...,n+m$
\end_inset

 
\end_layout

\begin_layout Standard
Sean 
\begin_inset Formula $\mathbb{P},\mathbb{P}_{1},...,\mathbb{P}_{n+m}$
\end_inset

 procedimientos efectivos los cuales computen las funciones 
\begin_inset Formula $f,f_{1},...,f_{n+m}$
\end_inset

,
 respectivamente.
 Usando estos procedimientos es facil definir un procedimiento efectivo el cual compute a 
\begin_inset Formula $f\circ[f_{1},...,f_{n+m}]$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

Complete la prueba anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Recursion primitiva
\end_layout

\begin_layout Standard
La recursion primitiva es un tipo muy particular de recursion.
 Mas adelante lo definiremos matematicamente pero antes daremos varios ejemplos para aproximarnos gradualmente a la definicion.
 Consideremos por ejemplo las siguientes ecuaciones:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(0)=1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(t+1)=1+R(t)+R(t)^{2}$
\end_inset

 
\end_layout

\begin_layout Standard
Notese que hay una unica funcion 
\begin_inset Formula $R:\omega\rightarrow\omega$
\end_inset

 la cual cumple (1) y (2).
 Esto es ya que el valor de 
\begin_inset Formula $R$
\end_inset

 en 
\begin_inset Formula $t$
\end_inset

 esta determinado por sucesivas aplicaciones de las ecuaciones (1) y (2).
 Por ejemplo la ecuacion (1) nos dice que 
\begin_inset Formula $R(0)=1$
\end_inset

 pero entonces la ecuacion (2) nos dice que 
\begin_inset Formula $R(1)=1+1+1^{2}=3$
\end_inset

 por lo cual nuevamente la ecuacion (2) nos dice que 
\begin_inset Formula $R(2)=1+3+3^{2}=13$
\end_inset

 y asi podemos notar facilmente que 
\begin_inset Formula $R$
\end_inset

 esta determinada por dichas ecuaciones.
\end_layout

\begin_layout Standard
Se suele decir que las ecuaciones (1) y (2) definen recursivamente a la funcion 
\begin_inset Formula $R$
\end_inset

 pero hay que tener cuidado porque esto es una manera de hablar ya que la funcion 
\begin_inset Formula $R$
\end_inset

 podria en nuestro discurso ya haber sido definida de otra manera.
 Mas propio es pensar que dichas ecuaciones determinan a 
\begin_inset Formula $R$
\end_inset

 en el sentido que 
\begin_inset Formula $R$
\end_inset

 es la unica que las cumple.
 Por ejemplo las ecuaciones:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $R(0)=50$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset


\begin_inset Formula $R(t+1)=R(t)$
\end_inset

 
\end_layout

\begin_layout Standard
definen recursivamente a la funcion 
\begin_inset Formula $C_{50}^{1,0}$
\end_inset

 pero esta claro que la definicion de 
\begin_inset Formula $C_{50}^{1,0}$
\end_inset

 en esta materia no fue dada de esta forma.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

Encuentre ecuaciones que 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

definan recursivamente
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 a la funcion 
\begin_inset Formula $R=\lambda t[2^{t}]$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Hay casos de recursiones en las cuales el valor de 
\begin_inset Formula $R(t+1)$
\end_inset

 no solo depende de 
\begin_inset Formula $R(t)$
\end_inset

 sino que tambien depende de 
\begin_inset Formula $t$
\end_inset

.
 Por ejemplo
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(i)
\end_layout

\end_inset


\begin_inset Formula $R(0)=1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(ii)
\end_layout

\end_inset


\begin_inset Formula $R(t+1)=t.R(t)+1$
\end_inset

 
\end_layout

\begin_layout Standard
De todas maneras deberia quedar claro que las ecuaciones (i) y (ii) determinan una unica funcion 
\begin_inset Formula $R:\omega\rightarrow\omega$
\end_inset

 que las satisface.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

Encuentre ecuaciones que 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

definan recursivamente
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 a la funcion 
\begin_inset Formula $R=\lambda t[t!]$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Tambien podemos generalizar pensando que la funcion 
\begin_inset Formula $R$
\end_inset

 depende no solo de un parametro 
\begin_inset Formula $t$
\end_inset

 sino que tiene otras variables.
 Por ejemplo
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(p)
\end_layout

\end_inset


\begin_inset Formula $R(0,x_{1},x_{2},x_{3})=x_{1}+2x_{3}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(q)
\end_layout

\end_inset


\begin_inset Formula $R(t+1,x_{1},x_{2},x_{3})=t+x_{1}+x_{2}+x_{3}+R(t,x_{1},x_{2},x_{3})$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

Explique con palabras por que las ecuaciones (p) y (q) determinan una unica funcion 
\begin_inset Formula $R:\omega^{4}\rightarrow\omega$
\end_inset

.
 Cuanto vale 
\begin_inset Formula $R(3,1,2,3)$
\end_inset

?
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Por supuesto la cantidad de variables extra puede ser cualquiera y no justo 
\begin_inset Formula $3$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 6:
\end_layout

\end_inset

Encuentre ecuaciones que 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

definan recursivamente
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 a la funcion 
\begin_inset Formula $R=\lambda tx_{1}[t+x_{1}]$
\end_inset

,
 usando la funcion 
\begin_inset Formula $Suc$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Tambien podriamos tener variables alfabeticas.
 Por ejemplo consideremos
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(r)
\end_layout

\end_inset


\begin_inset Formula $R(0,x_{1},x_{2},\alpha_{1},\alpha_{2})=x_{1}+\left\vert \alpha_{1}\right\vert ^{x_{2}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(s)
\end_layout

\end_inset


\begin_inset Formula $R(t+1,x_{1},x_{2},\alpha_{1},\alpha_{2})=t+x_{1}+x_{2}+\left\vert \alpha_{1}\right\vert +\left\vert \alpha_{2}\right\vert +R(t,x_{1},x_{2},\alpha_{1},\alpha_{2})$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Es claro aqui que las ecuaciones (r) y (s) determinan una unica funcion 
\begin_inset Formula $R:\omega^{3}\times\Sigma^{\ast2}\rightarrow\omega$
\end_inset

 que las cumple.
 Esto se puede explicar de la siguiente manera:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

La ecuacion (r) determina los valores de 
\begin_inset Formula $R$
\end_inset

 sobre el conjunto 
\begin_inset Formula $\{0\}\times\omega\times\omega\times\Sigma^{\ast}\times\Sigma^{\ast}$
\end_inset

.
 Pero una ves determinados estos valores,
 la ecuacion (s) tomada con 
\begin_inset Formula $t=0$
\end_inset

,
 determina los valores de 
\begin_inset Formula $R$
\end_inset

 sobre el conjunto 
\begin_inset Formula $\{1\}\times\omega\times\omega\times\Sigma^{\ast}\times\Sigma^{\ast}$
\end_inset

.
 Pero una ves determinados estos valores,
 la ecuacion (s) tomada con 
\begin_inset Formula $t=1$
\end_inset

,
 determina los valores de 
\begin_inset Formula $R$
\end_inset

 sobre el conjunto 
\begin_inset Formula $\{2\}\times\omega\times\omega\times\Sigma^{\ast}\times\Sigma^{\ast}$
\end_inset

,
 etc 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
El caso anterior podria generalizarse de la siguiente manera:
 Si tenemos dadas dos funciones
\begin_inset Formula 
\begin{align*}
f & :\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega\\
g & :\omega^{n+2}\times\Sigma^{\ast m}\rightarrow\omega
\end{align*}

\end_inset

entonces las ecuaciones:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $R(0,\vec{x},\vec{\alpha})=f(\vec{x},\vec{\alpha})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset


\begin_inset Formula $R(t+1,\vec{x},\vec{\alpha})=g(R(t,\vec{x},\vec{\alpha}),t,\vec{x},\vec{\alpha})$
\end_inset

 
\end_layout

\begin_layout Standard
determinan una unica funcion 
\begin_inset Formula $R:\omega^{n+1}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 que las cumple.
 Notese que para el caso
\begin_inset Formula 
\begin{align*}
n & =m=2\\
f & =\lambda x_{1}x_{2}\alpha_{1}\alpha_{2}[x_{1}+\left\vert \alpha_{1}\right\vert ^{x_{2}}]\\
g & =\lambda xtx_{1}x_{2}\alpha_{1}\alpha_{2}[t+x_{1}+x_{2}+\left\vert \alpha_{1}\right\vert +\left\vert \alpha_{2}\right\vert +x]
\end{align*}

\end_inset

las ecuaciones (a) y (b) se transforman en las ecuaciones (r) y (s).
\end_layout

\begin_layout Subsubsection*
Conjuntos rectangulares
\end_layout

\begin_layout Standard
El primer caso de recursion primitiva que definiremos a continuacion engloba todos los ejemplos vistos recien dentro de un marco general.
 Para enunciarlo necesitaremos una definicion muy importante en la materia.
 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-mixto 
\begin_inset Formula $S$
\end_inset

 es llamado 
\shape italic
rectangular 
\shape default
si es de la forma
\begin_inset Formula 
\[
S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}
\]

\end_inset

con cada 
\begin_inset Formula $S_{i}\subseteq\omega$
\end_inset

 y cada 
\begin_inset Formula $L_{i}\subseteq\Sigma^{\ast}$
\end_inset

.
 Notar que todo subconjunto de 
\begin_inset Formula $\omega$
\end_inset

 es rectangular (es el caso 
\begin_inset Formula $n=1$
\end_inset

 y 
\begin_inset Formula $m=0$
\end_inset

).
 Analogamente,
 todo subconjunto de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

 es rectangular (es el caso 
\begin_inset Formula $n=0$
\end_inset

 y 
\begin_inset Formula $m=1$
\end_inset

).
 Tambien 
\begin_inset Formula $\{\Diamond\}$
\end_inset

 es rectangular (es el caso 
\begin_inset Formula $n=m=0$
\end_inset

).
 Otros ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\mathbf{N}\times\{1,2\}\times\{@@,\varepsilon\}$
\end_inset

 es rectangular (aqui 
\begin_inset Formula $n=2$
\end_inset

 y 
\begin_inset Formula $m=1$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\{!!!,!!\}\times\{@@,\varepsilon\}$
\end_inset

 es rectangular (aqui 
\begin_inset Formula $n=0$
\end_inset

 y 
\begin_inset Formula $m=2$
\end_inset

) 
\end_layout

\begin_layout Standard
Tambien notese que 
\begin_inset Formula $\emptyset=\emptyset\times\emptyset$
\end_inset

 por lo cual 
\begin_inset Formula $\emptyset$
\end_inset

 es un conjunto rectangular.
\end_layout

\begin_layout Standard
El concepto de conjunto rectangular es muy importante en nuestro enfoque.
 Aunque en general no habra restricciones acerca del dominio de las funciones y predicados,
 nuestra filosofia sera tratar en lo posible que los dominios de las funciones que utilicemos para hacer nuestro analisis de recursividad de los distintos paradigmas,
 sean rectangulares.
\end_layout

\begin_layout Standard
Aunque en principio puede parecer que todos los conjuntos son rectangulares,
 el siguiente lema mostrara cuan ingenua es esta vision.
 Lo aceptaremos sin demostracion aunque es facil de probar.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $S\subseteq\omega\times\Sigma^{\ast}$
\end_inset

.
 Entonces 
\begin_inset Formula $S$
\end_inset

 es rectangular si y solo si se cumple la siguiente propiedad:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(R)
\end_layout

\end_inset

Si 
\begin_inset Formula $(x,\alpha),(y,\beta)\in S$
\end_inset

,
 entonces 
\begin_inset Formula $(x,\beta)\in S$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

Supongamos 
\begin_inset Formula $\Sigma=\{\#,\blacktriangle,\%\}$
\end_inset

.
 Use el lema anterior para probar que
\begin_inset Formula 
\[
\{(0,\#\#),(1,\%\%\%)\}\text{ y }\{(x,\alpha)\in\omega\times\Sigma^{\ast}:\left\vert \alpha\right\vert =x\}
\]

\end_inset

no son rectangulares 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Recursion primitiva sobre variable numerica con valores numericos
\end_layout

\begin_layout Standard
Ahora si daremos el primer caso del constructor de recursion primitiva.
 Supongamos tenemos dadas funciones
\begin_inset Formula 
\begin{align*}
f & :S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\omega\\
g & :\omega\times\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\omega
\end{align*}

\end_inset

con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 conjuntos no vacios.
 Usando el razonamiento inductivo usado en los ejemplos anteriores,
 se puede probar que hay una unica funcion
\begin_inset Formula 
\[
R:\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\omega
\]

\end_inset

la cual cumple las ecuaciones
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $R(0,\vec{x},\vec{\alpha})=f(\vec{x},\vec{\alpha})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $R(t+1,\vec{x},\vec{\alpha})=g(R(t,\vec{x},\vec{\alpha}),t,\vec{x},\vec{\alpha})$
\end_inset

 
\end_layout

\begin_layout Standard
LLamaremos 
\begin_inset Formula $R(f,g)$
\end_inset

 a esta unica funcion que cumple las ecuaciones anteriores.
 Resumiendo,
 diremos que las ecuaciones
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(f,g)(0,\vec{x},\vec{\alpha})=f(\vec{x},\vec{\alpha})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(f,g)(t+1,\vec{x},\vec{\alpha})=g(R(f,g)(t,\vec{x},\vec{\alpha}),t,\vec{x},\vec{\alpha})$
\end_inset

 
\end_layout

\begin_layout Standard
definen recursivamente a la funcion 
\begin_inset Formula $R(f,g)$
\end_inset

.
 Tambien diremos que 
\begin_inset Formula $R(f,g)$
\end_inset

 es obtenida por 
\shape italic
recursion primitiva
\shape default
 a partir de 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
NOTA
\begin_inset space \space{}
\end_inset

IMPOTANTE:
 No confundirse y pensar que 
\begin_inset Formula $R(f,g)$
\end_inset

 es el resultado de aplicar una funcion 
\begin_inset Formula $R$
\end_inset

 al par 
\begin_inset Formula $(f,g)$
\end_inset

,
 de hecho hasta el momento no hemos definido ninguna funcion 
\begin_inset Formula $R$
\end_inset

 cuyo dominio sea cierto conjunto de pares ordenados de funciones!
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 8:
\end_layout

\end_inset

Justifique con palabras que la funcion 
\begin_inset Formula $R(f,g)$
\end_inset

 esta bien definida,
 es decir que dada una 
\begin_inset Formula $(1+n+m)$
\end_inset

-upla 
\begin_inset Formula $(t,\vec{x},\vec{\alpha})$
\end_inset

 perteneciente a 
\begin_inset Formula $\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

,
 las ecuaciones de (1) y (2) determinan el valor 
\begin_inset Formula $R(f,g)(t,\vec{x},\vec{\alpha})$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notese que cuando 
\begin_inset Formula $n=m=0$
\end_inset

,
 se tiene que 
\begin_inset Formula $D_{f}=\{\Diamond\}$
\end_inset

 y (1) y (2) se transforman en
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(f,g)(0)=f(\Diamond)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(f,g)(t+1)=g(R(f,g)(t),t)$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Veamos algunos ejemplos
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{1}$
\end_inset


\end_layout

\end_inset

Tomemos 
\begin_inset Formula $f=p_{1}^{1,0}$
\end_inset

 y 
\begin_inset Formula $g=Suc\circ p_{1}^{3,0}$
\end_inset

.
 De la definicion de 
\begin_inset Formula $R(f,g)$
\end_inset

,
 obtenemos que su dominio es 
\begin_inset Formula $\omega^{2}$
\end_inset

 y
\begin_inset Formula 
\begin{align*}
R(f,g)(0,x_{1}) & =p_{1}^{1,0}(x_{1})=x_{1}\\
R(f,g)(t+1,x_{1}) & =\left(Suc\circ p_{1}^{3,0}\right)(R(f,g)(t,x_{1}),t,x_{1})=R(f,g)(t,x_{1})+1
\end{align*}

\end_inset

Es facil notar que la unica funcion que cumple estas dos ecuaciones es 
\begin_inset Formula $\lambda tx_{1}\left[t+x_{1}\right]$
\end_inset

,
 lo cual implica que 
\begin_inset Formula $\lambda tx_{1}\left[t+x_{1}\right]=R\left(p_{1}^{1,0},Suc\circ p_{1}^{3,0}\right)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{2}$
\end_inset


\end_layout

\end_inset

Sean 
\begin_inset Formula $f=C_{0}^{0,0}$
\end_inset

 y 
\begin_inset Formula $g=p_{1}^{2,0}$
\end_inset

.
 De la definicion de 
\begin_inset Formula $R(f,g)$
\end_inset

,
 obtenemos que su dominio es 
\begin_inset Formula $\omega$
\end_inset

 y
\begin_inset Formula 
\begin{align*}
R(f,g)(0) & =C_{0}^{0,0}(\Diamond)=0\\
R(f,g)(t+1) & =p_{1}^{2,0}(R(f,g)(t),t)=R(f,g)(t)
\end{align*}

\end_inset

Es facil notar que la unica funcion que cumple estas dos ecuaciones es 
\begin_inset Formula $C_{0}^{1,0}$
\end_inset

 lo cual implica que 
\begin_inset Formula $C_{0}^{1,0}=R\left(C_{0}^{0,0},p_{1}^{2,0}\right)$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Nota importante:

\series default
 En los dos ejemplos anteriores y en todos los casos que manejaremos en la Guia 5,
 en las aplicaciones del constructor de recursion primitiva (en sus cuatro formas) las funciones iniciales seran 
\begin_inset Formula $\Sigma$
\end_inset

-totales (es decir 
\begin_inset Formula $S_{1}=...=S_{n}=\omega$
\end_inset

 y 
\begin_inset Formula $L_{1}=...=L_{m}=\Sigma^{\ast}$
\end_inset

).
 Solo a partir de la Guia 6 veremos aplicaciones con funciones no 
\begin_inset Formula $\Sigma$
\end_inset

-totales
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 9:
\end_layout

\end_inset

Sean 
\begin_inset Formula $n,m,k\in\omega$
\end_inset

 y supongamos 
\begin_inset Formula $n\geq1$
\end_inset

.
 Encuentre 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 tales que 
\begin_inset Formula $R(f,g)=C_{k}^{n,m}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 10:
\end_layout

\end_inset

Encuentre 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 tales que 
\begin_inset Formula $R(f,g)=\lambda tx_{1}[t.x_{1}]$
\end_inset

.
 Idem para 
\begin_inset Formula $\lambda tx_{1}\alpha_{1}\alpha_{2}[t.x_{1}]$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Recordemos que por definicion teniamos que 
\begin_inset Formula $0^{0}=1$
\end_inset

.
 Esto nos dice que 
\begin_inset Formula $D_{\lambda xy\left[x^{y}\right]}=\omega\times\omega$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 11:
\end_layout

\end_inset

Encuentre 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 tales que 
\begin_inset Formula $R(f,g)=\lambda tx_{1}[x_{1}^{t}]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 12:
\end_layout

\end_inset

Encuentre 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 tales que 
\begin_inset Formula $R(f,g)=\lambda t[t!]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 13:
\end_layout

\end_inset

Explique la forma en la que aplicando los constructores de composicion y recursion primitiva a las funciones del conjunto inicial se puede obtener la funcion 
\begin_inset Formula $\lambda x_{1}x_{2}\alpha_{1}[x_{1}!]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 14:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\lambda tx_{1}\left[t+x_{1}\right]=R\left(p_{1}^{1,0},Suc\circ p_{1}^{2,0}\right)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $R(\lambda xy[0],p_{2}^{4,0})=p_{1}^{3,0}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f:\omega^{2}\rightarrow\omega$
\end_inset

 y 
\begin_inset Formula $g:\omega^{4}\rightarrow\omega$
\end_inset

,
 entonces para cada 
\begin_inset Formula $(x,y)\in\omega^{2}$
\end_inset

,
 se tiene que 
\begin_inset Formula $R(f,g)(2,x,y)=g\circ(g\circ[f\circ[p_{2}^{3,0},p_{3}^{3,0}],p_{1}^{3,0},p_{2}^{3,0},p_{3}^{3,0}])(0,x,y)$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Como era de esperar,
 este caso del constructor de recursion primitiva preserva la computabilidad efectiva
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables,
 entonces 
\begin_inset Formula $R(f,g)$
\end_inset

 lo es.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 15:
\end_layout

\end_inset

Suponga que tiene procedimientos efectivos 
\begin_inset Formula $\mathbb{P}_{f}$
\end_inset

 y 
\begin_inset Formula $\mathbb{P}_{g}$
\end_inset

 que computan a 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

,
 respectivamente.
 Construya un procedimiento efectivo que compute a 
\begin_inset Formula $R(f,g)$
\end_inset

.
 Concluya que el lema anterior es cierto.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Recursion primitiva sobre variable numerica con valores alfabeticos
\end_layout

\begin_layout Standard
Ahora haremos el caso en el que la funcion definida recursivamente tiene imagen contenida en 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

.
 Es claro que entonces 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 tambien deberan tener imagen contenida en 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

.
 El unico detalle a tener en cuenta en la definicion de este caso es que si solo hicieramos estos cambios y pusieramos las mismas ecuaciones la funcion 
\begin_inset Formula $g$
\end_inset

 no resultaria 
\begin_inset Formula $\Sigma$
\end_inset

-mixta en general.
 Para que la 
\begin_inset Formula $g$
\end_inset

 de la recursion siga siendo 
\begin_inset Formula $\Sigma$
\end_inset

-mixta deberemos modificar levemente su dominio en relacion al caso ya hecho
\end_layout

\begin_layout Standard
Supongamos 
\begin_inset Formula $\Sigma$
\end_inset

 es un alfabeto finito.
 Sean
\begin_inset Formula 
\begin{align*}
f & :S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\Sigma^{\ast}\\
g & :\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times\Sigma^{\ast}\rightarrow\Sigma^{\ast}
\end{align*}

\end_inset

con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 conjuntos no vacios.
 Definamos
\begin_inset Formula 
\[
R(f,g):\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\Sigma^{\ast}
\]

\end_inset

de la siguiente manera
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(f,g)(0,\vec{x},\vec{\alpha})=f(\vec{x},\vec{\alpha})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(f,g)(t+1,\vec{x},\vec{\alpha})=g(t,\vec{x},\vec{\alpha},R(f,g)(t,\vec{x},\vec{\alpha}))$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Diremos que 
\begin_inset Formula $R(f,g)$
\end_inset

 es obtenida por 
\shape italic
recursion primitiva
\shape default
 a partir de 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

.
 Notese que cuando 
\begin_inset Formula $m=n=0$
\end_inset

,
 se tiene que 
\begin_inset Formula $D_{f}=\{\Diamond\}$
\end_inset

 y (1) y (2) se transforman en
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(f,g)(0)=f(\Diamond)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(f,g)(t+1)=g(t,R(f,g)(t))$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Veamos algunos ejemplos
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{1}$
\end_inset


\end_layout

\end_inset

Tomemos 
\begin_inset Formula $f=C_{\varepsilon}^{0,1}$
\end_inset

 y 
\begin_inset Formula $g=\lambda\alpha\beta\left[\alpha\beta\right]\circ\left[p_{3}^{1,2},p_{2}^{1,2}\right]$
\end_inset

.
 De la definicion de 
\begin_inset Formula $R(f,g)$
\end_inset

,
 obtenemos que
\begin_inset Formula 
\begin{align*}
R(f,g)(0,\alpha_{1}) & =C_{\varepsilon}^{0,1}(\alpha_{1})=\varepsilon\\
R(f,g)(t+1,\alpha_{1}) & =\lambda\alpha\beta\left[\alpha\beta\right]\circ\left[p_{3}^{1,2},p_{2}^{1,2}\right](t,\alpha_{1},R(f,g)(t,\alpha_{1}))=R(f,g)(t,\alpha_{1})\alpha_{1}
\end{align*}

\end_inset

Es facil notar que la unica funcion que cumple estas dos ecuaciones es 
\begin_inset Formula $\lambda t\alpha_{1}\left[\alpha_{1}{}^{t}\right]$
\end_inset

,
 lo cual implica que 
\begin_inset Formula $\lambda t\alpha_{1}\left[\alpha_{1}{}^{t}\right]=R\left(C_{\varepsilon}^{0,1},\lambda\alpha\beta\left[\alpha\beta\right]\circ\left[p_{3}^{1,2},p_{2}^{1,2}\right]\right)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{2}$
\end_inset


\end_layout

\end_inset

Sean 
\begin_inset Formula $f=C_{\varepsilon}^{0,0}$
\end_inset

 y 
\begin_inset Formula $g=p_{2}^{1,1}$
\end_inset

.
 De la definicion de 
\begin_inset Formula $R(f,g)$
\end_inset

,
 obtenemos que
\begin_inset Formula 
\begin{align*}
R(f,g)(0) & =C_{\varepsilon}^{0,0}(\Diamond)=\varepsilon\\
R(f,g)(t+1) & =p_{2}^{1,1}(t,R(f,g)(t))=R(f,g)(t)
\end{align*}

\end_inset

Es facil notar que la unica funcion que cumple estas dos ecuaciones es 
\begin_inset Formula $C_{\varepsilon}^{1,0}$
\end_inset

 lo cual implica que 
\begin_inset Formula $C_{\varepsilon}^{1,0}=R\left(C_{\varepsilon}^{0,0},p_{2}^{1,1}\right)$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 16:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,@,?\}$
\end_inset

.
 Encuentre 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 tales que 
\begin_inset Formula $\lambda tx_{1}[\%@\%\%\%\%?^{t}]=R(f,g)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 17:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $C_{\varepsilon}^{2,,2}=R\left(C_{\varepsilon}^{1,2},C_{\varepsilon}^{2,3}\right)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $R\left(C_{\varepsilon}^{1,1},C_{\varepsilon}^{1,1}\right)=C_{\varepsilon}^{1,1}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $f,g$
\end_inset

 son funciones 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas tales que 
\begin_inset Formula $R(f,g)$
\end_inset

 esta definida y es de tipo 
\begin_inset Formula $(1+n,m,\ast)$
\end_inset

,
 entonces 
\begin_inset Formula $f$
\end_inset

 es de tipo 
\begin_inset Formula $(n,m,\ast)$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 es de tipo 
\begin_inset Formula $(n,m+1,\ast)$
\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
La prueba del siguiente lema es completamente analoga a la del lema anterior que fue dejada como ejercicio.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables,
 entonces 
\begin_inset Formula $R(f,g)$
\end_inset

 lo es.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Recursion primitiva sobre variable alfabetica con valores numericos
\end_layout

\begin_layout Standard
Ya vimos dos casos de recursion donde el parametro o variable que comanda la recursion es numerico.
 Daremos a continuacion un ejemplo de recursion en el cual el parametro principal es alfabetico.
 Sea 
\begin_inset Formula $\Sigma=\{\%,@,?\}$
\end_inset

 y consideremos las siguientes ecuaciones:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(\varepsilon)=15$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(\alpha\%)=R(\alpha)+1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset


\begin_inset Formula $R(\alpha@)=R(\alpha).5$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset


\begin_inset Formula $R(\alpha?)=R(\alpha)^{20}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notese que las ecuaciones anteriores determinan una funcion 
\begin_inset Formula $R:\Sigma^{\ast}\rightarrow\omega$
\end_inset

.
 Esto es ya que 
\begin_inset Formula $R$
\end_inset

 en 
\begin_inset Formula $\varepsilon$
\end_inset

 debe valer 
\begin_inset Formula $15$
\end_inset

 y sabiendo esto las ecuaciones (2),
 (3) y (4) (con 
\begin_inset Formula $\alpha=\varepsilon$
\end_inset

) nos dicen que
\begin_inset Formula 
\begin{align*}
R(\%) & =16\\
R(@) & =75\\
R(?) & =15^{20}
\end{align*}

\end_inset

por lo cual podemos aplicarlas nuevamente a dichas ecuaciones (con 
\begin_inset Formula $\alpha\in\{\%,@,?\}$
\end_inset

) para calcular 
\begin_inset Formula $R$
\end_inset

 en todas las palabras de longitud 
\begin_inset Formula $2$
\end_inset

;
 y asi sucesivamente.
\end_layout

\begin_layout Standard
Daremos otro ejemplo un poco mas complicado para seguir aproximandonos al caso general.
 Nuevamente supongamos que 
\begin_inset Formula $\Sigma=\{\%,@,?\}$
\end_inset

 y supongamos tenemos una funcion 
\begin_inset Formula 
\[
f:\omega\times\Sigma^{\ast}\rightarrow\omega
\]

\end_inset

y tres funciones
\begin_inset Formula 
\begin{align*}
\mathcal{G}_{\%} & :\omega\times\omega\times\Sigma^{\ast}\times\Sigma^{\ast}\rightarrow\omega\\
\mathcal{G}_{@} & :\omega\times\omega\times\Sigma^{\ast}\times\Sigma^{\ast}\rightarrow\omega\\
\mathcal{G}_{?} & :\omega\times\omega\times\Sigma^{\ast}\times\Sigma^{\ast}\rightarrow\omega
\end{align*}

\end_inset

Entonces hay una unica funcion 
\begin_inset Formula $R:\omega\times\Sigma^{\ast}\times\Sigma^{\ast}\rightarrow\omega$
\end_inset

 la cual cumple las siguientes ecuaciones
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(x_{1},\alpha_{1},\varepsilon)=f(x_{1},\alpha_{1})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(x_{1},\alpha_{1},\alpha\%)=\mathcal{G}_{\%}(R(x_{1},\alpha_{1},\alpha),x_{1},\alpha_{1},\alpha)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset


\begin_inset Formula $R(x_{1},\alpha_{1},\alpha@)=\mathcal{G}_{@}(R(x_{1},\alpha_{1},\alpha),x_{1},\alpha_{1},\alpha)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset


\begin_inset Formula $R(x_{1},\alpha_{1},\alpha?)=\mathcal{G}_{?}(R(x_{1},\alpha_{1},\alpha),x_{1},\alpha_{1},\alpha)$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 18:
\end_layout

\end_inset

Justifique que las ecuaciones anteriores determinan a la funcion 
\begin_inset Formula $R$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 19:
\end_layout

\end_inset

Por que el parametro 
\begin_inset Formula $\alpha$
\end_inset

 de la recursion es la ultima coordenada de 
\begin_inset Formula $R$
\end_inset

?
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
El ejemplo anterior nos muestra que para hacer recursion sobre parametro alfabetico nos hace falta 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

una funcion 
\begin_inset Formula $g$
\end_inset

 por cada simbolo de 
\begin_inset Formula $\Sigma$
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
 Esto motiva la siguiente definicion.
 Dado un alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

,
 una 
\shape italic
familia 
\shape default

\begin_inset Formula $\Sigma$
\end_inset

-
\shape italic
indexada de funciones
\shape default
 sera una funcion 
\begin_inset Formula $\mathcal{G}$
\end_inset

 tal que 
\begin_inset Formula $D_{\mathcal{G}}=\Sigma$
\end_inset

 y para cada 
\begin_inset Formula $a\in D_{\mathcal{G}}$
\end_inset

 se tiene que 
\begin_inset Formula $\mathcal{G}(a)$
\end_inset

 es una funcion.
 Algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{1}$
\end_inset


\end_layout

\end_inset

Sea 
\begin_inset Formula $\mathcal{G}$
\end_inset

 dada por
\begin_inset Formula 
\[
\begin{array}{rcl}
\mathcal{G}:\{\square,\%,\blacktriangle\} & \rightarrow & \{Suc,Pred\}\\
\square & \rightarrow & Suc\\
\% & \rightarrow & Suc\\
\blacktriangle & \rightarrow & Pred
\end{array}
\]

\end_inset

Claramente 
\begin_inset Formula $\mathcal{G}$
\end_inset

 es una familia 
\begin_inset Formula $\{\square,\%,\blacktriangle\}$
\end_inset

-indexada de funciones.
 Notar que
\begin_inset Formula 
\[
\mathcal{G}=\{(\square,Suc),(\%,Suc),(\blacktriangle,Pred)\}
\]

\end_inset

Se tiene tambien por ejemplo que 
\begin_inset Formula $\mathcal{G}(\%)=Suc$
\end_inset

 por lo cual tambien es cierto que 
\begin_inset Formula $\mathcal{G}(\%)(22)=23$
\end_inset

,
 etc.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{2}$
\end_inset


\end_layout

\end_inset

Si 
\begin_inset Formula $\Sigma$
\end_inset

 es un alfabeto no vacio,
 la funcion
\begin_inset Formula 
\[
\begin{array}{rcl}
\mathcal{G}:\Sigma & \rightarrow & \{f:f\text{ es una funcion de }\Sigma^{\ast}\text{ en }\Sigma^{\ast}\}\\
a & \rightarrow & d_{a}
\end{array}
\]

\end_inset

es una familia 
\begin_inset Formula $\Sigma$
\end_inset

-indexada de funciones.
 Notar que
\begin_inset Formula 
\[
\mathcal{G}=\{(a,d_{a}):a\in\Sigma\}
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{3}$
\end_inset


\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\square,\%,\blacktriangle\}$
\end_inset

.
 Entonces 
\begin_inset Formula $\{(\square,Suc),(\%,p_{3}^{2,4}),(\blacktriangle,\emptyset)\}$
\end_inset

 es una familia 
\begin_inset Formula $\{\square,\%,\blacktriangle\}$
\end_inset

-indexada de funciones.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
NOTACION:
 Si 
\begin_inset Formula $\mathcal{G}$
\end_inset

 es una familia 
\begin_inset Formula $\Sigma$
\end_inset

-indexada de funciones,
 entonces para 
\begin_inset Formula $a\in\Sigma$
\end_inset

,
 escribiremos 
\begin_inset Formula $\mathcal{G}_{a}$
\end_inset

 en lugar de 
\begin_inset Formula $\mathcal{G}(a)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Ahora si podemos dar la definicion matematica precisa del primero de los dos casos de recursion primitiva sobre parametro alfabetico.
 Sea
\begin_inset Formula 
\[
f:S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\omega
\]

\end_inset

con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 conjuntos no vacios y sea 
\begin_inset Formula $\mathcal{G}$
\end_inset

 una familia 
\begin_inset Formula $\Sigma$
\end_inset

-indexada de funciones tal que
\begin_inset Formula 
\[
\mathcal{G}_{a}:\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times\Sigma^{\ast}\rightarrow\omega
\]

\end_inset

para cada 
\begin_inset Formula $a\in\Sigma$
\end_inset

.
 Definamos
\begin_inset Formula 
\[
R(f,\mathcal{G}):S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times\Sigma^{\ast}\rightarrow\omega
\]

\end_inset

de la siguiente manera
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(f,\mathcal{G})(\vec{x},\vec{\alpha},\varepsilon)=f(\vec{x},\vec{\alpha})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(f,\mathcal{G})(\vec{x},\vec{\alpha},\alpha a)=\mathcal{G}_{a}(R(f,\mathcal{G})(\vec{x},\vec{\alpha},\alpha),\vec{x},\vec{\alpha},\alpha)$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
Diremos que 
\begin_inset Formula $R(f,\mathcal{G})$
\end_inset

 es obtenida por 
\shape italic
recursion primitiva 
\shape default
a partir de 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $\mathcal{G}.$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notese que cuando 
\begin_inset Formula $n=m=0$
\end_inset

,
 se tiene que 
\begin_inset Formula $D_{f}=\{\Diamond\}$
\end_inset

 y (1) y (2) se transforman en
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(f,\mathcal{G})(\varepsilon)=f(\Diamond)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(f,\mathcal{G})(\alpha a)=\mathcal{G}_{a}(R(f,\mathcal{G})(\alpha),\alpha)$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 20:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,@,?\}$
\end_inset

.
 Encuentre 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $\mathcal{G}$
\end_inset

 tales que 
\begin_inset Formula $\lambda\alpha[\left\vert \alpha\right\vert ]=R(f,\mathcal{G})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 21:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,@,?\}$
\end_inset

.
 Encuentre 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $\mathcal{G}$
\end_inset

 tales que 
\begin_inset Formula $\lambda\alpha_{1}\alpha[\left\vert \alpha_{1}\right\vert +\left\vert \alpha\right\vert _{@}]=R(f,\mathcal{G})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 22:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma=\{@,\&\}$
\end_inset

.
 Se tiene que 
\begin_inset Formula $\lambda\alpha\left[\left\vert \alpha\right\vert \right]=R\left(C_{0}^{0,0},\{Suc\circ p_{1}^{1,1},Suc\circ p_{1}^{1,1}\}\right)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $R\left(p_{1}^{2,0},\{(@,p_{1}^{3,1}),(\&,p_{2}^{3,1})\}\right)=p_{1}^{2,1}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f$
\end_inset

 y cada 
\begin_inset Formula $\mathcal{G}_{a}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables,
 entonces 
\begin_inset Formula $R(f,\mathcal{G})$
\end_inset

 lo es.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 23:
\end_layout

\end_inset

Haga la prueba del lema anterior para el caso 
\begin_inset Formula $\Sigma=\{@,\blacktriangle\}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Recursion primitiva sobre variable alfabetica con valores alfabeticos
\end_layout

\begin_layout Standard
Supongamos 
\begin_inset Formula $\Sigma$
\end_inset

 es un alfabeto finito.
 Sea
\begin_inset Formula 
\[
f:S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\Sigma^{\ast}
\]

\end_inset

con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 conjuntos no vacios y sea 
\begin_inset Formula $\mathcal{G}$
\end_inset

 una familia 
\begin_inset Formula $\Sigma$
\end_inset

-indexada de funciones tal que
\begin_inset Formula 
\[
\mathcal{G}_{a}:S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times\Sigma^{\ast}\times\Sigma^{\ast}\rightarrow\Sigma^{\ast}
\]

\end_inset

para cada 
\begin_inset Formula $a\in\Sigma$
\end_inset

.
 Definamos
\begin_inset Formula 
\[
R(f,\mathcal{G}):S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times\Sigma^{\ast}\rightarrow\Sigma^{\ast}
\]

\end_inset

de la siguiente manera
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(f,\mathcal{G})(\vec{x},\vec{\alpha},\varepsilon)=f(\vec{x},\vec{\alpha})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(f,\mathcal{G})(\vec{x},\vec{\alpha},\alpha a)=\mathcal{G}_{a}(\vec{x},\vec{\alpha},\alpha,R(f,\mathcal{G})(\vec{x},\vec{\alpha},\alpha)).$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Diremos que 
\begin_inset Formula $R(f,\mathcal{G})$
\end_inset

 es obtenida por 
\shape italic
recursion primitiva 
\shape default
a partir de 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $\mathcal{G}$
\end_inset

.
 Notese que cuando 
\begin_inset Formula $n=m=0$
\end_inset

,
 se tiene que 
\begin_inset Formula $D_{f}=\{\Diamond\}$
\end_inset

 y (1) y (2) se transforman en
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $R(f,\mathcal{G})(\varepsilon)=f(\Diamond)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $R(f,\mathcal{G})(\alpha a)=\mathcal{G}_{a}(\alpha,R(f,\mathcal{G})(\alpha))$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 24:
\end_layout

\end_inset

Encuentre 
\begin_inset Formula $f$
\end_inset

 y 
\begin_inset Formula $\mathcal{G}$
\end_inset

 tales que 
\begin_inset Formula $\lambda\alpha_{1}\alpha[\alpha_{1}\alpha]=R(f,\mathcal{G})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 25:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\triangle,\blacktriangle\}$
\end_inset

.
 Diga que funcion conocida es 
\begin_inset Formula $R(C_{\varepsilon}^{0,1},\mathcal{G})$
\end_inset

,
 donde 
\begin_inset Formula $\mathcal{G}$
\end_inset

 es dada por 
\begin_inset Formula $\mathcal{G}_{\triangle}=d_{\triangle}\circ p_{3}^{0,3}$
\end_inset

 y 
\begin_inset Formula $\mathcal{G}_{\blacktriangle}=d_{\blacktriangle}\circ p_{3}^{0,3}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Dada 
\begin_inset Formula $\gamma\in\Sigma^{\ast}$
\end_inset

,
 definamos
\begin_inset Formula 
\[
\gamma^{R}=\left\{ \begin{array}{lll}
[\gamma]_{\left\vert \gamma\right\vert }[\gamma]_{\left\vert \gamma\right\vert -1}...[\gamma]_{1} &  & \text{si }\left\vert \gamma\right\vert \geq1\\
\varepsilon &  & \text{caso contrario}
\end{array}\right.
\]

\end_inset

La palabra 
\begin_inset Formula $\gamma^{R}$
\end_inset

 es llamada la 
\shape italic
resiproca
\shape default
 de 
\begin_inset Formula $\gamma$
\end_inset

.
 Para 
\begin_inset Formula $a\in\Sigma$
\end_inset

,
 definamos la funcion
\begin_inset Formula 
\[
\begin{array}{rcl}
I_{a}:\Sigma^{\ast} & \rightarrow & \Sigma^{\ast}\\
\alpha & \rightarrow & a\alpha
\end{array}
\]

\end_inset

Recordemos que 
\begin_inset Formula $\alpha^{0}=\varepsilon$
\end_inset

,
 para cada 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 por lo cual tenemos que 
\begin_inset Formula $D_{\lambda x\alpha\left[\alpha^{x}\right]}=\omega\times\Sigma^{\ast}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 26:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\triangle,\blacktriangle\}$
\end_inset

.
 Explique la forma en la que aplicando los constructores de composicion y recursion primitiva a las funciones del conjunto inicial se pueden obtener las siguientes funciones
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $I_{a}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda\alpha[\alpha^{R}]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda t\alpha[\alpha^{t}]$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 27:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma=\{\triangle,\blacktriangle\}$
\end_inset

.
 Entonces 
\begin_inset Formula $R(p_{1}^{0,1},\{(\triangle,p_{3}^{0,3}),(\blacktriangle,d_{\blacktriangle}\circ p_{3}^{0,3})\})(\triangle\blacktriangle,\triangle\blacktriangle)=\triangle\blacktriangle\blacktriangle\blacktriangle$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $R(p_{1}^{0,1},d_{\alpha}\circ p_{3}^{0,3})=\lambda\alpha_{1}\alpha[\alpha_{1}\alpha]$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
La prueba del siguiente lema es completamente analoga a la del lema anterior que fue dejada como ejercicio.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f$
\end_inset

 y cada 
\begin_inset Formula $\mathcal{G}_{a}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables,
 entonces 
\begin_inset Formula $R(f,\mathcal{G})$
\end_inset

 lo es.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas primitivas
\end_layout

\begin_layout Standard
Intuitivamente hablando ya sabemos que una funcion es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva primitiva si se puede obtener de las iniciales usando los constructores de composicion y recursion primitiva.
 Daremos ahora una definicion matematica de este concepto.
 Definamos los conjuntos 
\begin_inset Formula $\mathrm{PR}_{0}^{\Sigma}\subseteq\mathrm{PR}_{1}^{\Sigma}\subseteq\mathrm{PR}_{2}^{\Sigma}\subseteq...\subseteq\mathrm{PR}^{\Sigma}$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\[
\begin{array}{lll}
\mathrm{PR}_{0}^{\Sigma} & = & \left\{ Suc,Pred,C_{0}^{0,0},C_{\varepsilon}^{0,0}\right\} \cup\left\{ d_{a}:a\in\Sigma\right\} \cup\left\{ p_{j}^{n,m}:1\leq j\leq n+m\right\} \\
\mathrm{PR}_{k+1}^{\Sigma} & = & \mathrm{PR}_{k}^{\Sigma}\cup\left\{ f\circ[f_{1},...,f_{r}]:f,f_{1},...,f_{r}\in\mathrm{PR}_{k}^{\Sigma}\text{, }r\geq1\right\} \cup\\
 &  & \;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\left\{ R(f,\mathcal{G}):f\text{ y cada }\mathcal{G}_{a}\text{ pertenecen a }\mathrm{PR}_{k}^{\Sigma}\right\} \cup\\
 &  & \;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\left\{ R(f,g):f,g\in\mathrm{PR}_{k}^{\Sigma}\right\} \medskip\\
\mathrm{PR}^{\Sigma} & = & \bigcup_{k\geq0}\mathrm{PR}_{k}^{\Sigma}
\end{array}
\]

\end_inset

Una funcion es llamada 
\begin_inset Formula $\Sigma$
\end_inset

-
\shape italic
recursiva primitiva
\shape default
 (
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-p.r.
\shape default
) si pertenece a 
\begin_inset Formula $\mathrm{PR}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f\in\mathrm{PR}^{\Sigma}$
\end_inset

,
 entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 28:
\end_layout

\end_inset

Explique con palabras por que es cierta la proposicion anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Algunas funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas primitivas
\end_layout

\begin_layout Standard
En los siguientes cuatro lemas se prueba bien formalmente que varias funciones bien conocidas son 
\begin_inset Formula $\Sigma$
\end_inset

-primitivas recursivas.
 La mayoria de estas funciones ya fueron obtenidas usando los constructores de composicion y recursion primitiva,
 en los desarrollos anteriores o en los ejercicios.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $\emptyset\in\mathrm{PR}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $\lambda xy\left[x+y\right]\in\mathrm{PR}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset


\begin_inset Formula $\lambda xy\left[x.y\right]\in\mathrm{PR}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset


\begin_inset Formula $\lambda x\left[x!\right]\in\mathrm{PR}^{\Sigma}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (1) Notese que 
\begin_inset Formula $\emptyset=Pred\circ C_{0}^{0,0}\in\mathrm{PR}_{1}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Standard
(2) Notar que
\begin_inset Formula 
\begin{align*}
\lambda xy\left[x+y\right](0,x_{1}) & =x_{1}=p_{1}^{1,0}(x_{1})\\
\lambda xy\left[x+y\right](t+1,x_{1}) & =\lambda xy\left[x+y\right](t,x_{1})+1\\
 & =\left(Suc\circ p_{1}^{3,0}\right)\left(\lambda xy\left[x+y\right](t,x_{1}),t,x_{1}\right)
\end{align*}

\end_inset

lo cual implica que 
\begin_inset Formula $\lambda xy\left[x+y\right]=R\left(p_{1}^{1,0},Suc\circ p_{1}^{3,0}\right)\in\mathrm{PR}_{2}^{\Sigma}.$
\end_inset


\end_layout

\begin_layout Standard
(3) Primero note que
\begin_inset Formula 
\begin{align*}
C_{0}^{1,0}(0) & =C_{0}^{0,0}(\Diamond)\\
C_{0}^{1,0}(t+1) & =C_{0}^{1,0}(t)
\end{align*}

\end_inset

lo cual implica que 
\begin_inset Formula $C_{0}^{1,0}=R\left(C_{0}^{0,0},p_{1}^{2,0}\right)\in\mathrm{PR}_{1}^{\Sigma}.$
\end_inset

 Tambien note que
\begin_inset Formula 
\[
\lambda tx\left[t.x\right]=R\left(C_{0}^{1,0},\lambda xy\left[x+y\right]\circ\left[p_{1}^{3,0},p_{3}^{3,0}\right]\right),
\]

\end_inset

lo cual por (2) implica que 
\begin_inset Formula $\lambda tx\left[t.x\right]\in\mathrm{PR}_{4}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Standard
(4) Note que
\begin_inset Formula 
\begin{align*}
\lambda x\left[x!\right](0) & =1=C_{1}^{0,0}(\Diamond)\\
\lambda x\left[x!\right](t+1) & =\lambda x\left[x!\right](t).(t+1),
\end{align*}

\end_inset

lo cual implica que
\begin_inset Formula 
\[
\lambda x\left[x!\right]=R\left(C_{1}^{0,0},\lambda xy\left[x.y\right]\circ\left[p_{1}^{2,0},Suc\circ p_{2}^{2,0}\right]\right).
\]

\end_inset

Ya que 
\begin_inset Formula $C_{1}^{0,0}=$
\end_inset

 
\begin_inset Formula $Suc\circ C_{0}^{0,0}$
\end_inset

,
 tenemos que 
\begin_inset Formula $C_{1}^{0,0}\in\mathrm{PR}_{1}^{\Sigma}$
\end_inset

.
 Por (3),
 tenemos que
\begin_inset Formula 
\[
\lambda xy\left[x.y\right]\circ\left[p_{1}^{2,0},Suc\circ p_{2}^{2,0}\right]\in\mathrm{PR}_{5}^{\Sigma},
\]

\end_inset

obteniendo que 
\begin_inset Formula $\lambda x\left[x!\right]\in\mathrm{PR}_{6}^{\Sigma}$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Ahora consideraremos dos funciones las cuales son obtenidas naturalmente por recursion primitiva sobre variable alfabetica.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $\Sigma$
\end_inset

 es un alfabeto finito.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $\lambda\alpha\beta\left[\alpha\beta\right]\in\mathrm{PR}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset


\begin_inset Formula $\lambda\alpha\left[\left\vert \alpha\right\vert \right]\in\mathrm{PR}^{\Sigma}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a) Ya que
\begin_inset Formula 
\begin{align*}
\lambda\alpha\beta\left[\alpha\beta\right](\alpha_{1},\varepsilon) & =\alpha_{1}=p_{1}^{0,1}(\alpha_{1})\\
\lambda\alpha\beta\left[\alpha\beta\right](\alpha_{1},\alpha a) & =d_{a}(\lambda\alpha\beta\left[\alpha\beta\right](\alpha_{1},\alpha)),a\in\Sigma
\end{align*}

\end_inset

tenemos que 
\begin_inset Formula $\lambda\alpha\beta\left[\alpha\beta\right]=R\left(p_{1}^{0,1},\mathcal{G}\right)$
\end_inset

,
 donde 
\begin_inset Formula $\mathcal{G}_{a}=d_{a}\circ p_{3}^{0,3}$
\end_inset

,
 para cada 
\begin_inset Formula $a\in\Sigma$
\end_inset

.
\end_layout

\begin_layout Standard
(b) Ya que
\begin_inset Formula 
\begin{align*}
\lambda\alpha\left[\left\vert \alpha\right\vert \right](\varepsilon) & =0=C_{0}^{0,0}(\Diamond)\\
\lambda\alpha\left[\left\vert \alpha\right\vert \right](\alpha a) & =\lambda\alpha\left[\left\vert \alpha\right\vert \right](\alpha)+1
\end{align*}

\end_inset

tenemos que 
\begin_inset Formula $\lambda\alpha\left[\left\vert \alpha\right\vert \right]=R\left(C_{0}^{0,0},\mathcal{G}\right)$
\end_inset

,
 donde 
\begin_inset Formula $\mathcal{G}_{a}=$
\end_inset

 
\begin_inset Formula $Suc\circ p_{1}^{1,1}$
\end_inset

,
 para cada 
\begin_inset Formula $a\in\Sigma.$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Entonces 
\begin_inset Formula $C_{k}^{n,m},C_{\alpha}^{n,m}\in\mathrm{PR}^{\Sigma}$
\end_inset

,
 para cada 
\begin_inset Formula $n,m,k\geq0$
\end_inset

 y 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a) Note que 
\begin_inset Formula $C_{k+1}^{0,0}=$
\end_inset

 
\begin_inset Formula $Suc\circ C_{k}^{0,0}$
\end_inset

,
 lo cual implica 
\begin_inset Formula $C_{k}^{0,0}\in\mathrm{PR}_{k}^{\Sigma}$
\end_inset

,
 para 
\begin_inset Formula $k\geq0$
\end_inset

.
 Tambien note que 
\begin_inset Formula $C_{\alpha a}^{0,0}=d_{a}\circ C_{\alpha}^{0,0}$
\end_inset

,
 lo cual dice que 
\begin_inset Formula $C_{\alpha}^{0,0}\in\mathrm{PR}^{\Sigma}$
\end_inset

,
 para 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

.
 Para ver que 
\begin_inset Formula $C_{k}^{0,1}\in\mathrm{PR}^{\Sigma}$
\end_inset

 notar que
\begin_inset Formula 
\begin{align*}
C_{k}^{0,1}(\varepsilon) & =k=C_{k}^{0,0}(\Diamond)\\
C_{k}^{0,1}(\alpha a) & =C_{k}^{0,1}(\alpha)=p_{1}^{1,1}\left(C_{k}^{0,1}(\alpha),\alpha\right)
\end{align*}

\end_inset

lo cual implica que 
\begin_inset Formula $C_{k}^{0,1}=R\left(C_{k}^{0,0},\mathcal{G}\right)$
\end_inset

,
 con 
\begin_inset Formula $\mathcal{G}_{a}=p_{1}^{1,1}$
\end_inset

,
 
\begin_inset Formula $a\in\Sigma$
\end_inset

.
 En forma similar podemos ver que 
\begin_inset Formula $C_{k}^{1,0},C_{\alpha}^{1,0},C_{\alpha}^{0,1}\in\mathrm{PR}^{\Sigma}$
\end_inset

.
 Supongamos ahora que 
\begin_inset Formula $m>0$
\end_inset

.
 Entonces
\begin_inset Formula 
\begin{align*}
C_{k}^{n,m} & =C_{k}^{0,1}\circ p_{n+1}^{n,m}\\
C_{\alpha}^{n,m} & =C_{\alpha}^{0,1}\circ p_{n+1}^{n,m}
\end{align*}

\end_inset

de lo cual obtenemos que 
\begin_inset Formula $C_{k}^{n,m},C_{\alpha}^{n,m}\in\mathrm{PR}^{\Sigma}$
\end_inset

.
 El caso 
\begin_inset Formula $n>0$
\end_inset

 es similar.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $\lambda xy\left[x^{y}\right]\in\mathrm{PR}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset


\begin_inset Formula $\lambda t\alpha\left[\alpha^{t}\right]\in\mathrm{PR}^{\Sigma}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a) Note que
\begin_inset Formula 
\[
\lambda tx\left[x^{t}\right]=R\left(C_{1}^{1,0},\lambda xy\left[x.y\right]\circ\left[p_{1}^{3,0},p_{3}^{3,0}\right]\right)\in\mathrm{PR}^{\Sigma}.
\]

\end_inset

O sea que 
\begin_inset Formula $\lambda xy\left[x^{y}\right]=\lambda tx\left[x^{t}\right]\circ\left[p_{2}^{2,0},p_{1}^{2,0}\right]\in\mathrm{PR}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Standard
(b) Note que
\begin_inset Formula 
\[
\lambda t\alpha\left[\alpha^{t}\right]=R\left(C_{\varepsilon}^{0,1},\lambda\alpha\beta\left[\alpha\beta\right]\circ\left[p_{3}^{1,2},p_{2}^{1,2}\right]\right)\in\mathrm{PR}^{\Sigma}.
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 29:
\end_layout

\end_inset

Si 
\begin_inset Formula $\leq$
\end_inset

 es un orden total sobre un alfabeto no vacio 
\begin_inset Formula $\Sigma$
\end_inset

,
 entonces 
\begin_inset Formula $s^{\leq}$
\end_inset

,
 
\begin_inset Formula $\#^{\leq}$
\end_inset

 y 
\begin_inset Formula $\ast^{\leq}$
\end_inset

 pertenecen a 
\begin_inset Formula $\mathrm{PR}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 30:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\$,?,@,\forall,\rightarrow,(\}$
\end_inset

 y sea 
\begin_inset Formula $S=\{\$,?\}^{\ast}$
\end_inset

.
 Pruebe que
\begin_inset Formula 
\[
\begin{array}{rcl}
\chi_{S}^{\Sigma^{\ast}}:\Sigma^{\ast} & \rightarrow & \omega\\
\alpha & \rightarrow & \left\{ \begin{array}{cc}
1 & \ \ \ \text{si }\alpha\in S\\
0 & \ \ \ \text{si }\alpha\notin S
\end{array}\right.
\end{array}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Dados 
\begin_inset Formula $x,y\in\omega$
\end_inset

,
 definamos
\begin_inset Formula 
\[
x\dot{-}y=\max(x-y,0).
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $\lambda xy\left[x\dot{-}y\right]\in\mathrm{PR}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset


\begin_inset Formula $\lambda xy\left[\max(x,y)\right]\in\mathrm{PR}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(c)
\end_layout

\end_inset


\begin_inset Formula $\lambda xy\left[x=y\right]\in\mathrm{PR}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(d)
\end_layout

\end_inset


\begin_inset Formula $\lambda xy\left[x\leq y\right]\in\mathrm{PR}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(e)
\end_layout

\end_inset


\begin_inset Formula $\lambda\alpha\beta\left[\alpha=\beta\right]\in\mathrm{PR}^{\Sigma}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a) Primero notar que 
\begin_inset Formula $\lambda x\left[x\dot{-}1\right]=R\left(C_{0}^{0,0},p_{2}^{2,0}\right)\in\mathrm{PR}^{\Sigma}.$
\end_inset

 Tambien note que
\begin_inset Formula 
\[
\lambda tx\left[x\dot{-}t\right]=R\left(p_{1}^{1,0},\lambda x\left[x\dot{-}1\right]\circ p_{1}^{3,0}\right)\in\mathrm{PR}^{\Sigma}.
\]

\end_inset

O sea que 
\begin_inset Formula $\lambda xy\left[x\dot{-}y\right]=\lambda tx\left[x\dot{-}t\right]\circ\left[p_{2}^{2,0},p_{1}^{2,0}\right]\in\mathrm{PR}^{\Sigma}.$
\end_inset


\end_layout

\begin_layout Standard
(b) Note que 
\begin_inset Formula $\lambda xy\left[\max(x,y)\right]=\lambda xy\left[x+(y\dot{-}x)\right].$
\end_inset


\end_layout

\begin_layout Standard
(c) Note que 
\begin_inset Formula $\lambda xy\left[x=y\right]=\lambda xy\left[1\dot{-}((x\dot{-}y)+(y\dot{-}x))\right].$
\end_inset


\end_layout

\begin_layout Standard
(d) Note que 
\begin_inset Formula $\lambda xy\left[x\leq y\right]=\lambda xy\left[1\dot{-}(x\dot{-}y)\right].$
\end_inset


\end_layout

\begin_layout Standard
(e) Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma.$
\end_inset

 Ya que
\begin_inset Formula 
\[
\alpha=\beta\text{ sii }\#^{\leq}(\alpha)=\#^{\leq}(\beta)
\]

\end_inset

tenemos que
\begin_inset Formula 
\[
\lambda\alpha\beta\left[\alpha=\beta\right]=\lambda xy\left[x=y\right]\circ\left[\#^{\leq}\circ p_{1}^{0,2},\#^{\leq}\circ p_{2}^{0,2}\right]
\]

\end_inset

lo cual nos dice que 
\begin_inset Formula $\lambda\alpha\beta\left[\alpha=\beta\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 31:
\end_layout

\end_inset

Complete las pruebas de (b),(c),(d) y (e) del lema anterior
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 32:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\lambda x[x$
\end_inset

 es par
\begin_inset Formula $]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda xyz\alpha\beta\gamma[x.y+\max(x,\left\vert \alpha\right\vert )^{\left\vert \beta\right\vert }]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda x\alpha\left[x=\left\vert \alpha\right\vert \right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda xy\alpha\beta\left[\alpha^{x}=\beta\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Operaciones logicas entre predicados
\end_layout

\begin_layout Standard
Dados predicados 
\begin_inset Formula $P:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 y 
\begin_inset Formula $Q:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

,
 con el mismo dominio,
 definamos nuevos predicados 
\begin_inset Formula $(P\vee Q)$
\end_inset

,
 
\begin_inset Formula $(P\wedge Q)$
\end_inset

 y 
\begin_inset Formula $\lnot P$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\begin{align*}
 & \begin{array}{rll}
(P\vee Q):S & \rightarrow & \omega\\
(\vec{x},\vec{\alpha}) & \rightarrow & \left\{ \begin{array}{lll}
1 &  & \text{si }P(\vec{x},\vec{\alpha})=1\text{ o }Q(\vec{x},\vec{\alpha})=1\\
0 &  & \text{caso contrario}
\end{array}\right.
\end{array}\\
 & \begin{array}{rll}
(P\wedge Q):S & \rightarrow & \omega\\
(\vec{x},\vec{\alpha}) & \rightarrow & \left\{ \begin{array}{lll}
1 &  & \text{si }P(\vec{x},\vec{\alpha})=1\text{ y }Q(\vec{x},\vec{\alpha})=1\\
0 &  & \text{caso contrario}
\end{array}\right.
\end{array}\\
 & \begin{array}{rll}
\lnot P:S & \rightarrow & \omega\\
(\vec{x},\vec{\alpha}) & \rightarrow & \left\{ \begin{array}{lll}
1 &  & \text{si }P(\vec{x},\vec{\alpha})=0\\
0 &  & \text{si }P(\vec{x},\vec{\alpha})=1
\end{array}\right.
\end{array}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "boolean op"

\end_inset

Si 
\begin_inset Formula $P:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 y 
\begin_inset Formula $Q:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 son predicados 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 entonces 
\begin_inset Formula $(P\vee Q)$
\end_inset

,
 
\begin_inset Formula $(P\wedge Q)$
\end_inset

 y 
\begin_inset Formula $\lnot P$
\end_inset

 lo son tambien.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Note que
\begin_inset Formula 
\begin{align*}
\lnot P & =\lambda xy\left[x\dot{-}y\right]\circ\left[C_{1}^{n,m},P\right]\\
(P\wedge Q) & =\lambda xy\left[x.y\right]\circ[P,Q]\\
(P\vee Q) & =\lnot(\lnot P\wedge\lnot Q)
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 33:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $P_{1},P_{2},P_{3}$
\end_inset

 son predicados 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 y 
\begin_inset Formula $D_{P_{1}}=D_{P_{2}}=D_{P_{3}}$
\end_inset

,
 entonces el predicado 
\begin_inset Formula $(P_{1}\vee P_{2}\wedge P_{3})$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Entonces 
\begin_inset Formula $\lambda x\alpha\beta\left[x=\left\vert \alpha\right\vert \wedge\alpha=\beta\right]=(\lambda x\alpha\left[x=\left\vert \alpha\right\vert \right]\wedge\lambda\alpha\beta\left[\alpha=\beta\right])$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Entonces 
\begin_inset Formula $(\lambda x\left[x=1\right]\wedge\lambda\alpha\left[\alpha=\varepsilon\right])(2,\varepsilon)=0$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $S,T\subseteq\omega$
\end_inset

,
 entonces 
\begin_inset Formula $\chi_{S\times T}^{\omega\times\omega}=(\chi_{S}^{\omega}\wedge\chi_{T}^{\omega})$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-recursivos primitivos
\end_layout

\begin_layout Standard
Un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-mixto 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es llamado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-recursivo primitivo
\shape default
 si su funcion caracteristica 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Notese que 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}=\lambda\vec{x}\vec{\alpha}[(\vec{x},\vec{\alpha})\in S]$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 34:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

.
 Pruebe que los siguientes conjuntos son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\Sigma^{\ast}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{(x,y)\in\omega^{2}:x=y\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{(x,\alpha)\in\omega\times\Sigma^{\ast}:x=\left\vert \alpha\right\vert \}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{x\in\omega:x$
\end_inset

 es par
\begin_inset Formula $\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\{(x,y,\alpha,\beta,\gamma)\in\omega^{2}\times\Sigma^{\ast3}:x\leq\left\vert \gamma\right\vert \}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "union"

\end_inset

Si 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 entonces 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

,
 
\begin_inset Formula $S_{1}\cap S_{2}$
\end_inset

 y 
\begin_inset Formula $S_{1}-S_{2}$
\end_inset

 lo son.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Note que
\begin_inset Formula 
\begin{align*}
\chi_{S_{1}\cup S_{2}}^{\omega^{n}\times\Sigma^{\ast m}} & =(\chi_{S_{1}}^{\omega^{n}\times\Sigma^{\ast m}}\vee\chi_{S_{2}}^{\omega^{n}\times\Sigma^{\ast m}})\\
\chi_{S_{1}\cap S_{2}}^{\omega^{n}\times\Sigma^{\ast m}} & =(\chi_{S_{1}}^{\omega^{n}\times\Sigma^{\ast m}}\wedge\chi_{S_{2}}^{\omega^{n}\times\Sigma^{\ast m}})\\
\chi_{S_{1}-S_{2}}^{\omega^{n}\times\Sigma^{\ast m}} & =\lambda xy\left[x\dot{-}y\right]\circ\left[\chi_{S_{1}}^{\omega^{n}\times\Sigma^{\ast m}},\chi_{S_{2}}^{\omega^{n}\times\Sigma^{\ast m}}\right]
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 35:
\end_layout

\end_inset

Si 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es finito,
 entonces 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 Haga el caso 
\begin_inset Formula $n=m=1$
\end_inset

.
 (Hint:
 haga el caso en que 
\begin_inset Formula $S$
\end_inset

 tiene un solo elemento y luego aplique el lema anterior).
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 36:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
\end_layout

\begin_deeper
\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $\Sigma$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $\Sigma^{\ast}-\{\varepsilon\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $\Sigma^{\ast}-(\{\varepsilon\}\cup\Sigma)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $\omega-\{0,1\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $\{(x,y,\alpha,\beta,\gamma)\in\omega^{2}\times\Sigma^{\ast3}:\alpha\neq\varepsilon\vee x\leq\left\vert \gamma\right\vert \}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $\{(x,\alpha,\beta):\left\vert \alpha\right\vert >6\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
El siguiente lema caracteriza cuando un conjunto rectangular es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "rectangulos pr"

\end_inset

Supongamos 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

,
 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 son conjuntos no vacios.
 Entonces 
\begin_inset Formula $S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 sii 
\begin_inset Formula $S_{1},...,S_{n},L_{1},...,L_{m}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 37:
\end_layout

\end_inset

(S) Haga la prueba del lema anterior para el caso de 
\begin_inset Formula $n=m=1$
\end_inset

 (en el apunte esta la prueba general) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Dada una funcion 
\begin_inset Formula $f$
\end_inset

 y un conjunto 
\begin_inset Formula $S\subseteq D_{f}$
\end_inset

,
 usaremos 
\begin_inset Formula $f|_{S}$
\end_inset

 para denotar la 
\shape italic
restriccion
\shape default
 de 
\begin_inset Formula $f$
\end_inset

 al conjunto 
\begin_inset Formula $S$
\end_inset

,
 i.e.
 
\begin_inset Formula $f|_{S}=f\cap(S\times I_{f})$
\end_inset

.
 Notese que 
\begin_inset Formula $f|_{S}$
\end_inset

 es la funcion dada por
\begin_inset Formula 
\begin{align*}
D_{f|_{S}} & =S\\
f|_{S}(e) & =f(e)\text{, para cada }e\in S
\end{align*}

\end_inset

Notese que cualesquiera sea la funcion 
\begin_inset Formula $f$
\end_inset

 tenemos que 
\begin_inset Formula $f|_{\emptyset}=\emptyset$
\end_inset

 y 
\begin_inset Formula $f|_{D_{f}}=f$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "restriccion"

\end_inset

Supongamos 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 donde 
\begin_inset Formula $O\in\{\omega,\Sigma^{\ast}\}.$
\end_inset

 Si 
\begin_inset Formula $S\subseteq D_{f}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 entonces 
\begin_inset Formula $f|_{S}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $O=\Sigma^{\ast}$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
f|_{S}=\lambda x\alpha\left[\alpha^{x}\right]\circ\left[Suc\circ Pred\circ\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}},f\right]
\]

\end_inset

lo cual nos dice que 
\begin_inset Formula $f|_{S}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 El caso 
\begin_inset Formula $O=\omega$
\end_inset

 es similar usando 
\begin_inset Formula $\lambda xy\left[x^{y}\right]$
\end_inset

 en lugar de 
\begin_inset Formula $\lambda x\alpha\left[\alpha^{x}\right]$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Usando el lema anterior en combinacion con el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "boolean op"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 podemos ver que muchos predicados usuales son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Por ejemplo sea
\begin_inset Formula 
\[
P=\lambda x\alpha\beta\gamma\left[x=\left\vert \gamma\right\vert \wedge\alpha=\gamma^{Pred(\left\vert \beta\right\vert )}\right].
\]

\end_inset

Notese que
\begin_inset Formula 
\[
D_{P}=\omega\times\Sigma^{\ast}\times(\Sigma^{\ast}-\{\varepsilon\})\times\Sigma^{\ast}
\]

\end_inset

Ademas 
\begin_inset Formula $D_{P}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 ya que
\begin_inset Formula 
\[
\chi_{D_{P}}^{\omega\times\Sigma^{\ast3}}=\lnot\lambda\alpha\beta\left[\alpha=\beta\right]\circ\left[p_{3}^{1,3},C_{\varepsilon}^{1,3}\right]
\]

\end_inset

Tambien note que los predicados
\begin_inset Formula 
\begin{align*}
P_{1} & =\lambda x\alpha\beta\gamma\left[x=\left\vert \gamma\right\vert \right]\\
P_{2} & =\lambda x\alpha\beta\gamma\left[\alpha=\gamma^{Pred(\left\vert \beta\right\vert )}\right]
\end{align*}

\end_inset

son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 ya que pueden obtenerse componiendo funciones 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Un error seria pensar que 
\begin_inset Formula $P=(P_{1}\wedge P_{2})$
\end_inset

 ya que 
\begin_inset Formula $P_{1}$
\end_inset

 y 
\begin_inset Formula $P_{2}$
\end_inset

 tienen dominios distintos por lo cual no esta definido 
\begin_inset Formula $(P_{1}\wedge P_{2})$
\end_inset

.
 Sin envargo tenemos que 
\begin_inset Formula $P=(P_{1}|_{D_{P}}\wedge P_{2})$
\end_inset

,
 lo cual nos dice que 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 ya que 
\begin_inset Formula $P_{1}|_{D_{P}}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 por el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "restriccion"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 y por lo tanto podemos aplicar el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "boolean op"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 38:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

.
 Sea 
\begin_inset Formula $P=\lambda xy\alpha\beta\gamma\left[Pred(Pred(\left\vert \beta\right\vert ))\neq6\wedge\alpha^{x}=\beta\right]$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Encuentre por definicion de notacion lambda el dominio de 
\begin_inset Formula $P$
\end_inset


\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Aceptaremos sin prueba el siguiente resultado (ver el apunte por una prueba)
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "extension"

\end_inset

Sean 
\begin_inset Formula $O\in\{\omega,\Sigma^{\ast}\}$
\end_inset

 y 
\begin_inset Formula $n,m\in\omega$
\end_inset

.
 Si 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 entonces existe una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset Formula $\bar{f}:\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

,
 tal que 
\begin_inset Formula $f=\bar{f}|_{D_{f}}$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Ahora podemos probar una proposicion muy importante.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "caract-dominios"

\end_inset

Un conjunto 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 sii 
\begin_inset Formula $S$
\end_inset

 es el dominio de alguna funcion 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\begin_inset Formula $.$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Supongamos que 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
\end_layout

\begin_layout Standard
(
\begin_inset Formula $\Rightarrow$
\end_inset

) Note que 
\begin_inset Formula $S=D_{Pred\circ\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}}$
\end_inset

.
\end_layout

\begin_layout Standard
(
\begin_inset Formula $\Leftarrow$
\end_inset

) Probaremos por induccion en 
\begin_inset Formula $k$
\end_inset

 que 
\begin_inset Formula $D_{F}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 para cada 
\begin_inset Formula $F\in\mathrm{PR}_{k}^{\Sigma}.$
\end_inset

 El caso 
\begin_inset Formula $k=0$
\end_inset

 es facil
\begin_inset Formula $.$
\end_inset

 Supongamos el resultado vale para un 
\begin_inset Formula $k$
\end_inset

 fijo y supongamos 
\begin_inset Formula $F\in\mathrm{PR}_{k+1}^{\Sigma}.$
\end_inset

 Veremos entonces que 
\begin_inset Formula $D_{F}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Hay varios casos.
 Consideremos primero el caso en que 
\begin_inset Formula $F=R(f,g)$
\end_inset

,
 donde
\begin_inset Formula 
\begin{align*}
f & :S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\Sigma^{\ast}\\
g & :\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times\Sigma^{\ast}\rightarrow\Sigma^{\ast},
\end{align*}

\end_inset

con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 conjuntos no vacios y 
\begin_inset Formula $f,g\in\mathrm{PR}_{k}^{\Sigma}$
\end_inset

.
 Notese que por definicion de 
\begin_inset Formula $R(f,g)$
\end_inset

,
 tenemos que
\begin_inset Formula 
\[
D_{F}=\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}.
\]

\end_inset

Por hipotesis inductiva tenemos que 
\begin_inset Formula $D_{f}=S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 lo cual por el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "rectangulos pr"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que los conjuntos 
\begin_inset Formula $S_{1},...,S_{n}$
\end_inset

,
 
\begin_inset Formula $L_{1},...,L_{m}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Ya que 
\begin_inset Formula $\omega$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "rectangulos pr"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que 
\begin_inset Formula $D_{F}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Standard
Los otros casos de recursion primitiva son dejados al lector.
\end_layout

\begin_layout Standard
Supongamos ahora que 
\begin_inset Formula $F=g\circ[g_{1},...,g_{r}]$
\end_inset

 con 
\begin_inset Formula $g,g_{1},...,g_{r}\in\mathrm{PR}_{k}^{\Sigma}$
\end_inset

.
 Si 
\begin_inset Formula $F=\emptyset$
\end_inset

,
 entonces es claro que 
\begin_inset Formula $D_{F}=\emptyset$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Supongamos entonces que 
\begin_inset Formula $F$
\end_inset

 no es la funcion 
\begin_inset Formula $\emptyset$
\end_inset

.
 Tenemos entonces que 
\begin_inset Formula $r$
\end_inset

 es de la forma 
\begin_inset Formula $n+m$
\end_inset

 y
\begin_inset Formula 
\begin{align*}
g & :D_{g}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O\\
g_{i} & :D_{g_{i}}\subseteq\omega^{k}\times\Sigma^{\ast l}\rightarrow\omega\text{, }i=1,...,n\\
g_{i} & :D_{g_{i}}\subseteq\omega^{k}\times\Sigma^{\ast l}\rightarrow\Sigma^{\ast},i=n+1,...,n+m
\end{align*}

\end_inset

con 
\begin_inset Formula $O\in\{\omega,\Sigma^{\ast}\}$
\end_inset

 y 
\begin_inset Formula $k,l\in\omega$
\end_inset

.
 Por Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "extension"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 hay funciones 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset Formula $\bar{g}_{1},...,\bar{g}_{n+m}$
\end_inset

 las cuales son 
\begin_inset Formula $\Sigma$
\end_inset

-totales y cumplen
\begin_inset Formula 
\[
g_{i}=\bar{g}_{i}|_{D_{g_{i}}}\text{, para }i=1,...,n+m.
\]

\end_inset

Por hipotesis inductiva los conjuntos 
\begin_inset Formula $D_{g}$
\end_inset

,
 
\begin_inset Formula $D_{g_{i}}$
\end_inset

,
 
\begin_inset Formula $i=1,...,n+m$
\end_inset

,
 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 y por lo tanto
\begin_inset Formula 
\[
S=\bigcap_{i=1}^{n+m}D_{g_{i}}
\]

\end_inset

lo es.
 Notese que
\begin_inset Formula 
\[
\chi_{D_{F}}^{\omega^{k}\times\Sigma^{\ast l}}=(\chi_{D_{g}}^{\omega^{n}\times\Sigma^{\ast m}}\circ\left[\bar{g}_{1},...,\bar{g}_{n+m}\right]\wedge\chi_{S}^{\omega^{k}\times\Sigma^{\ast l}})
\]

\end_inset

lo cual nos dice que 
\begin_inset Formula $D_{F}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Lema de division por casos para funciones 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Standard
Una observacion interesante es que si 
\begin_inset Formula $f_{i}:D_{f_{i}}\rightarrow O$
\end_inset

,
 
\begin_inset Formula $i=1,...,k$
\end_inset

,
 son funciones tales que 
\begin_inset Formula $D_{f_{i}}\cap D_{f_{j}}=\emptyset$
\end_inset

 para 
\begin_inset Formula $i\neq j$
\end_inset

,
 entonces 
\begin_inset Formula $f_{1}\cup...\cup f_{k}$
\end_inset

 es la funcion
\begin_inset Formula 
\[
\begin{array}{rll}
D_{f_{1}}\cup...\cup D_{f_{k}} & \rightarrow & O\\
e & \rightarrow & \left\{ \begin{array}{clc}
f_{1}(e) &  & \text{si }e\in D_{f_{1}}\\
\vdots &  & \vdots\\
f_{k}(e) &  & \text{si }e\in D_{f_{k}}
\end{array}\right.
\end{array}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "dpc"

\end_inset

Sean 
\begin_inset Formula $O\in\{\omega,\Sigma^{\ast}\}$
\end_inset

 y 
\begin_inset Formula $n,m\in\omega$
\end_inset

.
 Supongamos 
\begin_inset Formula $f_{i}:D_{f_{i}}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

,
 
\begin_inset Formula $i=1,...,k$
\end_inset

,
 son funciones 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 tales que 
\begin_inset Formula $D_{f_{i}}\cap D_{f_{j}}=\emptyset$
\end_inset

 para 
\begin_inset Formula $i\neq j.$
\end_inset

 Entonces 
\begin_inset Formula $f_{1}\cup...\cup f_{k}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $O=\Sigma^{\ast}$
\end_inset

 y 
\begin_inset Formula $k=2$
\end_inset

.
 Sean
\begin_inset Formula 
\[
\bar{f}_{i}:\omega^{n}\times\Sigma^{\ast m}\rightarrow\Sigma^{\ast},i=1,2,
\]

\end_inset

funciones 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 tales que 
\begin_inset Formula $\bar{f}_{i}|_{D_{f_{i}}}=f_{i}$
\end_inset

,
 
\begin_inset Formula $i=1,2$
\end_inset

 (Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "extension"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

)
\begin_inset Formula $.$
\end_inset

 Por Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "caract-dominios"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 los conjuntos 
\begin_inset Formula $D_{f_{1}}$
\end_inset

 y 
\begin_inset Formula $D_{f_{2}}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 y por lo tanto lo es 
\begin_inset Formula $D_{f_{1}}\cup D_{f_{2}}$
\end_inset

.
 Ya que
\begin_inset Formula 
\[
f_{1}\cup f_{2}=\left(\lambda\alpha\beta\left[\alpha\beta\right]\circ\left[\lambda x\alpha\left[\alpha^{x}\right]\circ\left[\chi_{D_{f_{1}}}^{\omega^{n}\times\Sigma^{\ast m}},\bar{f}_{1}\right],\lambda x\alpha\left[\alpha^{x}\right]\circ\left[\chi_{D_{f_{2}}}^{\omega^{n}\times\Sigma^{\ast m}},\bar{f}_{2}\right]\right]\right)|_{D_{f_{1}}\cup D_{f_{2}}}
\]

\end_inset

tenemos que 
\begin_inset Formula $f_{1}\cup f_{2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Standard
El caso 
\begin_inset Formula $k>2$
\end_inset

 puede probarse por induccion ya que
\begin_inset Formula 
\[
f_{1}\cup...\cup f_{k}=(f_{1}\cup...\cup f_{k-1})\cup f_{k}.
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
CONSEJO
\begin_inset space \space{}
\end_inset

IMPORTANTE:
 Si uno quiere usar el lema de division por casos para probar que una funcion 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 entonces lo primero que hay que hacer,
 antes de ver que algo sea 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 o no,
 es (a lo mariposa) definir correctamente funciones 
\begin_inset Formula $f_{1},...,f_{k}$
\end_inset

 tales que 
\begin_inset Formula $D_{f_{i}}\cap D_{f_{j}}=\emptyset$
\end_inset

 para 
\begin_inset Formula $i\neq j$
\end_inset

 y ademas 
\begin_inset Formula $f_{1}\cup...\cup f_{k}=f$
\end_inset

.
 Consejos para encontrar dichas funciones:
\end_layout

\begin_layout Enumerate
Determinar el 
\begin_inset Formula $k$
\end_inset

,
 es decir,
 
\begin_inset Formula $k$
\end_inset

 es justamente la cantidad de 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

casos
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 en la descripcion de 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Enumerate
Para cada 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

caso
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 de la descripcion de 
\begin_inset Formula $f$
\end_inset

,
 asociar un subconjunto del dominio de 
\begin_inset Formula $f$
\end_inset

 el cual sea justamente definido por la propiedad correspondiente a ese caso.
 Ojo que dijimos subconjunto de 
\begin_inset Formula $D_{f}$
\end_inset

,
 no confundir los tipos!!
 (a veces los casos se describen usando no todas las variables de las cuales depende la funcion)
\end_layout

\begin_layout Enumerate
Notar que los subconjuntos 
\begin_inset Formula $S_{1},...,S_{k}$
\end_inset

 asi definidos deben ser disjuntos de a pares y unidos deben dar el dominio de 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Enumerate
Para cada 
\begin_inset Formula $i$
\end_inset

 defina 
\begin_inset Formula $f_{i}$
\end_inset

 de la siguiente manera:
\end_layout

\begin_deeper
\begin_layout Enumerate
dominio de 
\begin_inset Formula $f_{i}=S_{i}$
\end_inset


\end_layout

\begin_layout Enumerate
regla de 
\begin_inset Formula $f_{i}$
\end_inset

 dada por la regla que describe 
\begin_inset Formula $f$
\end_inset

 para el caso 
\begin_inset Formula $i$
\end_inset

-esimo 
\end_layout

\end_deeper
\begin_layout Enumerate
En general suele suceder que 
\begin_inset Formula $f_{i}$
\end_inset

 es la restriccion a 
\begin_inset Formula $S_{i}$
\end_inset

 de una funcion con dominio mas amplio y se prueba entonces que tanto dicha funcion como 
\begin_inset Formula $S_{i}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 resultando asi que 
\begin_inset Formula $f_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 38,3:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\$\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}{rcl}
f:\omega\times\Sigma^{\ast} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & \left\{ \begin{array}{lc}
\left\vert \alpha\right\vert .x^{2} & \ \ \ \ \ \ \text{si }x+\left\vert \alpha\right\vert \text{ es impar}\\
0 & \ \ \text{si }x+\left\vert \alpha\right\vert \text{ es par}
\end{array}\right.
\end{array}
\]

\end_inset

Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 38,6:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\$\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}{rcl}
f:\{10,11,17\}\times\Sigma^{+} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & \left\{ \begin{array}{lc}
Pred(x) & \ \ \ \ \text{si }x\text{ es impar}\\
\left\vert \alpha\right\vert  & \text{si }x\text{ es par}
\end{array}\right.
\end{array}
\]

\end_inset

Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 39:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\$\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}{rcl}
f:\mathbf{N}\times\Sigma^{+} & \rightarrow & \omega\\
(x,\alpha) & \rightarrow & \left\{ \begin{array}{lc}
x^{2} & \ \ \text{si }x+\left\vert \alpha\right\vert \text{ es par}\\
0 & \ \ \ \ \ \ \text{si }x+\left\vert \alpha\right\vert \text{ es impar}
\end{array}\right.
\end{array}
\]

\end_inset

Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 40:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\$\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}{rcl}
f:\{(x,y,\alpha):x\leq y\} & \rightarrow & \omega\\
(x,y,\alpha) & \rightarrow & \left\{ \begin{array}{cc}
x^{2} & \ \ \ \text{si }\left\vert \alpha\right\vert \leq y\\
0 & \ \ \ \text{si }\left\vert \alpha\right\vert >y
\end{array}\right.
\end{array}
\]

\end_inset

Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 (Explicado en video colgado en granlogico.com)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 41:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!,\%\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}{rcl}
f:\{1,2,3,4,5\}\times\mathbf{N}\times\{@,\%\}^{\ast} & \rightarrow & \Sigma^{\ast}\\
(x,y,\alpha) & \rightarrow & \left\{ \begin{array}{ll}
\alpha^{2} & \ \ \ \text{si }\alpha=@@\\
!!! & \ \ \ \text{si }\alpha\neq@@\wedge\left\vert \alpha\right\vert >y\\
\alpha^{x+y} & \ \ \ \text{si }\alpha\neq@@\wedge\left\vert \alpha\right\vert \leq y
\end{array}\right.
\end{array}
\]

\end_inset

Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 41,5:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!,\%\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}{rcl}
f:\mathbf{N}\times\{@,\%\}^{\ast}\times\{@,!,\%\}^{+} & \rightarrow & \omega\\
(x,\alpha,\beta) & \rightarrow & \left\{ \begin{array}{ll}
Pred(\left\vert \alpha\right\vert ) & \ \ \ \text{si }\left\vert \alpha\right\vert >2\text{ y }x\geq1\\
\left\vert \beta\right\vert  & \ \ \ \text{si }\left\vert \alpha\right\vert \leq2\text{ o }x=0
\end{array}\right.
\end{array}
\]

\end_inset

Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 42:
\end_layout

\end_inset

Sea 
\begin_inset Formula $F:\omega\rightarrow\omega$
\end_inset

 dada por
\begin_inset Formula 
\begin{align*}
F(0) & =2\\
F(1) & =2^{2}\\
F(2) & =(2^{2})^{3}\\
F(3) & =((2^{2})^{3})^{2}\\
F(4) & =(((2^{2})^{3})^{2})^{3}\\
 & \vdots
\end{align*}

\end_inset

Pruebe que 
\begin_inset Formula $F$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Usaremos el lema de division por casos para probar que la funcion 
\begin_inset Formula $\lambda i\alpha\left[[\alpha]_{i}\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Recordemos que dados 
\begin_inset Formula $i\in\omega$
\end_inset

 y 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 definimos
\begin_inset Formula 
\[
\left[\alpha\right]_{i}=\left\{ \begin{array}{lll}
i\text{-esimo elemento de }\alpha &  & \text{si }1\leq i\leq\left\vert \alpha\right\vert \\
\varepsilon &  & \text{caso contrario}
\end{array}\right.
\]

\end_inset

Notese que 
\begin_inset Formula $D_{\lambda i\alpha\left[[\alpha]_{i}\right]}=\omega\times\Sigma^{\ast}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset Formula $\lambda i\alpha\left[[\alpha]_{i}\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

.
 Note que
\begin_inset Formula 
\begin{align*}
[\varepsilon]_{i} & =\varepsilon\\{}
[\alpha@]_{i} & =\left\{ \begin{array}{lll}
[\alpha]_{i} &  & \text{si }i\neq\left\vert \alpha\right\vert +1\\
@ &  & \text{si }i=\left\vert \alpha\right\vert +1
\end{array}\right.\\{}
[\alpha!]_{i} & =\left\{ \begin{array}{lll}
[\alpha]_{i} &  & \text{si }i\neq\left\vert \alpha\right\vert +1\\
! &  & \text{si }i=\left\vert \alpha\right\vert +1
\end{array}\right.
\end{align*}

\end_inset

lo cual dice que 
\begin_inset Formula $\lambda i\alpha\left[[\alpha]_{i}\right]=R\left(C_{\varepsilon}^{1,0},\mathcal{G}\right)$
\end_inset

,
 donde 
\begin_inset Formula $\mathcal{G}_{a}:\omega\times\Sigma^{\ast}\times\Sigma^{\ast}\rightarrow\Sigma^{\ast}$
\end_inset

 es dada por
\begin_inset Formula 
\[
\mathcal{G}_{a}(i,\alpha,\zeta)=\left\{ \begin{array}{lll}
\zeta &  & \text{si }i\neq\left\vert \alpha\right\vert +1\\
a &  & \text{si }i=\left\vert \alpha\right\vert +1
\end{array}\right.
\]

\end_inset

para cada 
\begin_inset Formula $a\in\Sigma$
\end_inset

.
 O sea que solo resta probar que cada 
\begin_inset Formula $\mathcal{G}_{a}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Veamos que 
\begin_inset Formula $\mathcal{G}_{@}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Primero note que los conjuntos
\begin_inset Formula 
\begin{align*}
S_{1} & =\left\{ (i,\alpha,\zeta)\in\omega\times\Sigma^{\ast}\times\Sigma^{\ast}:i\neq\left\vert \alpha\right\vert +1\right\} \\
S_{2} & =\left\{ (i,\alpha,\zeta)\in\omega\times\Sigma^{\ast}\times\Sigma^{\ast}:i=\left\vert \alpha\right\vert +1\right\} 
\end{align*}

\end_inset

son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 ya que
\begin_inset Formula 
\begin{align*}
\chi_{S_{1}}^{\omega\times\Sigma^{\ast}\times\Sigma^{\ast}} & =\lambda xy\left[x\neq y\right]\circ\left[p_{1}^{1,2},Suc\circ\lambda\alpha\left[\left\vert \alpha\right\vert \right]\circ p_{2}^{1,2}\right]\\
\chi_{S_{2}}^{\omega\times\Sigma^{\ast}\times\Sigma^{\ast}} & =\lambda xy\left[x=y\right]\circ\left[p_{1}^{1,2},Suc\circ\lambda\alpha\left[\left\vert \alpha\right\vert \right]\circ p_{2}^{1,2}\right]
\end{align*}

\end_inset

Notese que por el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "restriccion"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 tenemos que 
\begin_inset Formula $p_{3}^{1,2}|_{S_{1}}$
\end_inset

 y 
\begin_inset Formula $C_{@}^{1,2}|_{S_{2}}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Ademas
\begin_inset Formula 
\[
\mathcal{G}_{@}=p_{3}^{1,2}|_{S_{1}}\cup C_{@}^{1,2}|_{S_{2}}
\]

\end_inset

por lo cual el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "dpc"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que 
\begin_inset Formula $\mathcal{G}_{@}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Analogamente se prueba que 
\begin_inset Formula $\mathcal{G}_{!}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Guia 6
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Subsubsection*
Sumatoria,
 productoria y concatenatoria de funciones 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Sea 
\begin_inset Formula $f:\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\omega$
\end_inset

,
 con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 no vacios.
 Para 
\begin_inset Formula $x,y\in\omega$
\end_inset

 y 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

,
 definamos
\begin_inset Formula 
\begin{align*}
\sum\limits_{t=x}^{t=y}f(t,\vec{x},\vec{\alpha}) & =\left\{ \begin{array}{lll}
0 &  & \text{si }x>y\\
f(x,\vec{x},\vec{\alpha})+f(x+1,\vec{x},\vec{\alpha})+...+f(y,\vec{x},\vec{\alpha}) &  & \text{si }x\leq y
\end{array}\right.\\
\prod\limits_{t=x}^{t=y}f(t,\vec{x},\vec{\alpha}) & =\left\{ \begin{array}{lll}
1 &  & \text{si }x>y\\
f(x,\vec{x},\vec{\alpha}).f(x+1,\vec{x},\vec{\alpha})....f(y,\vec{x},\vec{\alpha}) &  & \text{si }x\leq y
\end{array}\right.
\end{align*}

\end_inset

En forma similar,
 cuando 
\begin_inset Formula $I_{f}\subseteq\Sigma^{\ast}$
\end_inset

,
 definamos
\begin_inset Formula 
\[
\overset{t=y}{\underset{t=x}{\subset}}f(t,\vec{x},\vec{\alpha})=\left\{ \begin{array}{lll}
\varepsilon &  & \text{si }x>y\\
f(x,\vec{x},\vec{\alpha})f(x+1,\vec{x},\vec{\alpha})....f(y,\vec{x},\vec{\alpha}) &  & \text{si }x\leq y
\end{array}\right.
\]

\end_inset

Note que,
 en virtud de la definicion anterior,
 el dominio de las funciones
\begin_inset Formula 
\[
\lambda xy\vec{x}\vec{\alpha}\left[\sum_{t=x}^{t=y}f(t,\vec{x},\vec{\alpha})\right]\ \ \ \ \ \ \ \lambda xy\vec{x}\vec{\alpha}\left[\prod_{t=x}^{t=y}f(t,\vec{x},\vec{\alpha})\right]\ \ \ \ \ \ \ \lambda xy\vec{x}\vec{\alpha}\left[\subset_{t=x}^{t=y}f(t,\vec{x},\vec{\alpha})\right]
\]

\end_inset

es 
\begin_inset Formula $\omega\times\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "iteracion"

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset

Si 
\begin_inset Formula $f:\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\omega$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 no vacios,
 entonces las funciones 
\begin_inset Formula $\lambda xy\vec{x}\vec{\alpha}\left[\sum_{t=x}^{t=y}f(t,\vec{x},\vec{\alpha})\right]$
\end_inset

 y 
\begin_inset Formula $\lambda xy\vec{x}\vec{\alpha}\left[\prod_{t=x}^{t=y}f(t,\vec{x},\vec{\alpha})\right]$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

Si 
\begin_inset Formula $f:\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\Sigma^{\ast}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 no vacios,
 entonces la funcion 
\begin_inset Formula $\lambda xy\vec{x}\vec{\alpha}\left[\subset_{t=x}^{t=y}f(t,\vec{x},\vec{\alpha})\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a) Sea 
\begin_inset Formula $G=\lambda tx\vec{x}\vec{\alpha}\left[\sum_{i=x}^{i=t}f(i,\vec{x},\vec{\alpha})\right]$
\end_inset

.
 Ya que
\begin_inset Formula 
\[
\lambda xy\vec{x}\vec{\alpha}\left[\sum_{i=x}^{i=y}f(i,\vec{x},\vec{\alpha})\right]=G\circ\left[p_{2}^{n+2,m},p_{1}^{n+2,m},p_{3}^{n+2,m},...,p_{n+m+2}^{n+2,m}\right]
\]

\end_inset

basta con probar que 
\begin_inset Formula $G$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Primero note que
\begin_inset Formula 
\begin{align*}
G(0,x,\vec{x},\vec{\alpha}) & =\left\{ \begin{array}{lll}
0 &  & \text{si }x>0\\
f(0,\vec{x},\vec{\alpha}) &  & \text{si }x=0
\end{array}\right.\\
G(t+1,x,\vec{x},\vec{\alpha}) & =\left\{ \begin{array}{lll}
0 &  & \text{si }x>t+1\\
G(t,x,\vec{x},\vec{\alpha})+f(t+1,\vec{x},\vec{\alpha}) &  & \text{si }x\leq t+1
\end{array}\right.
\end{align*}

\end_inset

O sea que si definimos
\begin_inset Formula 
\[
\begin{array}{rll}
h:\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m} & \rightarrow & \omega\\
(x,\vec{x},\vec{\alpha}) & \rightarrow & \left\{ \begin{array}{lll}
0 &  & \text{si }x>0\\
f(0,\vec{x},\vec{\alpha}) &  & \text{si }x=0
\end{array}\right.
\end{array}
\]

\end_inset


\begin_inset Formula 
\[
\begin{array}{rll}
g:\omega^{3}\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m} & \rightarrow & \omega\\
(A,t,x,\vec{x},\vec{\alpha}) & \rightarrow & \left\{ \begin{array}{lll}
0 &  & \text{si }x>t+1\\
A+f(t+1,\vec{x},\vec{\alpha}) &  & \text{si }x\leq t+1
\end{array}\right.
\end{array}
\]

\end_inset

tenemos que 
\begin_inset Formula $G=R(h,g)$
\end_inset

.
 Es decir que solo nos falta probar que 
\begin_inset Formula $h$
\end_inset

 y 
\begin_inset Formula $g$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Sean
\begin_inset Formula 
\begin{align*}
D_{1} & =\left\{ (x,\vec{x},\vec{\alpha})\in\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}:x>0\right\} \\
D_{2} & =\left\{ (x,\vec{x},\vec{\alpha})\in\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}:x=0\right\} \\
H_{1} & =\left\{ (z,t,x,\vec{x},\vec{\alpha})\in\omega^{3}\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}:x>t+1\right\} \\
H_{2} & =\left\{ (z,t,x,\vec{x},\vec{\alpha})\in\omega^{3}\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}:x\leq t+1\right\} .
\end{align*}

\end_inset

Notese que
\begin_inset Formula 
\begin{align*}
h & =C_{0}^{n+1,m}|_{D_{1}}\cup\lambda x\vec{x}\vec{\alpha}\left[f(0,\vec{x},\vec{\alpha})\right]|_{D_{2}}\\
g & =C_{0}^{n+3,m}|_{H_{1}}\cup\lambda Atx\vec{x}\vec{\alpha}\left[A+f(t+1,\vec{x},\vec{\alpha})\right])|_{H_{2}}
\end{align*}

\end_inset

Ya que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 y
\begin_inset Formula 
\begin{align*}
\lambda x\vec{x}\vec{\alpha}\left[f(0,\vec{x},\vec{\alpha})\right] & =f\circ\left[C_{0}^{n+1,m},p_{2}^{n+1,m},p_{3}^{n+1,m},...,p_{n+1+m}^{n+1,m}\right]\\
\lambda Atx\vec{x}\vec{\alpha}\left[A+f(t+1,\vec{x},\vec{\alpha})\right]) & =\lambda xy[x+y]\circ\left[p_{1}^{n+3,m},f\circ\left[Suc\circ p_{2}^{n+3,m},p_{4}^{n+3,m},...,p_{n+3+m}^{n+3,m}\right]\right]
\end{align*}

\end_inset

tenemos que 
\begin_inset Formula $\lambda x\vec{x}\vec{\alpha}\left[f(0,\vec{x},\vec{\alpha})\right]$
\end_inset

 y 
\begin_inset Formula $\lambda Atx\vec{x}\vec{\alpha}\left[A+f(t+1,\vec{x},\vec{\alpha})\right])$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..O sea que solo nos falta ver que los conjuntos 
\begin_inset Formula $D_{1},D_{2},H_{1},H_{2}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Veamos que por ejemplo 
\begin_inset Formula $H_{1}$
\end_inset

 lo es.
 Es decir debemos ver que 
\begin_inset Formula $\chi_{H_{1}}^{\omega^{3+n}\times\Sigma^{\ast m}}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Ya que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 tenemos que 
\begin_inset Formula $D_{f}=\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 lo cual nos dice que los conjuntos 
\begin_inset Formula $S_{1},...,S_{n}$
\end_inset

,
 
\begin_inset Formula $L_{1},...,L_{m}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 y por lo tanto 
\begin_inset Formula $R=\omega^{3}\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Notese que 
\begin_inset Formula $\chi_{H_{1}}^{\omega^{3+n}\times\Sigma^{\ast m}}=(\chi_{R}^{\omega^{3+n}\times\Sigma^{\ast m}}\wedge\lambda ztx\vec{x}\vec{\alpha}\left[x>t+1\right])$
\end_inset

 por lo cual 
\begin_inset Formula $\chi_{H_{1}}^{\omega^{3+n}\times\Sigma^{\ast m}}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 ya que es la conjuncion de dos predicados 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Nota:

\series default
 Aceptaremos sin prueba (b) y el caso de la productoria en (a).
 Las pruebas son muy similares a la dada para la sumatoria
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Veamos un ejemplo de como se puede aplicar el lema anterior.
 Sea 
\begin_inset Formula $F=\lambda yx_{1}\left[\sum_{t=0}^{t=y}(x_{1})^{t}\right]$
\end_inset

.
 Es claro que 
\begin_inset Formula $D_{F}=\omega^{2}$
\end_inset

.
 Para ver que 
\begin_inset Formula $F$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 aplicaremos el lema anterior por lo cual es importante encontrar la 
\begin_inset Formula $f$
\end_inset

 adecuada a la cual se le aplicara el lema.
 Tomemos 
\begin_inset Formula $f=\lambda tx_{1}[(x_{1})^{t}]$
\end_inset

.
 Claramente 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 por lo cual el lema anterior nos dice que
\begin_inset Formula 
\[
G=\lambda xyx_{1}\left[\sum_{t=x}^{t=y}f(t,x_{1})\right]=\lambda xyx_{1}\left[\sum_{t=x}^{t=y}(x_{1})^{t}\right]
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Notar que 
\begin_inset Formula $G$
\end_inset

 no es la funcion 
\begin_inset Formula $F$
\end_inset

 pero es en algun sentido 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

mas amplia
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 que 
\begin_inset Formula $F$
\end_inset

 ya que tiene una variable mas y se tiene que 
\begin_inset Formula $F(y,x_{1})=G(0,y,x_{1})$
\end_inset

,
 para cada 
\begin_inset Formula $y,x_{1}\in\omega$
\end_inset

.
 Es facil ver que
\begin_inset Formula 
\[
F=G\circ\left[C_{0}^{2,0},p_{1}^{2,0},p_{2}^{2,0}\right]
\]

\end_inset

por lo cual 
\begin_inset Formula $F$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Haga los siguientes ejercicios aplicando el lema anterior.
 No caiga en la tentacion de hacerlos aplicando recursion primitiva ya que no se ejercitara en la habilidad de aplicar el lema en forma madura.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1:
\end_layout

\end_inset

Pruebe que la función
\begin_inset Formula 
\[
\lambda xy\alpha\left[\prod\limits_{t=y+1}^{t=\left\vert \alpha\right\vert }(t+\left\vert \alpha\right\vert )\right]
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1,5:
\end_layout

\end_inset

Pruebe que la función 
\begin_inset Formula $\lambda x\left[\prod\limits_{t=10}^{t=x}t^{t}\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

Pruebe que son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\lambda xx_{1}\left[\sum\limits_{t=1}^{t=x}Pred(x_{1})^{t}\right]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda xyz\alpha\beta[\subset_{t=3}^{t=z+5}\alpha^{Pred(z).t^{x}}\beta^{Pred(Pred(\left\vert \alpha\right\vert ^{y}))}]$
\end_inset

 
\end_layout

\begin_layout Standard
(Ojo que en estos casos el dominio de la 
\begin_inset Formula $f$
\end_inset

 a la cual le debe aplicar el lema es un rectangulo pero 
\begin_inset Formula $f$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-total)
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 2,5:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\lambda xzyx_{2}\left[\sum\limits_{t=Pred(y)}^{t=x}Pred(z)^{t}\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

Pruebe que las siguientes funciones son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\lambda xyz\alpha\beta[\subset_{t=3}^{t=z+5}\alpha^{t}]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda xzyx_{2}\left[\sum\limits_{t=Pred(x_{2})}^{t=x_{2}}x.y.z.t\right]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda x_{2}xyz\alpha\beta[\subset_{t=x_{2}}^{t=z+5}\alpha^{y.x.t}\beta^{z}]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda x_{2}xyz\alpha\beta[\subset_{t=x_{2}}^{t=z+5}\alpha^{t}\beta^{z}]$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Cuantificacion acotada de predicados 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 con dominio rectangular
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $P:S\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\omega$
\end_inset

 un predicado,
 con 
\begin_inset Formula $S,S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 no vacios.
 Supongamos 
\begin_inset Formula $\bar{S}\subseteq S$
\end_inset

.
 Entonces la expresion Booleana
\begin_inset Formula 
\[
(\forall t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})
\]

\end_inset

depende de las variables 
\begin_inset Formula $x,\vec{x},\vec{\alpha}$
\end_inset

 y valdra 
\begin_inset Formula $1$
\end_inset

 en una 
\begin_inset Formula $(1+n+m)$
\end_inset

-upla 
\begin_inset Formula $(x,\vec{x},\vec{\alpha})$
\end_inset

 cuando 
\begin_inset Formula $P(t,\vec{x},\vec{\alpha})$
\end_inset

 sea igual a 
\begin_inset Formula $1$
\end_inset

 para cada 
\begin_inset Formula $t\in\{u\in\bar{S}:u\leq x\}$
\end_inset

;
 y 
\begin_inset Formula $0$
\end_inset

 en caso contrario.
 Tenemos entonces que el dominio del predicado
\begin_inset Formula 
\[
\lambda x\vec{x}\vec{\alpha}\left[(\forall t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})\right]
\]

\end_inset

es 
\begin_inset Formula $\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

.
 En forma analoga se define la forma de interpretar la expresion Booleana
\begin_inset Formula 
\[
(\exists t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})
\]

\end_inset

Cabe destacar que
\begin_inset Formula 
\[
\lambda x\vec{x}\vec{\alpha}\left[(\exists t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})\right]=\lnot\lambda x\vec{x}\vec{\alpha}\left[(\forall t\in\bar{S})_{t\leq x}\;\lnot P(t,\vec{x},\vec{\alpha})\right]
\]

\end_inset


\end_layout

\begin_layout Standard
Tambien podemos cuantificar sobre variable alfabetica.
 Sea 
\begin_inset Formula $P:S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times L\rightarrow\omega$
\end_inset

 un predicado,
 con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L,L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 no vacios.
 Supongamos 
\begin_inset Formula $\bar{L}\subseteq L$
\end_inset

.
 Entonces la expresion Booleana
\begin_inset Formula 
\[
(\forall\alpha\in\bar{L})_{\left\vert \alpha\right\vert \leq x}\;P(\vec{x},\vec{\alpha},\alpha)
\]

\end_inset

depende de las variables 
\begin_inset Formula $x,\vec{x},\vec{\alpha}$
\end_inset

 y valdra 
\begin_inset Formula $1$
\end_inset

 en una 
\begin_inset Formula $(1+n+m)$
\end_inset

-upla 
\begin_inset Formula $(x,\vec{x},\vec{\alpha})$
\end_inset

 cuando 
\begin_inset Formula $P(\vec{x},\vec{\alpha},\alpha)$
\end_inset

 sea igual a 
\begin_inset Formula $1$
\end_inset

 para cada 
\begin_inset Formula $\alpha\in\{\beta\in\bar{L}:\left\vert \beta\right\vert \leq x\}$
\end_inset

;
 y 
\begin_inset Formula $0$
\end_inset

 en caso contrario.
 Tenemos entonces que el dominio del predicado
\begin_inset Formula 
\[
\lambda x\vec{x}\vec{\alpha}\left[(\forall\alpha\in\bar{L})_{\left\vert \alpha\right\vert \leq x}\;P(\vec{x},\vec{\alpha},\alpha)\right]
\]

\end_inset

es 
\begin_inset Formula $\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

.
 En forma analoga se define la forma de interpretar la expresion Booleana
\begin_inset Formula 
\[
(\exists\alpha\in\bar{L})_{\left\vert \alpha\right\vert \leq x}\;P(\vec{x},\vec{\alpha},\alpha)
\]

\end_inset

Cabe destacar que
\begin_inset Formula 
\[
\lambda x\vec{x}\vec{\alpha}\left[(\exists\alpha\in\bar{L})_{\left\vert \alpha\right\vert \leq x}P(\vec{x},\vec{\alpha},\alpha)\right]=\lnot\lambda x\vec{x}\vec{\alpha}\left[(\forall\alpha\in\bar{L})_{\left\vert \alpha\right\vert \leq x}\lnot P(\vec{x},\vec{\alpha},\alpha)\right]
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "cuantificacion"

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset

Sea 
\begin_inset Formula $P:S\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\omega$
\end_inset

 un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 con 
\begin_inset Formula $S,S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 no vacios.
 Supongamos 
\begin_inset Formula $\bar{S}\subseteq S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Entonces 
\begin_inset Formula $\lambda x\vec{x}\vec{\alpha}\left[(\forall t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})\right]$
\end_inset

 y 
\begin_inset Formula $\lambda x\vec{x}\vec{\alpha}\left[(\exists t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})\right]$
\end_inset

 son predicados 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

Sea 
\begin_inset Formula $P:S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times L\rightarrow\omega$
\end_inset

 un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 con 
\begin_inset Formula $S_{1},...,S_{n}\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $L,L_{1},...,L_{m}\subseteq\Sigma^{\ast}$
\end_inset

 no vacios.
 Supongamos 
\begin_inset Formula $\bar{L}\subseteq L$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Entonces 
\begin_inset Formula $\lambda x\vec{x}\vec{\alpha}\left[(\forall\alpha\in\bar{L})_{\left\vert \alpha\right\vert \leq x}\;P(\vec{x},\vec{\alpha},\alpha)\right]$
\end_inset

 y 
\begin_inset Formula $\lambda x\vec{x}\vec{\alpha}\left[(\exists\alpha\in\bar{L})_{\left\vert \alpha\right\vert \leq x}\;P(\vec{x},\vec{\alpha},\alpha)\right]$
\end_inset

 son predicados 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a) Sea
\begin_inset Formula 
\[
\bar{P}=P|_{\bar{S}\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}}\cup C_{1}^{1+n,m}|_{(\omega-\bar{S})\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}}
\]

\end_inset

Notese que 
\begin_inset Formula $\bar{P}$
\end_inset

 tiene dominio 
\begin_inset Formula $\omega\times S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}$
\end_inset

 y es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Ya que
\begin_inset Formula 
\begin{align*}
\lambda x\vec{x}\vec{\alpha}\left[(\forall t\in\bar{S})_{t\leq x}P(t,\vec{x},\vec{\alpha})\right] & =\lambda x\vec{x}\vec{\alpha}\left[\prod\limits_{t=0}^{t=x}\bar{P}(t,\vec{x},\vec{\alpha})\right]\\
 & =\lambda xy\vec{x}\vec{\alpha}\left[\prod\limits_{t=x}^{t=y}\bar{P}(t,\vec{x},\vec{\alpha})\right]\circ\left[C_{0}^{1+n,m},p_{1}^{1+n,m},...,p_{1+n+m}^{1+n,m}\right]
\end{align*}

\end_inset

el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "iteracion"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 implica que 
\begin_inset Formula $\lambda x\vec{x}\vec{\alpha}\left[(\forall t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Standard
Ya que
\begin_inset Formula 
\[
\lambda x\vec{x}\vec{\alpha}\left[(\exists t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})\right]=\lnot\lambda x\vec{x}\vec{\alpha}\left[(\forall t\in\bar{S})_{t\leq x}\;\lnot P(t,\vec{x},\vec{\alpha})\right]
\]

\end_inset

tenemos que 
\begin_inset Formula $\lambda x\vec{x}\vec{\alpha}\left[(\exists t\in\bar{S})_{t\leq x}\;P(t,\vec{x},\vec{\alpha})\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Nota:

\series default
 Aceptaremos (b) sin prueba.
 Su prueba se basa en (a) y el lector puede verla en el apunte.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
OBSERVACION:
 La cuantificacion no acotada no preserva la propiedad de ser 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Como veremos mas adelante hay un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 
\begin_inset Formula $P:\omega\times L_{1}\rightarrow\omega$
\end_inset

,
 tal que el predicado 
\begin_inset Formula $\lambda\alpha\left[(\exists t\in\omega)\;P(t,\alpha)\right]$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 por lo cual tampoco es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 (ni siquiera podra ser 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo).
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Veamos por ejemplo que el predicado 
\begin_inset Formula $\lambda xy\left[x\text{ divide }y\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Sea 
\begin_inset Formula $P=\lambda tx_{1}x_{2}\left[x_{2}=t.x_{1}\right]$
\end_inset

.
 Es claro que 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 El lema anterior nos dice que 
\begin_inset Formula $\lambda xx_{1}x_{2}\left[(\exists t\in\omega)_{t\leq x}\;P(t,x_{1},x_{2})\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Notese que 
\begin_inset Formula $x_{1}$
\end_inset

 divide 
\begin_inset Formula $x_{2}$
\end_inset

 si y solo si hay un 
\begin_inset Formula $t\leq x_{2}$
\end_inset

 tal que 
\begin_inset Formula $x_{2}=t.x_{1}$
\end_inset

.
 Esto nos dice que
\begin_inset Formula 
\[
\lambda x_{1}x_{2}\left[x_{1}\text{ divide }x_{2}\right]=\lambda x_{1}x_{2}\left[(\exists t\in\omega)_{t\leq x_{2}}\;P(t,x_{1},x_{2})\right]
\]

\end_inset

Pero
\begin_inset Formula 
\[
\lambda x_{1}x_{2}\left[(\exists t\in\omega)_{t\leq x_{2}}\;P(t,x_{1},x_{2})\right]=\lambda xx_{1}x_{2}\left[(\exists t\in\omega)_{t\leq x}\;P(t,x_{1},x_{2})\right]\circ\left[p_{2}^{2,0},p_{1}^{2,0},p_{2}^{2,0}\right]
\]

\end_inset

por lo cual 
\begin_inset Formula $\lambda x_{1}x_{2}\left[x_{1}\text{ divide }x_{2}\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
La idea fundamental subyacente en la aplicacion anterior es que en muchos casos de predicados obtenidos por cuantificacion a partir de otros predicados,
 la variable cuantificada tiene una cota natural en terminos de las otras variables y entonces componiendo adecuadamente se lo puede presentar como un caso de cuantificacion acotada
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

Use que
\begin_inset Formula 
\[
x\text{ es primo sii }x>1\wedge\left((\forall t\in\omega)_{t\leq x}\;t=1\vee t=x\vee\lnot(t\text{ divide }x)\right)
\]

\end_inset

para probar que 
\begin_inset Formula $\lambda x\left[x\text{ es primo}\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\lambda\alpha\beta\left[\alpha\text{\ }\mathrm{inicial}\ \beta\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 6:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\{\alpha^{2}:\alpha\in\Sigma^{\ast}\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\{(x,\alpha,\beta)\in\omega\times\Sigma^{\ast}\times\Sigma^{\ast}:(\exists t\in\omega)\;\alpha^{x}=\beta^{t}\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 8:
\end_layout

\end_inset

Dados 
\begin_inset Formula $x,y\in\omega$
\end_inset

,
 diremos que 
\begin_inset Formula $x$
\end_inset

 e 
\begin_inset Formula $y$
\end_inset

 son 
\shape italic
coprimos
\shape default
 cuando 
\begin_inset Formula $1$
\end_inset

 sea el unico elemento de 
\begin_inset Formula $\omega$
\end_inset

 que divide a ambos.
 Sea 
\begin_inset Formula $P=\lambda xy[x$
\end_inset

 e 
\begin_inset Formula $y$
\end_inset

 son coprimos
\begin_inset Formula $]$
\end_inset

.
 Pruebe que 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 9:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\boxplus,\boxminus\}$
\end_inset

.
 Pruebe que el conjunto
\begin_inset Formula 
\[
\{\left(x,y,\alpha,\beta\right)\in\omega\times\mathbf{N}\times\Sigma^{\ast}\times\Sigma^{+}:\mathrm{\boxplus}\beta\mathrm{\boxplus}=\gamma\mathrm{\boxminus}\alpha\mathrm{\boxminus}\gamma^{R}\text{, para algun }\gamma\}
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 (Por definicion:
 
\begin_inset Formula $\gamma^{R}=[\gamma]_{\left\vert \gamma\right\vert }[\gamma]_{\left\vert \gamma\right\vert -1}...[\gamma]_{1}$
\end_inset

 si 
\begin_inset Formula $\left\vert \gamma\right\vert \geq1$
\end_inset

 y 
\begin_inset Formula $\gamma^{R}=\varepsilon$
\end_inset

 si 
\begin_inset Formula $\gamma=\varepsilon$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 10:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\{2^{x}:x\in\omega$
\end_inset

 y 
\begin_inset Formula $x$
\end_inset

 es impar
\begin_inset Formula $\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 11:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\$\}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $\{(2^{x},@^{x},\$):x\in\omega$
\end_inset

 y 
\begin_inset Formula $x$
\end_inset

 es impar
\begin_inset Formula $\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 12:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\{(x,\alpha,\beta)\in\omega\times\Sigma^{\ast}\times\Sigma^{\ast}:(\exists t\in\operatorname{Im}(pr))\;\alpha^{Pred(Pred(x)).Pred(\left\vert \alpha\right\vert )}=\beta^{t}\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 (ojo que aqui el predicado al cual debera aplicarle el lema de cuantificacion acotada no es 
\begin_inset Formula $\Sigma$
\end_inset

-total)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 12,5:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\{(x,\alpha)\in\omega\times\Sigma^{\ast}:(\exists\beta\in\Sigma^{+})\;\alpha\beta^{Pred(x)}=\beta^{Pred(x)}\alpha\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 (ojo que aqui el predicado al cual debera aplicarle el lema de cuantificacion acotada no es 
\begin_inset Formula $\Sigma$
\end_inset

-total)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 12,6:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\boxplus,\boxminus\}$
\end_inset

.
 Sea 
\begin_inset Formula $L=\{\boxminus^{n}\mathrm{\boxplus}:n\in\omega$
\end_inset

 y 
\begin_inset Formula $n$
\end_inset

 es impar
\begin_inset Formula $\}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $\{(x,\alpha)\in\operatorname{Im}(pr)\times L:(\exists t\in\omega)\;t^{2}=\left\vert \alpha\right\vert .Pred(x)\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 (ojo que aqui el predicado al cual debera aplicarle el lema de cuantificacion acotada no es 
\begin_inset Formula $\Sigma$
\end_inset

-total) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Como puede notarse,
 en los ejercicios anteriores se aplica una sola ves el lema de cuantificacion acotada.
 En los ejercicios que siguen veremos algunos casos en los cuales es necesario anidar cuantificaciones acotadas.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 13:
\end_layout

\end_inset

(S) Pruebe que 
\begin_inset Formula $\lambda\alpha\beta\left[\alpha\text{\ }\mathrm{ocurre\ en}\ \beta\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 14:
\end_layout

\end_inset

(S) Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $\{@^{t}!^{l}:t\in\mathbf{N}$
\end_inset

 y 
\begin_inset Formula $l$
\end_inset

 es impar
\begin_inset Formula $\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 15:
\end_layout

\end_inset

(S) Pruebe que 
\begin_inset Formula $\{x\in\mathbf{N}:\exists p,q$
\end_inset

 tales que 
\begin_inset Formula $x=p.q$
\end_inset

 y 
\begin_inset Formula $p,q$
\end_inset

 son primos
\begin_inset Formula $\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 16:
\end_layout

\end_inset

(S) Sea 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,F\right)$
\end_inset

 una maquina de Turing y supongamos 
\begin_inset Formula $Q$
\end_inset

 es un alfabeto disjunto con 
\begin_inset Formula $\Gamma$
\end_inset

.
 Notese que para cada 
\begin_inset Formula $\zeta\in(\Gamma\cup Q)^{\ast}$
\end_inset

 se tiene que
\begin_inset Formula 
\[
\zeta\in Des\text{ si y solo si }(\exists\alpha\in\Gamma^{\ast})(\exists\beta\in Q)(\exists\gamma\in\Gamma^{\ast})\ ([\gamma]_{\left\vert \gamma\right\vert }\neq B\wedge\zeta=\alpha\beta\gamma)
\]

\end_inset

Usaremos notacion lambda respecto del alfabeto 
\begin_inset Formula $\Gamma\cup Q$
\end_inset

.
 Notese que
\begin_inset Formula 
\[
\chi_{Des}^{(\Gamma\cup Q)^{\ast}}=\lambda\zeta[(\exists\alpha\in\Gamma^{\ast})(\exists\beta\in Q)(\exists\gamma\in\Gamma^{\ast})\ ([\gamma]_{\left\vert \gamma\right\vert }\neq B\wedge\zeta=\alpha\beta\gamma)]
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $P_{1}=\lambda\zeta\alpha\beta\gamma[[\gamma]_{\left\vert \gamma\right\vert }\neq B\wedge\zeta=\alpha\beta\gamma]$
\end_inset

.
 Encuentre 
\begin_inset Formula $D_{P_{1}}$
\end_inset

 y pruebe que 
\begin_inset Formula $P_{1}$
\end_inset

 es 
\begin_inset Formula $(\Gamma\cup Q)$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $P_{2}=\lambda\zeta\alpha\beta[(\exists\gamma\in\Gamma^{\ast})\ ([\gamma]_{\left\vert \gamma\right\vert }\neq B\wedge\zeta=\alpha\beta\gamma)]$
\end_inset

.
 Encuentre 
\begin_inset Formula $D_{P_{2}}$
\end_inset

 y pruebe que 
\begin_inset Formula $P_{2}$
\end_inset

 es 
\begin_inset Formula $(\Gamma\cup Q)$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $P_{3}=\lambda\zeta\alpha[(\exists\beta\in Q)(\exists\gamma\in\Gamma^{\ast})\ ([\gamma]_{\left\vert \gamma\right\vert }\neq B\wedge\zeta=\alpha\beta\gamma)]$
\end_inset

.
 Encuentre 
\begin_inset Formula $D_{P_{3}}$
\end_inset

 y pruebe que 
\begin_inset Formula $P_{3}$
\end_inset

 es 
\begin_inset Formula $(\Gamma\cup Q)$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $\chi_{Des}^{(\Gamma\cup Q)^{\ast}}$
\end_inset

 es 
\begin_inset Formula $(\Gamma\cup Q)$
\end_inset

-p.r.
 Concluya que 
\begin_inset Formula $Des$
\end_inset

 es un conjunto 
\begin_inset Formula $(\Gamma\cup Q)$
\end_inset

-p.r.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Minimizacion y funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas
\end_layout

\begin_layout Standard
Tal como fue explicado en el comienzo de la Guia 5,
 para obtener la clase de las funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas debemos agregar un nuevo constructor a los ya definidos de composicion y recursion primitiva,
 a saber el constructor de 
\shape italic
minimizacion
\shape default
.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Minimizacion de variable numerica
\end_layout

\begin_layout Standard
\noindent
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito y sea 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 un predicado.
 Dado 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}$
\end_inset

,
 cuando exista al menos un 
\begin_inset Formula $t\in\omega$
\end_inset

 tal que 
\begin_inset Formula $P(t,\vec{x},\vec{\alpha})=1$
\end_inset

,
 usaremos 
\begin_inset Formula $\min_{t}P(t,\vec{x},\vec{\alpha})$
\end_inset

 para denotar al menor de tales 
\begin_inset Formula $t^{\prime}s$
\end_inset

.
 Notese que la expresion 
\begin_inset Formula $\min_{t}P(t,\vec{x},\vec{\alpha})$
\end_inset

 esta definida solo para aquellas 
\begin_inset Formula $(n+m)$
\end_inset

-uplas 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

 para las cuales hay al menos un 
\begin_inset Formula $t$
\end_inset

 tal que se da 
\begin_inset Formula $P(t,\vec{x},\vec{\alpha})=1$
\end_inset

.
 Dicho de otra forma,
 
\begin_inset Formula $\min_{t}P(t,\vec{x},\vec{\alpha})$
\end_inset

 no estara definida cuando para cada 
\begin_inset Formula $t\in\omega$
\end_inset

 se de que 
\begin_inset Formula $(t,\vec{x},\vec{\alpha})$
\end_inset

 no pertenece a 
\begin_inset Formula $D_{P}$
\end_inset

 o 
\begin_inset Formula $P(t,\vec{x},\vec{\alpha})=0$
\end_inset

.
 Otro detalle importante a tener en cuenta es que la expresion 
\begin_inset Formula $\min_{t}P(t,\vec{x},\vec{\alpha})$
\end_inset

 no depende de la variable 
\begin_inset Formula $t$
\end_inset

.
 Por ejemplo,
 las expresiones 
\begin_inset Formula $\min_{t}P(t,\vec{x},\vec{\alpha})$
\end_inset

 y 
\begin_inset Formula $\min_{i}P(i,\vec{x},\vec{\alpha})$
\end_inset

 son equivalentes en el sentido que estan definidas en las mismas 
\begin_inset Formula $(n+m)$
\end_inset

-uplas y cuando estan definidas asumen el mismo valor.
\end_layout

\begin_layout Standard
Definamos
\begin_inset Formula 
\[
M(P)=\lambda\vec{x}\vec{\alpha}\left[\min\nolimits_{t}P(t,\vec{x},\vec{\alpha})\right]
\]

\end_inset

Notese que
\begin_inset Formula 
\begin{align*}
D_{M(P)} & =\left\{ (\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}:(\exists t\in\omega)\ P(t,\vec{x},\vec{\alpha})\right\} \\
M(P)(\vec{x},\vec{\alpha}) & =\min\nolimits_{t}P(t,\vec{x},\vec{\alpha})\text{, para cada }(\vec{x},\vec{\alpha})\in D_{M(P)}
\end{align*}

\end_inset

Diremos que 
\begin_inset Formula $M(P)$
\end_inset

 se obtiene por 
\shape italic
minimizacion de variable numerica 
\shape default
a partir de 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Veamos un par de ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E1)
\end_layout

\end_inset

Tomemos 
\begin_inset Formula $P=\lambda tx_{1}[t^{2}=x_{1}]$
\end_inset

.
 Tenemos que:
\begin_inset Formula 
\begin{align*}
D_{M(P)} & =\left\{ x_{1}\in\omega:(\exists t\in\omega)\ P(t,x_{1})\right\} \\
 & =\left\{ x_{1}\in\omega:(\exists t\in\omega)\ t^{2}=x_{1}\right\} 
\end{align*}

\end_inset

Es decir el dominio de 
\begin_inset Formula $M(P)$
\end_inset

 es el conjunto de los cuadrados.
 Ademas para cada 
\begin_inset Formula $x_{1}\in D_{M(P)}$
\end_inset

 tenemos que
\begin_inset Formula 
\[
M(P)(x_{1})=\min\nolimits_{t}P(t,x_{1})=\min\nolimits_{t}(t^{2}=x_{1})
\]

\end_inset

por lo cual 
\begin_inset Formula $M(P)(x)=\sqrt{x}$
\end_inset

,
 para cada 
\begin_inset Formula $x\in D_{M(P)}$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(E2)
\end_layout

\end_inset

Recordemos que dados 
\begin_inset Formula $x_{1},x_{2}\in\omega$
\end_inset

,
 con 
\begin_inset Formula $x_{2}$
\end_inset

 no nulo,
 el 
\shape italic
cociente de dividir 
\shape default

\begin_inset Formula $x_{1}$
\end_inset


\shape italic

\begin_inset space \space{}
\end_inset

por 
\shape default

\begin_inset Formula $x_{2}$
\end_inset

 se define como el maximo elemento del conjunto 
\begin_inset Formula $\{t\in\omega:t.x_{2}\leq x_{1}\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
\begin{array}[t]{rll}
Q:\omega\times\mathbf{N} & \rightarrow & \omega\\
(x_{1},x_{2}) & \rightarrow & \text{cociente de dividir }x_{1}\text{ por }x_{2}
\end{array}
\]

\end_inset

Sea 
\begin_inset Formula $P=\lambda tx_{1}x_{2}\left[x_{1}<t.x_{2}\right]$
\end_inset

.
 Notar que
\begin_inset Formula 
\begin{align*}
D_{M(P)} & =\{(x_{1},x_{2})\in\omega^{2}:(\exists t\in\omega)\;P(t,x_{1},x_{2})=1\}\\
 & =\{(x_{1},x_{2}):(\exists t\in\omega)\;x_{1}<t.x_{2}\}\\
 & =\omega\times\mathbf{N}
\end{align*}

\end_inset

Ademas si 
\begin_inset Formula $(x_{1},x_{2})\in\omega\times\mathbf{N}$
\end_inset

,
 es facil de probar que
\begin_inset Formula 
\[
\min\nolimits_{t}\ x_{1}<t.x_{2}=Q(x_{1},x_{2})+1
\]

\end_inset

por lo que 
\begin_inset Formula $M(P)=Suc\circ Q$
\end_inset

.
 Si quisieramos encontrar un predicado 
\begin_inset Formula $P^{\prime}$
\end_inset

 tal que 
\begin_inset Formula $M(P^{\prime})=Q$
\end_inset

,
 entonces podemos tomar 
\begin_inset Formula $P^{\prime}=\lambda tx_{1}x_{2}\left[x_{1}<(t+1).x_{2}\right]$
\end_inset

 y con un poco de concentracion nos daremos cuenta que 
\begin_inset Formula $M(P^{\prime})=Q$
\end_inset

.
 De todas maneras hay una forma mas facil de hacerlo y es tomando 
\begin_inset Formula $P^{\prime}$
\end_inset

 de tal forma que para cada 
\begin_inset Formula $(x_{1},x_{2})\in D_{Q}$
\end_inset

 se de que
\begin_inset Formula 
\[
Q(x_{1},x_{2})=\mathrm{\ unico\ }t\in\omega\mathrm{\ tal\ que\ }P^{\prime}(t,x_{1},x_{2})
\]

\end_inset

Por ejemplo se puede tomar 
\begin_inset Formula $P^{\prime}=\lambda tx_{1}x_{2}\left[x_{1}\geq t.x_{2}\text{ y }x_{1}<(t+1).x_{2}\right]$
\end_inset

 que dicho sea de paso es justo la definicion de cociente dada en la escuela primaria.
 Dejamos al lector corroborar que 
\begin_inset Formula $M(P^{\prime})=Q$
\end_inset

,
 para este ultimo 
\begin_inset Formula $P^{\prime}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
REGLA U:

\series default
 Si tenemos una funcion 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 y buscamos un predicado 
\begin_inset Formula $P$
\end_inset

 tal que 
\begin_inset Formula $f=M(P)$
\end_inset

 muchas veces es util tratar de diseñar 
\begin_inset Formula $P$
\end_inset

 de manera que para cada 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in D_{f}$
\end_inset

 se de que
\begin_inset Formula 
\[
f(\vec{x},\vec{\alpha})=\mathrm{\ unico\ }t\in\omega\mathrm{\ tal\ que\ }P(t,\vec{x},\vec{\alpha})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 17:
\end_layout

\end_inset

Sea 
\begin_inset Formula $P=\lambda tx_{1}[x_{1}<t]$
\end_inset

.
 Describa la funcion 
\begin_inset Formula $M(P)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 17,3:
\end_layout

\end_inset

Sea 
\begin_inset Formula $P=\lambda tx_{1}x_{2}[x_{2}+t=x_{1}]$
\end_inset

.
 Describa la funcion 
\begin_inset Formula $M(P)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 17,6:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!,\blacksquare\}$
\end_inset

.
 Sea 
\begin_inset Formula $P=\lambda t\alpha_{1}[[\alpha_{1}]_{t}=\blacksquare]$
\end_inset

.
 Describa la funcion 
\begin_inset Formula $M(P)$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 17,9:
\end_layout

\end_inset

Aplique la REGLA U para encontrar un predicado 
\begin_inset Formula $P$
\end_inset

 tal que 
\begin_inset Formula $M(P)=\lambda x_{1}[\mathrm{parte\ entera\ de\ }\sqrt{x_{1}}]$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 18:
\end_layout

\end_inset

Encuentre un predicado 
\begin_inset Formula $P$
\end_inset

 tal que 
\begin_inset Formula $M(P)=\lambda x_{1}x_{2}[x_{1}\dot{-}x_{2}]$
\end_inset

.
 (Aqui es natural hacerlo sin la idea de la REGLA U.)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 19:
\end_layout

\end_inset

Elija V o F para el siguiente enunciado.
 Justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{2}\rightarrow\omega$
\end_inset

 es un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo,
 entonces el siguiente procedimiento (con dato de entrada 
\begin_inset Formula $(x,y)\in\omega^{2}$
\end_inset

) computa la funcion 
\begin_inset Formula $M(P)$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
Etapa 1:
 Hacer 
\begin_inset Formula $T=0$
\end_inset

 e ir a Etapa 2
\end_layout

\begin_layout Standard
Etapa 2:
 Si 
\begin_inset Formula $(T,x,y)\in D_{P}$
\end_inset

 y 
\begin_inset Formula $P(T,x,y)=1$
\end_inset

,
 entonces ir a Etapa 4,
 en caso contrario ir a Etapa 3.
\end_layout

\begin_layout Standard
Etapa 3:
 Hacer 
\begin_inset Formula $T=T+1$
\end_inset

 e ir a Etapa 2.
\end_layout

\begin_layout Standard
Etapa 4:
 Dar 
\begin_inset Formula $T$
\end_inset

 como salida y terminar 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Si 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 es un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable y 
\begin_inset Formula $D_{P}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 entonces la funcion 
\begin_inset Formula $M(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 20:
\end_layout

\end_inset

Pruebe el lema anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Lamentablemente si quitamos la hipotesis en el lema anterior de que 
\begin_inset Formula $D_{P}$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 el lema resulta falso.
 Mas adelante veremos un ejemplo.
 Por el momento el lector puede ejercitar su comprencion del tema convenciendose de que aun teniendo un procedimiento efectivo que compute a un predicado 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

,
 no es claro como construir un procedimiento efectivo que compute a 
\begin_inset Formula $M(P)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 21:
\end_layout

\end_inset

V o F o I.
 Justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{n}\rightarrow\omega$
\end_inset

 un predicado.
 Si 
\begin_inset Formula $\vec{x}\in\omega^{n}$
\end_inset

 es tal que existe 
\begin_inset Formula $t$
\end_inset

 en 
\begin_inset Formula $\omega$
\end_inset

 que cumple 
\begin_inset Formula $(t,\vec{x})\in D_{P}$
\end_inset

,
 entonces 
\begin_inset Formula $\vec{x}\in D_{M(P)}$
\end_inset

.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{n}\rightarrow\omega$
\end_inset

 un predicado.
 Entonces 
\begin_inset Formula $M(P)(\vec{x})\leq t$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $P:\omega^{n}\rightarrow\omega$
\end_inset

 un predicado,
 con 
\begin_inset Formula $n\geq1$
\end_inset

.
 Entonces 
\begin_inset Formula $D_{M(P)}\subseteq\omega^{n-1}$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Entonces 
\begin_inset Formula $M(p_{1}^{1,2})=C_{0}^{0,2}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Definicion de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva
\end_layout

\begin_layout Standard
Con este nuevo constructor de funciones estamos en condiciones de definir la clase de las funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas.
 Definamos los conjuntos 
\begin_inset Formula $\mathrm{R}_{0}^{\Sigma}\subseteq\mathrm{R}_{1}^{\Sigma}\subseteq\mathrm{R}_{2}^{\Sigma}\subseteq...\subseteq\mathrm{R}^{\Sigma}$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\[
\begin{array}{lll}
\mathrm{R}_{0}^{\Sigma} & = & \mathrm{PR}_{0}^{\Sigma}\\
\mathrm{R}_{k+1}^{\Sigma} & = & \mathrm{R}_{k}^{\Sigma}\cup\left\{ f\circ[f_{1},...,f_{r}]:f,f_{1},...,f_{r}\in\mathrm{R}_{k}^{\Sigma}\text{, }r\geq1\right\} \cup\\
 &  & \;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\left\{ R(f,\mathcal{G}):f\text{ y cada }\mathcal{G}_{a}\text{ pertenecen a }\mathrm{R}_{k}^{\Sigma}\right\} \cup\\
 &  & \;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\left\{ R(f,g):f,g\in\mathrm{R}_{k}^{\Sigma}\right\} \cup\\
 &  & \;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\left\{ M(P):P\text{ es }\Sigma\text{-total y }P\in\mathrm{R}_{k}^{\Sigma}\right\} \\
\mathrm{R}^{\Sigma} & = & \bigcup_{k\geq0}\mathrm{R}_{k}^{\Sigma}
\end{array}
\]

\end_inset

Una funcion 
\begin_inset Formula $f$
\end_inset

 es llamada 
\begin_inset Formula $\Sigma$
\end_inset

-
\shape italic
recursiva
\shape default
 si pertenece a 
\begin_inset Formula $\mathrm{R}^{\Sigma}$
\end_inset

.
 Cabe destacar que aunque 
\begin_inset Formula $M(P)$
\end_inset

 fue definido para predicados no necesariamente 
\begin_inset Formula $\Sigma$
\end_inset

-totales,
 en la definicion de los conjuntos 
\begin_inset Formula $\mathrm{R}_{k}^{\Sigma}$
\end_inset

,
 nos restringimos al caso en que 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-total.
\end_layout

\begin_layout Standard
Notese que 
\begin_inset Formula $\mathrm{PR}_{k}^{\Sigma}\subseteq\mathrm{R}_{k}^{\Sigma}$
\end_inset

,
 para cada 
\begin_inset Formula $k\in\omega$
\end_inset

,
 por lo cual 
\begin_inset Formula $\mathrm{PR}^{\Sigma}\subseteq\mathrm{R}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "f recursiva implica f efectivamente computable"

\end_inset

Si 
\begin_inset Formula $f\in\mathrm{R}^{\Sigma}$
\end_inset

,
 entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 22:
\end_layout

\end_inset

Pruebe la proposicion anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Daremos sin prueba el siguiente conceptualmente importante resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "recursivo no implica PR"

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Entonces no toda funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Es decir que 
\begin_inset Formula $\mathrm{PR}^{\Sigma}\subseteq\mathrm{R}^{\Sigma}$
\end_inset

 y 
\begin_inset Formula $\mathrm{PR}^{\Sigma}\neq\mathrm{R}^{\Sigma}$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Este resultado no es facil de probar.
 Mas adelante veremos ejemplos naturales de funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas que no son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Otro ejemplo natural es la famosa funcion de Ackermann.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Lema de minimizacion acotada de variable numerica de predicados 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Standard
Como veremos mas adelante,
 no siempre que 
\begin_inset Formula $P\in\mathrm{R}^{\Sigma}$
\end_inset

,
 tendremos que 
\begin_inset Formula $M(P)\in\mathrm{R}^{\Sigma}$
\end_inset

.
 Sin envargo,
 el siguiente lema nos garantiza que cuando 
\begin_inset Formula $P\in\mathrm{PR}^{\Sigma}$
\end_inset

,
 se da que 
\begin_inset Formula $M(P)\in\mathrm{R}^{\Sigma}$
\end_inset

 y ademas da condiciones para que 
\begin_inset Formula $M(P)$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "minimizacion"

\end_inset

Sean 
\begin_inset Formula $n,m\geq0$
\end_inset

.
 Sea 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Entonces
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $M(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

Si hay una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset Formula $f:\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 tal que
\begin_inset Formula 
\[
M(P)(\vec{x},\vec{\alpha})=\min\nolimits_{t}P(t,\vec{x},\vec{\alpha})\leq f(\vec{x},\vec{\alpha})\text{, para cada }(\vec{x},\vec{\alpha})\in D_{M(P)}\text{,}
\]

\end_inset

entonces 
\begin_inset Formula $M(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a) Sea 
\begin_inset Formula $\bar{P}=P\cup C_{0}^{n+1,m}|_{(\omega^{n+1}\times\Sigma^{\ast m})-D_{P}}$
\end_inset

.
 Note que 
\begin_inset Formula $\bar{P}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 (por que?).
 Veremos a continuacion que 
\begin_inset Formula $M(P)=M(\bar{P})$
\end_inset

.
 Notese que
\begin_inset Formula 
\[
\{t\in\omega:P(t,\vec{x},\vec{\alpha})=1\}=\{t\in\omega:\bar{P}(t,\vec{x},\vec{\alpha})=1\}
\]

\end_inset

Esto claramente dice que 
\begin_inset Formula $D_{M(P)}=D_{M(\bar{P})}$
\end_inset

 y que 
\begin_inset Formula $M(P)(\vec{x},\vec{\alpha})=M(\bar{P})(\vec{x},\vec{\alpha})$
\end_inset

,
 para cada 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in D_{M(P)}$
\end_inset

.,
 por lo cual 
\begin_inset Formula $M(P)=M(\bar{P})$
\end_inset

.
\end_layout

\begin_layout Standard
Veremos entonces que 
\begin_inset Formula $M(\bar{P})$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 Sea 
\begin_inset Formula $k$
\end_inset

 tal que 
\begin_inset Formula $\bar{P}\in\mathrm{PR}_{k}^{\Sigma}$
\end_inset

.
 Ya que 
\begin_inset Formula $\bar{P}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-total y 
\begin_inset Formula $\bar{P}\in\mathrm{PR}_{k}^{\Sigma}\subseteq\mathrm{R}_{k}^{\Sigma}$
\end_inset

,
 tenemos que 
\begin_inset Formula $M(\bar{P})\in\mathrm{R}_{k+1}^{\Sigma}$
\end_inset

 y por lo tanto 
\begin_inset Formula $M(\bar{P})\in\mathrm{R}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Standard
(b) Ya que 
\begin_inset Formula $M(P)=M(\bar{P})$
\end_inset

,
 basta con probar que 
\begin_inset Formula $M(\bar{P})$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 Primero veremos que 
\begin_inset Formula $D_{M(\bar{P})}$
\end_inset

 es un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Notese que
\begin_inset Formula 
\[
\chi_{D_{M(\bar{P})}}^{\omega^{n}\times\Sigma^{\ast m}}=\lambda\vec{x}\vec{\alpha}\left[(\exists t\in\omega)_{t\leq f(\vec{x},\vec{\alpha})}\;\bar{P}(t,\vec{x},\vec{\alpha})\right]
\]

\end_inset

lo cual nos dice que
\begin_inset Formula 
\[
\chi_{D_{M(\bar{P})}}^{\omega^{n}\times\Sigma^{\ast m}}=\lambda x\vec{x}\vec{\alpha}\left[(\exists t\in\omega)_{t\leq x}\;\bar{P}(t,\vec{x},\vec{\alpha})\right]\circ\left[f,p_{1}^{n,m},...,p_{n+m}^{n,m}\right]
\]

\end_inset

Pero el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "cuantificacion"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que 
\begin_inset Formula $\lambda x\vec{x}\vec{\alpha}\left[(\exists t\in\omega)_{t\leq x}\;\bar{P}(t,\vec{x},\vec{\alpha})\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 por lo cual tenemos que 
\begin_inset Formula $\chi_{D_{M(\bar{P})}}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 lo es.
\end_layout

\begin_layout Standard
Sea
\begin_inset Formula 
\[
P_{1}=\lambda t\vec{x}\vec{\alpha}\left[\bar{P}(t,\vec{x},\vec{\alpha})\wedge(\forall j\in\omega)_{j\leq t}\;j=t\vee\lnot\bar{P}(j,\vec{x},\vec{\alpha})\right]
\]

\end_inset

Note que 
\begin_inset Formula $P_{1}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-total.
 Dejamos al lector usando lemas anteriores probar que 
\begin_inset Formula $P_{1}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 Ademas notese que para 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 se tiene que
\begin_inset Formula 
\[
P_{1}(t,\vec{x},\vec{\alpha})=1\text{ si y solo si }(\vec{x},\vec{\alpha})\in D_{M(\bar{P})}\text{ y }t=M(\bar{P})(\vec{x},\vec{\alpha})
\]

\end_inset

Esto nos dice que
\begin_inset Formula 
\[
M(\bar{P})=\left(\lambda\vec{x}\vec{\alpha}\left[\prod_{t=0}^{f(\vec{x},\vec{\alpha})}t^{P_{1}(t,\vec{x},\vec{\alpha})}\right]\right)|_{D_{M(\bar{P})}}
\]

\end_inset

por lo cual para probar que 
\begin_inset Formula $M(\bar{P})$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 solo nos resta probar que
\begin_inset Formula 
\[
F=\lambda\vec{x}\vec{\alpha}\left[\prod_{t=0}^{f(\vec{x},\vec{\alpha})}t^{P_{1}(t,\vec{x},\vec{\alpha})}\right]
\]

\end_inset

lo es.
 Pero
\begin_inset Formula 
\[
F=\lambda xy\vec{x}\vec{\alpha}\left[\prod_{t=x}^{y}t^{P_{1}(t,\vec{x},\vec{\alpha})}\right]\circ\left[C_{0}^{n,m},f,p_{1}^{n,m},...,p_{n+m}^{n,m}\right]
\]

\end_inset

y por lo tanto el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "iteracion"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que 
\begin_inset Formula $F$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
OBSERVACION:
 No siempre que 
\begin_inset Formula $P$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 tendremos que 
\begin_inset Formula $M(P)$
\end_inset

 lo sera.
 Notese que si 
\begin_inset Formula $M(P)$
\end_inset

 fuera 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 cada ves que 
\begin_inset Formula $P$
\end_inset

 lo sea,
 entonces tendriamos que 
\begin_inset Formula $\mathrm{PR}^{\Sigma}=\mathrm{R}^{\Sigma}$
\end_inset

 (justifique) lo cual contradiria la Proposicion 
\begin_inset CommandInset ref
LatexCommand ref
reference "recursivo no implica PR"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 Mas adelante veremos un ejemplo natural de un predicado 
\begin_inset Formula $P$
\end_inset

 el cual es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 pero 
\begin_inset Formula $M(P)$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
El lema de minimizacion recien probado es muy util como lo veremos en los siguientes dos lemas.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "cociente y resto"

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Las siguientes funciones son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $\begin{array}[t]{rll}
Q:\omega\times\mathbf{N} & \rightarrow & \omega\\
(x,y) & \rightarrow & \text{cociente de la division de }x\text{ por }y
\end{array}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset


\begin_inset Formula $\begin{array}[t]{rll}
R:\omega\times\mathbf{N} & \rightarrow & \omega\\
(x,y) & \rightarrow & \text{resto de la division de }x\text{ por }y
\end{array}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (a) Ya vimos anteriormente que 
\begin_inset Formula $Q=M(P)$
\end_inset

,
 donde 
\begin_inset Formula $P^{\prime}=\lambda tx_{1}x_{2}\left[x_{1}\geq t.x_{2}\text{ y }x_{1}<(t+1).x_{2}\right]$
\end_inset

.
 Ya que 
\begin_inset Formula $P^{\prime}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 y
\begin_inset Formula 
\[
Q(x_{1},x_{2})\leq p_{1}^{2,0}(x_{1},x_{2}),\text{ para cada }(x_{1},x_{2})\in\omega\times\mathbf{N}
\]

\end_inset

(b) del Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "minimizacion"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 implica que 
\begin_inset Formula $Q\in\mathrm{PR}^{\Sigma}$
\end_inset

.
\end_layout

\begin_layout Standard
(b) Notese que
\begin_inset Formula 
\[
R=\lambda xy\left[x\dot{-}Q(x,y).y\right]
\]

\end_inset

y por lo tanto 
\begin_inset Formula $R\in\mathrm{PR}^{\Sigma}$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 23:
\end_layout

\end_inset

Dados 
\begin_inset Formula $x,y\in\omega$
\end_inset

 tales que 
\begin_inset Formula $x\neq0$
\end_inset

 o 
\begin_inset Formula $y\neq0$
\end_inset

,
 usaremos 
\begin_inset Formula $mcd(x,y)$
\end_inset

 para denotar el maximo comun divisor de 
\begin_inset Formula $x$
\end_inset

 e 
\begin_inset Formula $y$
\end_inset

,
 es decir el mayor numero que divide a 
\begin_inset Formula $x$
\end_inset

 y divide a 
\begin_inset Formula $y$
\end_inset

.
 Note que 
\begin_inset Formula $M=\lambda xy[mcd(x,y)]$
\end_inset

 tiene dominio igual a 
\begin_inset Formula $\omega^{2}-\{(0,0)\}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $M$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 (Hint:
 use la REGLA U)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 23,5:
\end_layout

\end_inset

Dados 
\begin_inset Formula $x,y\in\mathbf{N}$
\end_inset

,
 usaremos 
\begin_inset Formula $mcm(x,y)$
\end_inset

 para denotar el minimo comun multiplo de 
\begin_inset Formula $x$
\end_inset

 e 
\begin_inset Formula $y$
\end_inset

,
 es decir el menor numero no nulo que es multiplo de 
\begin_inset Formula $x$
\end_inset

 y de 
\begin_inset Formula $y$
\end_inset

.
 Note que 
\begin_inset Formula $G=\lambda xy[mcm(x,y)]$
\end_inset

 tiene dominio igual a 
\begin_inset Formula $\mathbf{N}^{2}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $G$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Entonces la funcion
\begin_inset Formula 
\[
\begin{array}[t]{rll}
pr:\mathbf{N} & \rightarrow & \omega\\
n & \rightarrow & n\text{-esimo numero primo}
\end{array}
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Para ver que 
\begin_inset Formula $pr$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 veremos que la extension 
\begin_inset Formula $h:\omega\rightarrow\omega$
\end_inset

,
 dada por 
\begin_inset Formula $h(0)=0$
\end_inset

 y 
\begin_inset Formula $h(n)=pr(n)$
\end_inset

,
 
\begin_inset Formula $n\geq1$
\end_inset

,
 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Luego 
\begin_inset Formula $pr=h|_{\mathbf{N}}$
\end_inset

 resultara 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 por ser la restriccion de una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 a un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Primero note que
\begin_inset Formula 
\begin{align*}
h(0) & =0\\
h(t+1) & =\min\nolimits_{i}\left(i\text{ es primo}\wedge i>h(t)\right)
\end{align*}

\end_inset

O sea que 
\begin_inset Formula $h=R\left(C_{0}^{0,0},g\right)$
\end_inset

,
 donde
\begin_inset Formula 
\[
\begin{array}[t]{rll}
g:\omega\times\omega & \rightarrow & \omega\\
(A,t) & \rightarrow & \min\nolimits_{i}\left(i\text{ es primo}\wedge i>A\right)
\end{array}
\]

\end_inset

Es decir que solo nos resta ver que 
\begin_inset Formula $g$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Pero notese que 
\begin_inset Formula $g=M(P)$
\end_inset

,
 donde 
\begin_inset Formula $P=\lambda iAt\left[i\text{ es primo}\wedge i>A\right]$
\end_inset

.
 Claramente 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 por lo cual para poder aplicar (b) del lema anterior debemos encontrar una funcion 
\begin_inset Formula $f:\omega\times\omega\rightarrow\omega$
\end_inset

 tal que
\begin_inset Formula 
\[
M(P)(A,t)\leq f(A,t)\text{, para cada }(A,t)\in\omega^{2}
\]

\end_inset

Aceptaremos sin prueba que
\begin_inset Formula 
\[
\min\nolimits_{i}\left(i\text{ es primo}\wedge i>A\right)\leq A!+1\text{, para cada }A\in\omega
\]

\end_inset

Es decir que 
\begin_inset Formula $f=\lambda At[A!+1]$
\end_inset

 cumple lo deseado,
 lo cual implica que 
\begin_inset Formula $g=M(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 24:
\end_layout

\end_inset

(O) Si tiene ganas y recuerda las propiedades basicas de divisibilidad,
 intente un rato probar que
\begin_inset Formula 
\[
\min\nolimits_{i}\left(i\text{ es primo}\wedge i>A\right)\leq A!+1\text{, para cada }A\in\omega
\]

\end_inset

(Hint:
 factorice 
\begin_inset Formula $A!+1$
\end_inset

 en producto de primos y vea que alguno debe ser mayor que 
\begin_inset Formula $A$
\end_inset

.)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 25:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\lambda xi\left[(x)_{i}\right]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 (Hint:
 repase el significado de la expresion 
\begin_inset Formula $(x)_{i}$
\end_inset

 y encuentre entonces el dominio de 
\begin_inset Formula $\lambda xi\left[(x)_{i}\right]$
\end_inset

 antes de hacer el ejercicio)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 26:
\end_layout

\end_inset

Pruebe que la funcion 
\begin_inset Formula $Lt$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 27:
\end_layout

\end_inset

Sea 
\begin_inset Formula $C=\{z^{2}:z\in\omega\}$
\end_inset

.
 Sea 
\begin_inset Formula $f:C\rightarrow\omega$
\end_inset

 dada por 
\begin_inset Formula $f(x)=\sqrt{x}$
\end_inset

,
 para cada 
\begin_inset Formula $x\in C$
\end_inset

.
 Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 27,3:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

.
 Sea 
\begin_inset Formula $f:\Sigma^{\ast}\rightarrow\omega$
\end_inset

 dada por:
\begin_inset Formula 
\[
f(\alpha)=\max\{\left\vert \beta\right\vert :\beta\text{ ocurre en }\alpha\text{ y }\beta\text{ es capicua}\}
\]

\end_inset

Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 (Hint:
 use la Regla U) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Minimizacion de variable alfabetica
\end_layout

\begin_layout Standard
Supongamos que 
\begin_inset Formula $\Sigma\neq\emptyset$
\end_inset

.
 Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Recordemos que 
\begin_inset Formula $\leq$
\end_inset

 puede ser naturalmente extendido a un orden total sobre 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

.
 Sea 
\begin_inset Formula $P:D_{P}\subseteq\omega^{n}\times\Sigma^{\ast m}\times\Sigma^{\ast}\rightarrow\omega$
\end_inset

 un predicado.
 Cuando 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es tal que existe al menos un 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

 tal que 
\begin_inset Formula $P(\vec{x},\vec{\alpha},\alpha)=1$
\end_inset

,
 usaremos 
\begin_inset Formula $\min_{\alpha}^{\leq}P(\vec{x},\vec{\alpha},\alpha)$
\end_inset

 para denotar al menor 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

 tal que 
\begin_inset Formula $P(\vec{x},\vec{\alpha},\alpha)=1$
\end_inset

.
 Notese que la expresion 
\begin_inset Formula $\min_{\alpha}^{\leq}P(\vec{x},\vec{\alpha},\alpha)$
\end_inset

 esta definida solo para aquellas 
\begin_inset Formula $(n+m)$
\end_inset

-uplas 
\begin_inset Formula $(\vec{x},\vec{\alpha})$
\end_inset

 para las cuales hay al menos un 
\begin_inset Formula $\alpha$
\end_inset

 tal que se da 
\begin_inset Formula $P(\vec{x},\vec{\alpha},\alpha)=1$
\end_inset

.
 Dicho de otra forma,
 
\begin_inset Formula $\min_{\alpha}^{\leq}P(\vec{x},\vec{\alpha},\alpha)$
\end_inset

 no estara definida cuando para cada 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

 se de que 
\begin_inset Formula $(\vec{x},\vec{\alpha},\alpha)$
\end_inset

 no pertenece a 
\begin_inset Formula $D_{P}$
\end_inset

 o 
\begin_inset Formula $P(\vec{x},\vec{\alpha},\alpha)=0$
\end_inset

.
 Otro detalle importante a tener en cuenta es que la expresion 
\begin_inset Formula $\min_{\alpha}^{\leq}P(\vec{x},\vec{\alpha},\alpha)$
\end_inset

 no depende de la variable 
\begin_inset Formula $\alpha$
\end_inset

.
 Por ejemplo,
 las expresiones 
\begin_inset Formula $\min_{\alpha}^{\leq}P(\vec{x},\vec{\alpha},\alpha)$
\end_inset

 y 
\begin_inset Formula $\min_{\beta}^{\leq}P(\vec{x},\vec{\alpha},\beta)$
\end_inset

 son equivalentes en el sentido que estan definidas en las mismas 
\begin_inset Formula $(n+m)$
\end_inset

-uplas y cuando estan definidas asumen el mismo valor.
\end_layout

\begin_layout Standard
Definamos
\begin_inset Formula 
\[
\begin{array}{c}
M^{\leq}(P)=\lambda\vec{x}\vec{\alpha}\left[\min_{\alpha}^{\leq}P(\vec{x},\vec{\alpha},\alpha)\right]\end{array}
\]

\end_inset

Notese que
\begin_inset Formula 
\begin{align*}
D_{M^{\leq}(P)} & =\left\{ (\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}:(\exists\alpha\in\Sigma^{\ast})\ P(\vec{x},\vec{\alpha},\alpha)\right\} \\
M^{\leq}(P)(\vec{x},\vec{\alpha}) & =\min\nolimits_{\alpha}^{\leq}P(\vec{x},\vec{\alpha},\alpha)\text{, para cada }(\vec{x},\vec{\alpha})\in D_{M^{\leq}(P)}
\end{align*}

\end_inset


\begin_inset VSpace bigskip
\end_inset

Diremos que 
\begin_inset Formula $M^{\leq}(P)$
\end_inset

 es obtenida por 
\shape italic
minimizacion de variable alfabetica 
\shape default
a partir de 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Vemos un ejemplo.
 Sea 
\begin_inset Formula $\Sigma=\{@,a,b,c,d,e\}$
\end_inset

 y sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Sea 
\begin_inset Formula $Dir=\{\alpha_{1}\in\Sigma^{\ast}:\left\vert \alpha_{1}\right\vert _{@}=1\}$
\end_inset

 y definamos 
\begin_inset Formula $U:Dir\rightarrow\Sigma^{\ast}$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\[
U(\alpha_{1})=\text{unico }\alpha\text{ tal que }\alpha@\text{ es tramo inicial de }\alpha_{1}
\]

\end_inset

Sea
\begin_inset Formula 
\[
P=\lambda\alpha_{1}\alpha[\alpha_{1}\in Dir\text{ y }\alpha@\text{ es tramo inicial de }\alpha_{1}]
\]

\end_inset

Tenemos que
\begin_inset Formula 
\begin{align*}
D_{M^{\leq}(P)} & =\left\{ \alpha_{1}\in\Sigma^{\ast}:(\exists\alpha\in\Sigma^{\ast})\ P(\alpha_{1},\alpha)\right\} \\
 & =\left\{ \alpha_{1}\in\Sigma^{\ast}:\alpha_{1}\in Dir\text{ y }(\exists\alpha\in\Sigma^{\ast})\ \alpha@\text{ es tramo inicial de }\alpha_{1}\right\} \\
 & =Dir
\end{align*}

\end_inset

y ademas es claro que 
\begin_inset Formula $M^{\leq}(P)(\alpha_{1})=U(\alpha_{1})$
\end_inset

,
 para cada 
\begin_inset Formula $\alpha_{1}\in Dir$
\end_inset

,
 por lo cual 
\begin_inset Formula $M^{\leq}(P)=U$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Lema de minimizacion acotada de variable alfabetica de predicados 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Standard
Aceptaremos sin prueba el siguiente resultado.
 Su prueba es rutinaria y se basa en el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "minimizacion"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "minimizacion1"

\end_inset

Supongamos que 
\begin_inset Formula $\Sigma\neq\emptyset$
\end_inset

.
 Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

,
 sean 
\begin_inset Formula $n,m\geq0$
\end_inset

 y sea 
\begin_inset Formula $P:D_{P}\subseteq\omega^{n}\times\Sigma^{\ast m}\times\Sigma^{\ast}\rightarrow\omega$
\end_inset

 un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Entonces
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $M^{\leq}(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

Si existe una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset Formula $f:\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 tal que
\begin_inset Formula 
\[
\left\vert M^{\leq}(P)(\vec{x},\vec{\alpha})\right\vert =\left\vert \min\nolimits_{\alpha}^{\leq}P(\vec{x},\vec{\alpha},\alpha)\right\vert \leq f(\vec{x},\vec{\alpha})\text{, para cada }(\vec{x},\vec{\alpha})\in D_{M^{\leq}(P)}\text{,}
\]

\end_inset

entonces 
\begin_inset Formula $M^{\leq}(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 28:
\end_layout

\end_inset

Pruebe que la funcion 
\begin_inset Formula $U$
\end_inset

 del ejemplo anterior es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Por que se elijieron los nombres 
\begin_inset Formula $Dir$
\end_inset

 y 
\begin_inset Formula $U$
\end_inset

?
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 29:
\end_layout

\end_inset

Dada una palabra 
\begin_inset Formula $\alpha\in\Sigma^{\ast}$
\end_inset

,
 si hay una palabra 
\begin_inset Formula $\rho$
\end_inset

 tal que 
\begin_inset Formula $\rho^{2}=\alpha$
\end_inset

,
 usaremos 
\begin_inset Formula $\sqrt{\alpha}$
\end_inset

 para denotar a 
\begin_inset Formula $\rho$
\end_inset

.
 Notese que la expresion 
\begin_inset Formula $\sqrt{\alpha}$
\end_inset

 tiene sentido o esta definida solo para ciertas palabras.
 Pruebe que 
\begin_inset Formula $\lambda\alpha[\sqrt{\alpha}]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 30:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto no vacio y sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
Diga que funcion es 
\begin_inset Formula $M^{\leq}(\lambda\alpha_{1}\alpha_{2}\alpha\left[\alpha_{1}=\varepsilon\right])$
\end_inset


\end_layout

\begin_layout Enumerate
Diga que funcion es 
\begin_inset Formula $M^{\leq}(\lambda\alpha_{1}\alpha\left[\alpha^{2}=\alpha_{1}\vee\alpha=\alpha_{1}\right])$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 31:
\end_layout

\end_inset

V o F o I,
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto no vacio y sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Entonces 
\begin_inset Formula $p_{1}^{0,2}=M^{\leq}(\lambda\alpha_{1}\alpha\left[\alpha=\alpha_{1}\right])$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

 y sea 
\begin_inset Formula $P:D_{P}\subseteq\omega^{n}\times\Sigma^{\ast m}\times\Sigma^{\ast}\rightarrow\omega$
\end_inset

 un predicado,
 entonces
\begin_inset Formula 
\[
D_{M^{\leq}(P)}=\left\{ (\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}:(\exists\alpha\in\Sigma^{\ast})\ (\vec{x},\vec{\alpha},\alpha)\in D_{P}\right\} 
\]

\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

 y sea 
\begin_inset Formula $P:D_{P}\subseteq\omega^{n}\times\Sigma^{\ast m}\times\Sigma^{\ast}\rightarrow\omega$
\end_inset

 un predicado,
 entonces
\begin_inset Formula 
\begin{align*}
D_{M^{\leq}(P)} & =\left\{ (\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}:P(\vec{x},\vec{\alpha},\alpha)\wedge(\forall\beta\in\Sigma^{\ast})_{\beta<\alpha}\lnot P(\vec{x},\vec{\alpha},\beta)\right\} \\
M^{\leq}(P)(\vec{x},\vec{\alpha}) & =\alpha
\end{align*}

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 32:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto no vacio y sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Sea 
\begin_inset Formula $P=\lambda\alpha_{1}\alpha_{2}\alpha\left[\alpha_{1}\alpha=\alpha_{2}\right]$
\end_inset

.
 Describa la funcion 
\begin_inset Formula $M^{\leq}(P)$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 32,3:
\end_layout

\end_inset

(S) Sea 
\begin_inset Formula $M=\left(Q,\Sigma,\Gamma,\delta,q_{0},B,F\right)$
\end_inset

 una maquina de Turing y supongamos 
\begin_inset Formula $Q$
\end_inset

 es un alfabeto disjunto con 
\begin_inset Formula $\Gamma$
\end_inset

.
 Usaremos la notacion lambda respecto del alfabeto 
\begin_inset Formula $\Gamma\cup Q$
\end_inset

.
 Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Gamma\cup Q$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $P=\lambda\alpha_{1}\alpha[\alpha\in Q$
\end_inset

 y 
\begin_inset Formula $\alpha$
\end_inset

 ocurre en 
\begin_inset Formula $\alpha_{1}]$
\end_inset

.
 Encuentre 
\begin_inset Formula $D_{M^{\leq}(P)}$
\end_inset

.
 Que relacion hay entre la funcion 
\begin_inset Formula $St:Des\rightarrow Q$
\end_inset

 y 
\begin_inset Formula $M^{\leq}(P)$
\end_inset


\end_layout

\begin_layout Enumerate
Encuentre un predicado 
\begin_inset Formula $R$
\end_inset

 (modificando 
\begin_inset Formula $P$
\end_inset

) tal que 
\begin_inset Formula $M^{\leq}(R)=St$
\end_inset

.
\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $St$
\end_inset

 es 
\begin_inset Formula $(\Gamma\cup Q)$
\end_inset

-p.r.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerables
\end_layout

\begin_layout Standard
Ya que la nocion de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva es el modelo matematico Godeliano del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 nos podriamos preguntar entonces cual es el modelo matematico Godeliano del concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 Si prestamos atencion a la definicion de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable,
 notaremos que depende de la existencia de ciertas funciones 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables por lo cual la siguiente definicion cae de maduro:
\end_layout

\begin_layout Standard
Diremos que un conjunto 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 sera llamado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-recursivamente enumerable
\shape default
 cuando sea vacio o haya una funcion 
\begin_inset Formula $F:\omega\rightarrow\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 tal que 
\begin_inset Formula $I_{F}=S$
\end_inset

 y 
\begin_inset Formula $F_{(i)}$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva,
 para cada 
\begin_inset Formula $i\in\{1,...,n+m\}$
\end_inset

.
\end_layout

\begin_layout Standard
Deberia entonces quedar claro que si el concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva modeliza correctamente al concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 entonces el concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerable recien definido modeliza correctamente al concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 Sin envargo para probar algunos de los resultados basicos acerca de los conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerables,
 deberemos esperar a tener probada la equivalencia del paradigma Godeliano con el imperativo.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-recursivos
\end_layout

\begin_layout Standard
La version Godeliana del concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable es facil de dar:
 un conjunto 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 sera llamado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-recursivo
\shape default
 cuando la funcion 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 Todo conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerable pero esto lo probaremos mas adelante junto con otros resultados basicos sobre conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.,
 los cuales se prueban usando el modelo imperativo.
 Mas adelante daremos un ejemplo natural de un conjunto que es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 pero el cual no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 33:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $P:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 y 
\begin_inset Formula $Q:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 son predicados 
\begin_inset Formula $\Sigma$
\end_inset

-r.,
 entonces 
\begin_inset Formula $(P\vee Q)$
\end_inset

,
 
\begin_inset Formula $(P\wedge Q)$
\end_inset

 y 
\begin_inset Formula $\lnot P$
\end_inset

 lo son tambien.
\end_layout

\begin_layout Enumerate
Supongamos 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-recursivos.
 Entonces 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

,
 
\begin_inset Formula $S_{1}\cap S_{2}$
\end_inset

 y 
\begin_inset Formula $S_{1}-S_{2}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivos 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Independencia del alfabeto
\end_layout

\begin_layout Standard
El siguiente resultado es conceptualmente muy importante.
 Su prueba tiene cierta dificultad tecnica por lo cual la omitiremos.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Sean 
\begin_inset Formula $\Sigma$
\end_inset

 y 
\begin_inset Formula $\Gamma$
\end_inset

 alfabetos finitos cualesquiera.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset

Supongamos una funcion 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta y 
\begin_inset Formula $\Gamma$
\end_inset

-mixta,
 entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva (resp.
 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.) sii 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Gamma$
\end_inset

-recursiva (resp.
 
\begin_inset Formula $\Gamma$
\end_inset

-p.r.)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

Supongamos un conjunto 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixto y 
\begin_inset Formula $\Gamma$
\end_inset

-mixto,
 entonces 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo (resp.
 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.,
 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.) sii 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Gamma$
\end_inset

-recursivo (resp.
 
\begin_inset Formula $\Gamma$
\end_inset

-r.e.,
 
\begin_inset Formula $\Gamma$
\end_inset

-p.r.) 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 34:
\end_layout

\end_inset

(S) Explique con palabras por que no es obvio el resultado anterior
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 35:
\end_layout

\end_inset

(S) Que hubiera implicado acerca de la completitud del modelo Godeliano el hecho de que no fuera cierto (a) del teorema anterior?
 
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Guia 7
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Subsection*
El paradigma imperativo de Neumann:
 El lenguaje 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Standard
En esta seccion daremos una modelizacion matematica del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable utilizando un lenguaje de programacion teorico el cual depende del alfabeto 
\begin_inset Formula $\Sigma$
\end_inset

.
 Lo llamaremos 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 a dicho lenguaje.
 Dado que fue el matematico Von Neumann quien contribuyo al desarrollo de la primera computadora de proposito general (es decir a la cual se le pueden hacer correr programas tal como a las computadoras actuales),
 nos referiremos a este paradigma de computabilidad efectiva como el paradigma de Von Neumann.
\end_layout

\begin_layout Subsubsection*
Sintaxis de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Standard
Necesitaremos algunas funciones basicas para poder describir la sintaxis de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 en forma precisa.
 Recordemos que llamabamos 
\shape italic
numerales
\shape default
 a los siguientes simbolos
\begin_inset Formula 
\[
0\ 1\ 2\ 3\ 4\ 5\ 6\ 7\ 8\ 9
\]

\end_inset

Tambien recordemos que 
\begin_inset Formula $Num$
\end_inset

 denotaba el conjunto de los numerales.
 Sea 
\begin_inset Formula $Sig:Num^{\ast}\rightarrow Num^{\ast}$
\end_inset

 definida de la siguiente manera
\begin_inset Formula 
\begin{align*}
Sig(\varepsilon) & =1\\
Sig(\alpha0) & =\alpha1\\
Sig(\alpha1) & =\alpha2\\
Sig(\alpha2) & =\alpha3\\
Sig(\alpha3) & =\alpha4\\
Sig(\alpha4) & =\alpha5\\
Sig(\alpha5) & =\alpha6\\
Sig(\alpha6) & =\alpha7\\
Sig(\alpha7) & =\alpha8\\
Sig(\alpha8) & =\alpha9\\
Sig(\alpha9) & =Sig(\alpha)0
\end{align*}

\end_inset

Definamos 
\begin_inset Formula $Dec:\omega\rightarrow Num^{\ast}$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\begin{align*}
Dec(0) & =\varepsilon\\
Dec(n+1) & =Sig(Dec(n))
\end{align*}

\end_inset

Notese que para 
\begin_inset Formula $n\in\mathbf{N}$
\end_inset

,
 la palabra 
\begin_inset Formula $Dec(n)$
\end_inset

 es la notacion usual decimal de 
\begin_inset Formula $n$
\end_inset

.
 Para hacer mas agil la notacion escribiremos 
\begin_inset Formula $\bar{n}$
\end_inset

 en lugar de 
\begin_inset Formula $Dec(n)$
\end_inset

.
 Notese que,
 en virtud de esta convencion notacional se tiene que 
\begin_inset Formula $Dec=\lambda n[\bar{n}]$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1:
\end_layout

\end_inset

Hacer
\end_layout

\begin_deeper
\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $Sig$
\end_inset

 y 
\begin_inset Formula $Dec$
\end_inset

 son 
\begin_inset Formula $Num$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Gamma$
\end_inset

 un alfabeto que contiene a 
\begin_inset Formula $Num$
\end_inset

.
 Pruebe sin usar el teorema de independencia del alfabeto que 
\begin_inset Formula $Sig$
\end_inset

 y 
\begin_inset Formula $Dec$
\end_inset

 son 
\begin_inset Formula $\Gamma$
\end_inset

-p.r..
 Hint:
 extienda 
\begin_inset Formula $Sig$
\end_inset

 a una 
\begin_inset Formula $\widetilde{Sig}$
\end_inset

 que sea 
\begin_inset Formula $\Gamma$
\end_inset

-total.
 Use 
\begin_inset Formula $\widetilde{Sig}$
\end_inset

 para definir una 
\begin_inset Formula $g$
\end_inset

 que sea 
\begin_inset Formula $\Gamma$
\end_inset

-p.r.
 y tal que 
\begin_inset Formula $Dec=R(C_{\varepsilon}^{0,0},g)$
\end_inset

 (respecto del alfabeto 
\begin_inset Formula $\Gamma$
\end_inset

) 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
La sintaxis de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 sera dada utilizando solo simbolos del alfabeto 
\begin_inset Formula $\Sigma\cup\Sigma_{p}$
\end_inset

,
 donde
\begin_inset Formula 
\[
\Sigma_{p}=Num\cup\left\{ \leftarrow,+,\dot{-},.,\neq,^{\curvearrowright},\varepsilon,\mathrm{N},\mathrm{K},\mathrm{P},\mathrm{L},\mathrm{I},\mathrm{F},\mathrm{G},\mathrm{O},\mathrm{T},\mathrm{B},\mathrm{E},\mathrm{S}\right\} .
\]

\end_inset

Cabe aclarar que la palabra de longitud 
\begin_inset Formula $0$
\end_inset

 no es un elemento de 
\begin_inset Formula $\Sigma_{p}$
\end_inset

 sino que la letra griega 
\begin_inset Formula $\varepsilon$
\end_inset

 que usualmente denota esta palabra,
 lo es.
 Tambien notese que en 
\begin_inset Formula $\Sigma_{p}$
\end_inset

 hay simbolos que a veces representan operaciones como por ejemplo 
\begin_inset Formula $+$
\end_inset

 y 
\begin_inset Formula $\dot{-}$
\end_inset

,
 pero deberia quedar claro que en 
\begin_inset Formula $\Sigma_{p}$
\end_inset

 estan los simbolos 
\begin_inset Formula $+$
\end_inset

 y 
\begin_inset Formula $\dot{-}$
\end_inset

 y no las operaciones que ellos denotan.
\end_layout

\begin_layout Standard
Las palabras de la forma 
\begin_inset Formula $\mathrm{N}\bar{k}$
\end_inset

 con 
\begin_inset Formula $k\in\mathbf{N}$
\end_inset

,
 son llamadas 
\shape italic
variables numericas de 
\shape default

\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

.
 Las palabras de la forma 
\begin_inset Formula $\mathrm{P}\bar{k}$
\end_inset

 con 
\begin_inset Formula $k\in\mathbf{N}$
\end_inset

,
 son llamadas 
\shape italic
variables alfabeticas de 
\shape default

\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

.
 Las palabras de la forma 
\begin_inset Formula $\mathrm{L}\bar{k}$
\end_inset

 con 
\begin_inset Formula $k\in\mathbf{N}$
\end_inset

,
 son llamadas 
\shape italic
labels de 
\shape default

\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

.
 Una 
\shape italic
instruccion basica de 
\shape default

\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 es una palabra de 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})^{\ast}$
\end_inset

 la cual es de alguna de las siguientes formas
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{k}+1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{k}\dot{-}1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{N}\bar{k}\leftarrow0$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{P}\bar{k}\leftarrow\mathrm{P}\bar{k}.a$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{P}\bar{k}\leftarrow$
\end_inset

 
\begin_inset Formula $^{\curvearrowright}\mathrm{P}\bar{k}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{P}\bar{k}\leftarrow\mathrm{P}\bar{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{P}\bar{k}\leftarrow\varepsilon$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{IF}\;\mathrm{N}\bar{k}\neq0\;\mathrm{GOTO}\;\mathrm{L}\bar{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{IF}\;\mathrm{P}\bar{k}\;\mathrm{BEGINS}\;a\;\mathrm{GOTO}\;\mathrm{L}\bar{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{GOTO}\;\mathrm{L}\bar{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $\mathrm{SKIP}$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
donde 
\begin_inset Formula $a\in\Sigma$
\end_inset

 y 
\begin_inset Formula $k,n\in\mathbf{N}$
\end_inset

.
 Como puede observarse para que las instrucciones basicas sean mas lejibles usamos espacios entre ciertos simbolos.
 Por ejemplo,
 hemos escrito 
\begin_inset Formula $\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{k}+1$
\end_inset

 pero en realidad nos referimos a la palabra
\begin_inset Formula 
\[
\mathrm{N}\bar{k}\mathrm{\leftarrow}\text{\textrm{N}}\bar{k}\mathrm{+1}
\]

\end_inset

cuya longitud es 
\begin_inset Formula $2\left\vert \bar{k}\right\vert +5$
\end_inset

.
 Otro ejemplo,
 hemos escrito 
\begin_inset Formula $\mathrm{IF}\;\mathrm{P}\bar{k}\;\mathrm{BEGINS}\;a\;\mathrm{GOTO}\;\mathrm{L}\bar{n}$
\end_inset

 pero en realidad nos referiamos a la palabra 
\begin_inset Formula $\mathrm{IFP}\bar{k}\mathrm{BEGINS}a\mathrm{GOTOL}\bar{n}$
\end_inset

 cuya longitud es 
\begin_inset Formula $\left\vert \bar{k}\right\vert +\left\vert \bar{n}\right\vert +15$
\end_inset

.
\end_layout

\begin_layout Standard
Una 
\shape italic
instruccion de 
\shape default

\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 es ya sea una instruccion basica de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 o una palabra de la forma 
\begin_inset Formula $\alpha I$
\end_inset

,
 donde 
\begin_inset Formula $\alpha\in\{\mathrm{L}\bar{n}:n\in\mathbf{N}\}$
\end_inset

 y 
\begin_inset Formula $I$
\end_inset

 es una instruccion basica de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

.
 Usaremos 
\begin_inset Formula $\mathrm{Ins}^{\Sigma}$
\end_inset

 para denotar el conjunto de todas las instrucciones de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

.
 Cuando la instruccion 
\begin_inset Formula $I$
\end_inset

 es de la forma 
\begin_inset Formula $\mathrm{L}\bar{n}J$
\end_inset

 con 
\begin_inset Formula $J$
\end_inset

 una instruccion basica,
 diremos que 
\begin_inset Formula $\mathrm{L}\bar{n}$
\end_inset

 es el 
\shape italic
label
\shape default
 de 
\begin_inset Formula $I$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1,3:
\end_layout

\end_inset

V o F o I,
 justificar
\end_layout

\begin_deeper
\begin_layout Enumerate
Para cada 
\begin_inset Formula $n\in\mathbf{N}$
\end_inset

,
 se tiene que 
\begin_inset Formula $\bar{n}\in\omega$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $k\in\mathbf{N}$
\end_inset

,
 entonces 
\begin_inset Formula $\mathrm{P}\bar{k}\mathrm{\leftarrow}$
\end_inset

 es una instruccion de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto.
 Entonces 
\begin_inset Formula $\mathrm{Ins}^{\Sigma}$
\end_inset

 es un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-mixto
\end_layout

\begin_layout Enumerate
\begin_inset Formula $Ti(\mathrm{Ins}^{\Sigma})=\mathrm{PALABRA}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $I\in\mathrm{Ins}^{\Sigma}$
\end_inset

,
 entonces 
\begin_inset Formula $Ti(I)=\mathrm{PALABRA}$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $I$
\end_inset

 es una instruccion de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 y 
\begin_inset Formula $n\in\mathbf{N}$
\end_inset

 es tal que 
\begin_inset Formula $\mathrm{L}\bar{n}$
\end_inset

 es tramo inicial de 
\begin_inset Formula $I$
\end_inset

,
 entonces 
\begin_inset Formula $\mathrm{L}\bar{n}$
\end_inset

 es el label de 
\begin_inset Formula $I$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Damos a continuacion,
 a modo de ejemplo,
 la interpretacion intuitiva asociada a ciertas instrucciones basicas de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

:
\begin_inset Formula 
\begin{align*}
\text{INSTRUCCION} & :\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{k}\dot{-}1\\
\text{INTERPRETACION} & :\begin{array}[t]{c}
\text{Si el contenido de }\mathrm{N}\bar{k}\text{ es }0\text{ dejarlo sin modificar; en}\\
\text{caso contrario disminuya en 1 el contenido de }\mathrm{N}\bar{k}\;
\end{array}\\
\text{INSTRUCCION} & :\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{n}\\
\text{INTERPRETACION} & :\begin{array}[t]{c}
\text{Copiar en }\mathrm{N}\bar{k}\text{ el contenido de }\mathrm{N}\bar{n}\text{ }\\
\text{sin modificar el contenido de }\mathrm{N}\bar{n}
\end{array}\\
\text{INSTRUCCION} & :\mathrm{P}\bar{k}\leftarrow^{\curvearrowright}\mathrm{P}\bar{k}\\
\text{INTERPRETACION} & :\begin{array}[t]{l}
\text{Si el contenido de }\mathrm{P}\bar{k}\text{ es }\varepsilon\text{ dejarlo sin modificar;}\\
\text{en caso contrario remueva el 1er simbolo del}\\
\text{contenido de }\mathrm{P}\bar{k}
\end{array}
\end{align*}

\end_inset


\begin_inset Formula 
\begin{align*}
\text{INSTRUCCION} & :\mathrm{P}\bar{k}\leftarrow\mathrm{P}\bar{k}.a\\
\text{INTERPRETACION} & :\begin{array}[t]{l}
\text{Modificar el contenido de }\mathrm{P}\bar{k}\text{ agregandole}\\
\text{el simbolo }a\text{ a la derecha}
\end{array}\\
\text{INSTRUCCION} & :\mathrm{IF}\;\mathrm{P}\bar{k}\;\mathrm{BEGINS}\;a\;\mathrm{GOTO}\;\mathrm{L}\bar{m}\\
\text{INTERPRETACION} & :\begin{array}[t]{l}
\text{Si el contenido de }\mathrm{P}\bar{k}\text{ comiensa con }a\text{, ejecute}\\
\text{la primer instruccion con label }\mathrm{L}\bar{m}\text{; en caso}\\
\text{contrario ejecute la siguiente instruccion}
\end{array}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1,6:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\uparrow\}$
\end_inset

.
 Sea 
\begin_inset Formula $L=\{\mathrm{IFP}\bar{k}\mathrm{BEGINS}a\mathrm{GOTOL}\bar{n}:a\in\Sigma$
\end_inset

 y 
\begin_inset Formula $k,n\in\mathbf{N}\}$
\end_inset

.
 Note que 
\begin_inset Formula $L\subseteq\mathrm{Ins}^{\Sigma}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $L$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r..
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Un 
\shape italic
programa de 
\shape default

\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 es una palabra de la forma
\begin_inset Formula 
\[
I_{1}I_{2}...I_{n}
\]

\end_inset

donde 
\begin_inset Formula $n\geq1$
\end_inset

,
 
\begin_inset Formula $I_{1},...,I_{n}\in\mathrm{Ins}^{\Sigma}$
\end_inset

 y ademas se cumple la siguiente propiedad,
 llamada 
\shape italic
la ley de los GOTO
\shape default
,
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(G)
\end_layout

\end_inset

Para cada 
\begin_inset Formula $i\in\{1,...,n\}$
\end_inset

,
 si 
\begin_inset Formula $\mathrm{GOTOL}\bar{m}$
\end_inset

 es un tramo final de 
\begin_inset Formula $I_{i}$
\end_inset

,
 entonces existe 
\begin_inset Formula $j\in\{1,...,n\}$
\end_inset

 tal que 
\begin_inset Formula $I_{j}$
\end_inset

 tiene label 
\begin_inset Formula $\mathrm{L}\bar{m}$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
Usaremos 
\begin_inset Formula $\mathrm{Pro}^{\Sigma}$
\end_inset

 para denotar el conjunto de todos los programas de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

.
 Como es usual cuando escribamos un programa lo haremos linea por linea,
 con la finalidad de que sea mas lejible.
 Por ejemplo,
 escribiremos
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}2 & \mathrm{N}12\leftarrow\mathrm{N}12\dot{-}1\\
 & \mathrm{P}1\leftarrow\text{ }^{\curvearrowright}\mathrm{P}1\\
 & \mathrm{IF\;N}12\neq0\;\mathrm{GOTO}\;\mathrm{L}2
\end{array}
\]

\end_inset

en lugar de
\begin_inset Formula 
\[
\mathrm{L}2\mathrm{N}12\mathrm{\leftarrow}\text{N}12\mathrm{\dot{-}}1\mathrm{P}1\mathrm{\leftarrow}^{\curvearrowright}\mathrm{P}1\mathrm{IFN}12\mathrm{\neq}0\mathrm{GOTOL}2
\]

\end_inset

Un importante resultado es el siguiente lema que garantiza que los programas pueden ser parseados en forma unica como concatenacion de instrucciones.
 Lo aceptaremos sin demostracion.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Se tiene que:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset

Si 
\begin_inset Formula $I_{1}...I_{n}=J_{1}...J_{m}$
\end_inset

,
 con 
\begin_inset Formula $I_{1},...,I_{n},J_{1},...,J_{m}\in\mathrm{Ins}^{\Sigma}$
\end_inset

,
 entonces 
\begin_inset Formula $n=m$
\end_inset

 y 
\begin_inset Formula $I_{j}=J_{j}$
\end_inset

 para cada 
\begin_inset Formula $j\geq1$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

Si 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

,
 entonces existe una unica sucesion de instrucciones 
\begin_inset Formula $I_{1},...,I_{n}$
\end_inset

 tal que 
\begin_inset Formula $\mathcal{P}=I_{1}...I_{n}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
(b) del lema anterior nos dice que dado un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

,
 tenemos univocamente determinados 
\begin_inset Formula $n(\mathcal{P})\in\mathbf{N}$
\end_inset

 y 
\begin_inset Formula $I_{1}^{\mathcal{P}},...,I_{n(\mathcal{P})}^{\mathcal{P}}\in\mathrm{Ins}^{\Sigma}$
\end_inset

 tales que 
\begin_inset Formula $\mathcal{P}=I_{1}^{\mathcal{P}}...I_{n(\mathcal{P})}^{\mathcal{P}}$
\end_inset

.
 Definamos tambien
\begin_inset Formula 
\[
I_{i}^{\mathcal{P}}=\varepsilon
\]

\end_inset

cuando 
\begin_inset Formula $i=0$
\end_inset

 o 
\begin_inset Formula $i>n(\mathcal{P})$
\end_inset

.
 Notese que las expresiones 
\begin_inset Formula $n(\alpha)$
\end_inset

 y 
\begin_inset Formula $I_{i}^{\alpha}$
\end_inset

 estan definidas solo cuando 
\begin_inset Formula $\alpha$
\end_inset

 es un programa (y 
\begin_inset Formula $i$
\end_inset

 es un elemento de 
\begin_inset Formula $\omega$
\end_inset

),
 es decir,
 cierta palabra del alfabeto 
\begin_inset Formula $\Sigma\cup\Sigma_{p}$
\end_inset

.
 O sea que cuando usemos notacion lambda que involucre dichas expresiones,
 el alfabeto respecto del cual usaremos dicha notacion sera 
\begin_inset Formula $\Sigma\cup\Sigma_{p}$
\end_inset

.
 Esto nos dice entonces que 
\begin_inset Formula $\lambda\alpha\lbrack n(\alpha)]$
\end_inset

 tiene dominio igual a 
\begin_inset Formula $\mathrm{Pro}^{\Sigma}\subseteq(\Sigma\cup\Sigma_{p})^{\ast}$
\end_inset

 y 
\begin_inset Formula $\lambda i\alpha\lbrack I_{i}^{\alpha}]$
\end_inset

 tiene dominio igual a 
\begin_inset Formula $\omega\times\mathrm{Pro}^{\Sigma}$
\end_inset

.
 Para hacer mas sugestiva la notacion a veces escribiremos 
\begin_inset Formula $\lambda\mathcal{P}[n(\mathcal{P})]$
\end_inset

 y 
\begin_inset Formula $\lambda i\mathcal{P}[I_{i}^{\mathcal{P}}]$
\end_inset

 en lugar de 
\begin_inset Formula $\lambda\alpha\lbrack n(\alpha)]$
\end_inset

 y 
\begin_inset Formula $\lambda i\alpha\lbrack I_{i}^{\alpha}]$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

V o F o I,
 justificar
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathrm{Ins}^{\Sigma}\subseteq\mathrm{Pro}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathrm{Ins}^{\Sigma}\cap\mathrm{Pro}^{\Sigma}=\emptyset$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda i\mathcal{P}\left[I_{i}^{\mathcal{P}}\right]$
\end_inset

 tiene dominio igual a 
\begin_inset Formula $\{(i,\mathcal{P})\in\mathbf{N}\times\mathrm{Pro}^{\Sigma}:i\leq n(\mathcal{P})\}$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto.
 Si 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

,
 entonces 
\begin_inset Formula $\mathcal{P}\in\overset{n(\mathcal{P})\text{ veces}}{\ \overbrace{\mathrm{Ins}^{\Sigma}\times\cdots\times\mathrm{Ins}^{\Sigma}}}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

(S) Si 
\begin_inset Formula $\mathcal{P}_{1},\mathcal{P}_{2}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 y 
\begin_inset Formula $\mathcal{P}_{1}\mathcal{P}_{1}=\mathcal{P}_{2}\mathcal{P}_{2}$
\end_inset

,
 entonces 
\begin_inset Formula $\mathcal{P}_{1}=\mathcal{P}_{2}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Semantica de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Standard
Para definir la semantica nos sera util la funcion 
\begin_inset Formula $Bas:\mathrm{Ins}^{\Sigma}\rightarrow(\Sigma\cup\Sigma_{p})^{\ast}$
\end_inset

,
 dada por
\begin_inset Formula 
\[
Bas(I)=\left\{ \begin{array}{ccl}
J &  & \text{si }I\text{ es de la forma }\mathrm{L}\bar{k}J\text{ con }J\in\mathrm{Ins}^{\Sigma}\\
I &  & \text{caso contrario}
\end{array}\right.
\]

\end_inset

Recordemos que para una palabra 
\begin_inset Formula $\alpha$
\end_inset

 definiamos
\begin_inset Formula 
\[
^{\curvearrowright}\alpha=\left\{ \begin{array}{lll}
\left[\alpha\right]_{2}...\left[\alpha\right]_{\left\vert \alpha\right\vert } & \text{si} & \left\vert \alpha\right\vert \geq2\\
\varepsilon & \text{si} & \left\vert \alpha\right\vert \leq1
\end{array}\right.
\]

\end_inset

Definamos
\begin_inset Formula 
\begin{align*}
\omega^{\left[\mathbf{N}\right]} & =\left\{ (s_{1},s_{2},...)\in\omega^{\mathbf{N}}:\text{ hay }n\in\mathbf{N}\text{ tal que }s_{i}=0\text{, para }i\geq n\right\} \\
\Sigma^{\ast\left[\mathbf{N}\right]} & =\left\{ (\sigma_{1},\sigma_{2},...)\in\Sigma^{\ast\mathbf{N}}:\text{ hay }n\in\mathbf{N}\text{ tal que }\sigma_{i}=\varepsilon\text{, para }i\geq n\right\} .
\end{align*}

\end_inset

Asumiremos siempre que en una computacion via un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

,
 todas exepto una cantidad finita de las variables numericas tienen el valor 
\begin_inset Formula $0$
\end_inset

 y todas exepto una cantiad finita de las variables alfabeticas tienen el valor 
\begin_inset Formula $\varepsilon$
\end_inset

.
 Esto no quita generalidad a nuestra modelizacion del funcionamiento de los programas ya que todo programa envuelve una cantidad finita de variables.
\end_layout

\begin_layout Standard
Un 
\shape italic
estado
\shape default
 es un par
\begin_inset Formula 
\[
(\vec{s},\vec{\sigma})=((s_{1},s_{2},...),(\sigma_{1},\sigma_{2},...))\in\omega^{\left[\mathbf{N}\right]}\times\Sigma^{\ast\left[\mathbf{N}\right]}.
\]

\end_inset

Si 
\begin_inset Formula $i\geq1$
\end_inset

,
 entonces diremos que 
\begin_inset Formula $s_{i}$
\end_inset

 es el 
\shape italic
contenido 
\shape default
o
\shape italic

\begin_inset space \space{}
\end_inset

valor 
\shape default
de la variable 
\begin_inset Formula $\mathrm{N}\bar{\imath}$
\end_inset

 en el estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 y 
\begin_inset Formula $\sigma_{i}$
\end_inset

 es el 
\shape italic
contenido 
\shape default
o
\shape italic

\begin_inset space \space{}
\end_inset

valor 
\shape default
de la variable 
\begin_inset Formula $\mathrm{P}\bar{\imath}$
\end_inset

 en el estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
 Es decir,
 intuitivamente hablando,
 un estado es un par de infinituplas que contiene la informacion de que valores tienen alojados las distintas variables.
\end_layout

\begin_layout Standard
Imaginemos que corremos un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 partiendo de un estado inicial 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
 Por supuesto la primera instruccion a realizar sera 
\begin_inset Formula $I_{1}^{\mathcal{P}}$
\end_inset

 pero,
 dado que 
\begin_inset Formula $I_{1}^{\mathcal{P}}$
\end_inset

 puede ser de tipo GOTO,
 la segunda instruccion que realizaremos puede no ser 
\begin_inset Formula $I_{2}^{\mathcal{P}}$
\end_inset

.
 Es decir en cada paso iremos decidiendo en funcion de la instruccion ejecutada cual es la siguiente instruccion a realizar.
 O sea que mientras corremos 
\begin_inset Formula $\mathcal{P}$
\end_inset

,
 en cada paso la informacion importante a tener en cuenta es,
 por una parte,
 cuales son los valores que tienen cada una de las variables y,
 por otra parte,
 cual es la instruccion que nos tocara realizar a continuacion.
 Esto da lugar al concepto de descripcion instantanea,
 a saber,
 un objeto matematico que describe en un instante dado de la computacion cuales son los valores de las variables y cual es la instruccion que se debe realizar en el instante siguiente.
 Mas formalmente una 
\shape italic
descripcion instantanea
\shape default
 es una terna 
\begin_inset Formula $(i,\vec{s},\vec{\sigma})$
\end_inset

 tal que 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 es un estado e 
\begin_inset Formula $i\in\omega$
\end_inset

.
 Es decir que 
\begin_inset Formula $\omega\times\omega^{\left[\mathbf{N}\right]}\times\Sigma^{\ast\left[\mathbf{N}\right]}$
\end_inset

 es el conjunto formado por todas las descripciones instantaneas.
 Intuitivamente hablando,
 cuando 
\begin_inset Formula $i\in\{1,...,n(\mathcal{P})\}$
\end_inset

,
 la descripcion instantanea 
\begin_inset Formula $(i,\vec{s},\vec{\sigma})$
\end_inset

 nos dice que las variables estan en el estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 y que la instruccion que 
\shape italic
debemos realizar
\shape default
 es 
\begin_inset Formula $I_{i}^{\mathcal{P}}$
\end_inset

.
 Dado que sera conveniente para simplificar el tratamiento formal,
 nos abstraeremos un poco y cuando 
\begin_inset Formula $i=0$
\end_inset

 o 
\begin_inset Formula $i>n(\mathcal{P})$
\end_inset

 pensaremos tambien que la descripcion instantanea 
\begin_inset Formula $(i,\vec{s},\vec{\sigma})$
\end_inset

 nos dice que las variables estan en el estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 y que debemos realizar 
\begin_inset Formula $I_{i}^{\mathcal{P}}=\varepsilon$
\end_inset

 (aunque por supuesto no podremos realizarla ya que no es una instruccion).
\end_layout

\begin_layout Standard
Dado un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 definiremos a continuacion una funcion
\begin_inset Formula 
\[
S_{\mathcal{P}}:\omega\times\omega^{\left[\mathbf{N}\right]}\times\Sigma^{\ast\left[\mathbf{N}\right]}\rightarrow\omega\times\omega^{\left[\mathbf{N}\right]}\times\Sigma^{\ast\left[\mathbf{N}\right]}
\]

\end_inset

la cual le asignara a una descripcion instantanea 
\begin_inset Formula $(i,\vec{s},\vec{\sigma})$
\end_inset

 la 
\shape italic
descripcion instantanea sucesora de 
\shape default

\begin_inset Formula $(i,\vec{s},\vec{\sigma})$
\end_inset

 
\shape italic
con respecto a 
\shape default

\begin_inset Formula $\mathcal{P}$
\end_inset

.
 Cuando 
\begin_inset Formula $i\in\{1,...,n(\mathcal{P})\}$
\end_inset

,
 intuitivamente hablando,
 
\begin_inset Formula $S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})$
\end_inset

 sera la descripcion instantanea que resulta luego de realizar 
\begin_inset Formula $I_{i}^{\mathcal{P}}$
\end_inset

 estando en el estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
 Cuando 
\begin_inset Formula $i=0$
\end_inset

 o 
\begin_inset Formula $i>n(\mathcal{P})$
\end_inset

 definiremos 
\begin_inset Formula $S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i,\vec{s},\vec{\sigma})$
\end_inset

,
 lo cual es bastante intuitivo ya que si estamos en estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 y debemos realizar 
\begin_inset Formula $I_{i}^{\mathcal{P}}=\varepsilon$
\end_inset

,
 dado que 
\begin_inset Formula $\varepsilon$
\end_inset

 no es una instruccion y por lo tanto no la podremos realizar,
 seguiremos en el mismo estado y teniendo que realizar 
\begin_inset Formula $I_{i}^{\mathcal{P}}$
\end_inset

.
\end_layout

\begin_layout Standard
Para darle una semantica mas unificada al concepto de descripcion instantanea sucesora debemos crear un nuevo verbo.
 El verbo 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

realizarp
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
 Dada una actividad A,
 diremos que un individuo P 
\shape italic
realizap
\shape default
 la actividad A,
 si P realiza A,
 en caso de que pueda hacerlo.
 O sea realizarp una actividad es realizarla si se puede.
\end_layout

\begin_layout Standard
Para dar otro ejemplo de este tipo de verbos,
 consideremos el verbo 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

comprarp
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

,
 es decir 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

comprar si se puede
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
 Un hijo le pide a su padre que le compre un determinado juguete y el padre le dice 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

si,
 hijo mio,
 te lo voy a comprarp
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
 Luego el padre es despedido de su empleo y su cituacion economica hace que no le sea posible comprar dicho juguete.
 Sin envargo el padre no mintio ya que si bien no compro dicho juguete,
 él si lo comprop.
\end_layout

\begin_layout Standard
Con este verbo podemos describir intuitivamente 
\begin_inset Formula $S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})$
\end_inset

:
\begin_inset Formula 
\begin{align*}
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma}) & =\mathrm{descripcion\ insta}\text{n}\mathrm{ta}\text{n}\mathrm{ea\ que\ resulta}\\
 & \mathrm{luego\ de\ rea}\text{l}\mathrm{izarp\ }I_{i}^{\mathcal{P}}\text{, estando en estado }(\vec{s},\vec{\sigma})
\end{align*}

\end_inset

Ahora si,
 daremos la definicion matematica de 
\begin_inset Formula $S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})$
\end_inset

,
 segun se den distintos casos posibles.
\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $i\notin\{1,...,n(\mathcal{P})\}$
\end_inset

.
 Entonces 
\begin_inset Formula $S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i,\vec{s},\vec{\sigma})$
\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{k}\dot{-}1.$
\end_inset

 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,(s_{1},...,s_{k-1},s_{k}\dot{-}1,s_{k+1},...),\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{k}+1.$
\end_inset

 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,(s_{1},...,s_{k-1},s_{k}+1,s_{k+1},...),\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{n}$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,(s_{1},...,s_{k-1},s_{n},s_{k+1},...),\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{N}\bar{k}\leftarrow0.$
\end_inset

 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,(s_{1},...,s_{k-1},0,s_{k+1},...),\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{IF}$
\end_inset

 
\begin_inset Formula $\mathrm{N}\bar{k}$
\end_inset

 
\begin_inset Formula $\neq0$
\end_inset

 
\begin_inset Formula $\mathrm{GOTO}$
\end_inset

 
\begin_inset Formula $\mathrm{L}\bar{m}.$
\end_inset

 Entonces tenemos dos subcasos.
\end_layout

\begin_layout Standard
Subcaso a.
 El valor de 
\begin_inset Formula $\mathrm{N}\bar{k}$
\end_inset

 en 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 es 0.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,\vec{s},\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Subcaso b.
 El valor de 
\begin_inset Formula $\mathrm{N}\bar{k}$
\end_inset

 en 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 es no nulo.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(\min\{l:I_{l}^{\mathcal{P}}\ \mathrm{tiene\ label\ L}\bar{m}\},\vec{s},\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{P}\bar{k}\leftarrow$
\end_inset

 
\begin_inset Formula $^{\curvearrowright}\mathrm{P}\bar{k}.$
\end_inset

 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,\vec{s},(\sigma_{1},...,\sigma_{k-1},^{\curvearrowright}\sigma_{k},\sigma_{k+1},...))
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{P}\bar{k}\leftarrow\mathrm{P}\bar{k}.a$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,\vec{s},(\sigma_{1},...,\sigma_{k-1},\sigma_{k}a,\sigma_{k+1},...))
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{P}\bar{k}\leftarrow\mathrm{P}\bar{n}$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,\vec{s},(\sigma_{1},...,\sigma_{k-1},\sigma_{n},\sigma_{k+1},...))
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{P}\bar{k}\leftarrow\varepsilon.$
\end_inset

 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,\vec{s},(\sigma_{1},...,\sigma_{k-1},\varepsilon,\sigma_{k+1},...))
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{IF}\;\mathrm{P}\bar{k}\;\mathrm{BEGINS}\;a\;\mathrm{GOTO}\;\mathrm{L}\bar{m}.$
\end_inset

 Entonces tenemos dos subcasos.
\end_layout

\begin_layout Standard
Subcaso a.
 El valor de 
\begin_inset Formula $\mathrm{P}\bar{k}$
\end_inset

 en 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 comiensa con 
\begin_inset Formula $a$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(\min\{l:I_{l}^{\mathcal{P}}\ \mathrm{tiene\ label\ L}\bar{m}\},\vec{s},\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Subcaso b.
 El valor de 
\begin_inset Formula $\mathrm{P}\bar{k}$
\end_inset

 en 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 no comiensa con 
\begin_inset Formula $a$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,\vec{s},\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{GOTO}\;\mathrm{L}\bar{m}$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(\min\{l:I_{l}^{\mathcal{P}}\ \mathrm{tiene\ label\ L}\bar{m}\},\vec{s},\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Standard
Caso 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{SKIP}$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i+1,\vec{s},\vec{\sigma})
\]

\end_inset


\end_layout

\begin_layout Paragraph*
La computacion partiendo de un estado
\end_layout

\begin_layout Standard
Dado un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 y un estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 a la infinitupla
\begin_inset Formula 
\[
((1,\vec{s},\vec{\sigma}),S_{\mathcal{P}}(1,\vec{s},\vec{\sigma}),S_{\mathcal{P}}(S_{\mathcal{P}}(1,\vec{s},\vec{\sigma})),S_{\mathcal{P}}(S_{\mathcal{P}}(S_{\mathcal{P}}(1,\vec{s},\vec{\sigma}))),...)
\]

\end_inset

la llamaremos la 
\shape italic
computacion de 
\shape default

\begin_inset Formula $\mathcal{P}$
\end_inset


\shape italic

\begin_inset space \space{}
\end_inset

partiendo del estado 
\shape default

\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
 Diremos que
\begin_inset Formula 
\[
\overset{t\text{ veces}}{\overbrace{S_{\mathcal{P}}(...S_{\mathcal{P}}(S_{\mathcal{P}}(}}1,\vec{s},\vec{\sigma}))...)
\]

\end_inset

es la 
\shape italic
descripcion instantanea obtenida luego de 
\shape default

\begin_inset Formula $t$
\end_inset

 
\shape italic
pasos,
 partiendo del estado 
\shape default

\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
 Si
\begin_inset Formula 
\[
\overset{t\text{ veces}}{\overbrace{S_{\mathcal{P}}(...S_{\mathcal{P}}(S_{\mathcal{P}}(}}1,\vec{s},\vec{\sigma}))...)=(j,\vec{u},\vec{\eta})
\]

\end_inset

diremos que 
\begin_inset Formula $(\vec{u},\vec{\eta})$
\end_inset

 es el 
\shape italic
estado obtenido luego de 
\shape default

\begin_inset Formula $t$
\end_inset

 
\shape italic
pasos,
 partiendo del estado 
\shape default

\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
\end_layout

\begin_layout Standard
Es claro que en la infinitupla de mas arriba esta toda la informacion de la 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

corrida
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 del programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 cuando partimos del estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
 Veamos un ejemplo.
 Sea 
\begin_inset Formula $\Sigma=\{\blacktriangle,\#\}$
\end_inset

 y sea 
\begin_inset Formula $\mathcal{P}$
\end_inset

 el siguiente programa
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}3 & \mathrm{N}4\leftarrow\mathrm{N}4+1\\
 & \mathrm{P}1\leftarrow\ ^{\curvearrowright}\mathrm{P}1\\
 & \mathrm{IF\ P}1\ \mathrm{BEGINS\ }\blacktriangle\ \mathrm{GOTO}\;\mathrm{L}3\\
 & \mathrm{P}3\leftarrow\mathrm{P}3.\#
\end{array}
\]

\end_inset

Supongamos que tomamos 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 igual al estado
\begin_inset Formula 
\[
\left((2,1,0,5,3,0,0,0,...),(\#\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...)\right)
\]

\end_inset

Tendremos entonces que la computacion de 
\begin_inset Formula $\mathcal{P}$
\end_inset


\begin_inset space \space{}
\end_inset

partiendo del estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 es la siguiente sucesion (de arriba hacia abajo) de descripciones instantaneas:
\begin_inset Formula 
\begin{gather*}
(1,(2,1,0,5,3,0,0,0,...),(\#\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{1}^{\mathcal{P}}=\mathrm{N}4\leftarrow\mathrm{N}4+1\text{ obtenemos}\\
(2,(2,1,0,6,3,0,0,0,...),(\#\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{2}^{\mathcal{P}}=\mathrm{P}1\leftarrow\ ^{\curvearrowright}\mathrm{P}1\text{ obtenemos}\\
(3,(2,1,0,6,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{3}^{\mathcal{P}}=\mathrm{IF\ P}1\ \mathrm{BEGINS\ }\blacktriangle\ \mathrm{GOTO}\;\mathrm{L}3\text{ obtenemos}\\
(1,(2,1,0,6,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{1}^{\mathcal{P}}=\mathrm{N}4\leftarrow\mathrm{N}4+1\text{ obtenemos}\\
(2,(2,1,0,7,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{2}^{\mathcal{P}}=\mathrm{P}1\leftarrow\ ^{\curvearrowright}\mathrm{P}1\text{ obtenemos}\\
(3,(2,1,0,7,3,0,0,0,...),(\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{3}^{\mathcal{P}}=\mathrm{IF\ P}1\ \mathrm{BEGINS\ }\blacktriangle\ \mathrm{GOTO}\;\mathrm{L}3\text{ obtenemos}\\
(4,(2,1,0,7,3,0,0,0,...),(\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{4}^{\mathcal{P}}=\mathrm{P}3\leftarrow\mathrm{P}3.\#\text{ obtenemos}\\
(5,(2,1,0,7,3,0,0,0,...),(\#\#,\varepsilon,\blacktriangle\blacktriangle\#,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{intentando realizar }I_{5}^{\mathcal{P}}=\varepsilon\text{ obtenemos}\\
(5,(2,1,0,7,3,0,0,0,...),(\#\#,\varepsilon,\blacktriangle\blacktriangle\#,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{intentando realizar }I_{5}^{\mathcal{P}}=\varepsilon\text{ obtenemos}\\
(5,(2,1,0,7,3,0,0,0,...),(\#\#,\varepsilon,\blacktriangle\blacktriangle\#,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{intentando realizar }I_{5}^{\mathcal{P}}=\varepsilon\text{ obtenemos}\\
(5,(2,1,0,7,3,0,0,0,...),(\#\#,\varepsilon,\blacktriangle\blacktriangle\#,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\vdots
\end{gather*}

\end_inset

Notese que en este caso es natural decir que el programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detiene,
 partiendo del estado inicial dado ya que llega a un punto en el que queda intentando realizar 
\begin_inset Formula $I_{n(\mathcal{P})+1}^{\mathcal{P}}$
\end_inset

 lo cual no es una instruccion.
 Veamos un ejemplo de no detencion.
 Sea 
\begin_inset Formula $\mathcal{Q}$
\end_inset

 el siguiente programa
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}3 & \mathrm{N}4\leftarrow\mathrm{N}4+1\\
 & \mathrm{IF\ P}1\ \mathrm{BEGINS\ }\blacktriangle\ \mathrm{GOTO}\;\mathrm{L}3
\end{array}
\]

\end_inset

Supongamos que tomamos 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 igual al estado
\begin_inset Formula 
\[
\left((2,1,0,5,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...)\right)
\]

\end_inset

Tendremos entonces que la computacion de 
\begin_inset Formula $\mathcal{Q}$
\end_inset


\begin_inset space \space{}
\end_inset

partiendo del estado 
\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

 es la siguiente sucesion (de arriba hacia abajo) de descripciones instantaneas:
\begin_inset Formula 
\begin{gather*}
(1,(2,1,0,5,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{1}^{\mathcal{P}}=\mathrm{N}4\leftarrow\mathrm{N}4+1\text{ obtenemos}\\
(2,(2,1,0,6,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{2}^{\mathcal{P}}=\mathrm{IF\ P}1\ \mathrm{BEGINS\ }\blacktriangle\ \mathrm{GOTO}\;\mathrm{L}3\text{ obtenemos}\\
(1,(2,1,0,6,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{1}^{\mathcal{P}}=\mathrm{N}4\leftarrow\mathrm{N}4+1\text{ obtenemos}\\
(2,(2,1,0,7,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{2}^{\mathcal{P}}=\mathrm{IF\ P}1\ \mathrm{BEGINS\ }\blacktriangle\ \mathrm{GOTO}\;\mathrm{L}3\text{ obtenemos}\\
(1,(2,1,0,7,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{1}^{\mathcal{P}}=\mathrm{N}4\leftarrow\mathrm{N}4+1\text{ obtenemos}\\
(2,(2,1,0,8,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{2}^{\mathcal{P}}=\mathrm{IF\ P}1\ \mathrm{BEGINS\ }\blacktriangle\ \mathrm{GOTO}\;\mathrm{L}3\text{ obtenemos}\\
(1,(2,1,0,8,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{1}^{\mathcal{P}}=\mathrm{N}4\leftarrow\mathrm{N}4+1\text{ obtenemos}\\
(2,(2,1,0,9,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\text{realizando }I_{2}^{\mathcal{P}}=\mathrm{IF\ P}1\ \mathrm{BEGINS\ }\blacktriangle\ \mathrm{GOTO}\;\mathrm{L}3\text{ obtenemos}\\
(1,(2,1,0,9,3,0,0,0,...),(\blacktriangle\#\#,\varepsilon,\blacktriangle\blacktriangle,\#\blacktriangle,\#,\varepsilon,\varepsilon,\varepsilon,...))\\
\vdots
\end{gather*}

\end_inset

Notese que en este caso,
 es claro que el programa 
\begin_inset Formula $\mathcal{Q}$
\end_inset

 no se detiene partiendo del estado inicial dado ya que sigue indefinidamente realizando instrucciones.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

V o F o I,
 justificar
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i,\vec{s},\vec{\sigma})$
\end_inset

,
 entonces 
\begin_inset Formula $i\notin\{1,...,n(\mathcal{P})\}$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 y sea 
\begin_inset Formula $d$
\end_inset

 una descripcion instantanea cuya primer coordenada es 
\begin_inset Formula $i$
\end_inset

.
 Si 
\begin_inset Formula $I_{i}^{\mathcal{P}}=\mathrm{N}2\leftarrow\mathrm{N}2+1$
\end_inset

,
 entonces 
\begin_inset Formula $S_{\mathcal{P}}(d)=(i+1,(\mathrm{N}1,Suc(\mathrm{N}2),\mathrm{N}3,\mathrm{N}4,...),(\mathrm{P}1,\mathrm{P}2,\mathrm{P}3,\mathrm{P}4,...))$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 y sea 
\begin_inset Formula $d$
\end_inset

 una descripcion instantanea cuya primer coordenada es 
\begin_inset Formula $i$
\end_inset

.
 Si 
\begin_inset Formula $I_{i}^{\mathcal{P}}=\mathrm{N}2\leftarrow0$
\end_inset

,
 entonces 
\begin_inset Formula $S_{\mathcal{P}}(d)=(i+1,(\mathrm{N}1,0,\mathrm{N}3,\mathrm{N}4,...),(\mathrm{P}1,\mathrm{P}2,\mathrm{P}3,\mathrm{P}4,...))$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma_{p}}$
\end_inset

 y sea 
\begin_inset Formula $(i,\vec{s},\vec{\sigma})$
\end_inset

 una descripcion instantanea.
 Supongamos 
\begin_inset Formula $\sigma_{3}=\mathrm{GOTO}$
\end_inset

.
 Si 
\begin_inset Formula $I_{i}^{\mathcal{P}}=\mathrm{L}6\ \mathrm{IF}\;\mathrm{P}3\;\mathrm{BEGINS\ G}\;\mathrm{GOTO}\;\mathrm{L}6$
\end_inset

,
 entonces 
\begin_inset Formula $S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(i,\vec{s},\vec{\sigma})$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

,
 sea 
\begin_inset Formula $a\in\Sigma$
\end_inset

 y sea 
\begin_inset Formula $(i,\vec{s},\vec{\sigma})$
\end_inset

 una descripcion instantanea.
 Si 
\begin_inset Formula $Bas(I_{i}^{\mathcal{P}})=\mathrm{IF}\;\mathrm{P}3\;\mathrm{BEGINS\ }a\ \mathrm{GOTO}\;\mathrm{L}6$
\end_inset

 y 
\begin_inset Formula $\left[\mathrm{P}3\right]_{1}=a$
\end_inset

,
 entonces 
\begin_inset Formula $S_{\mathcal{P}}(i,\vec{s},\vec{\sigma})=(j,\vec{s},\vec{\sigma})$
\end_inset

,
 donde 
\begin_inset Formula $j$
\end_inset

 es el menor numero 
\begin_inset Formula $l$
\end_inset

 tal que 
\begin_inset Formula $I_{l}^{\mathcal{P}}$
\end_inset

 tiene label 
\begin_inset Formula $\mathrm{L}6$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph*
Definicion matematica de detencion
\end_layout

\begin_layout Standard
Ahora definiremos matematicamente el concepto de detencion.
 Cuando la primer coordenada de
\begin_inset Formula 
\[
\overset{t\text{ veces}}{\overbrace{S_{\mathcal{P}}(...S_{\mathcal{P}}(S_{\mathcal{P}}(}}1,\vec{s},\vec{\sigma}))...)
\]

\end_inset

sea igual a 
\begin_inset Formula $n(\mathcal{P})+1$
\end_inset

,
 diremos que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 
\shape italic
se detiene (luego de 
\shape default

\begin_inset Formula $t$
\end_inset


\shape italic

\begin_inset space \space{}
\end_inset

pasos),
 partiendo desde el estado 
\shape default

\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
 Si ninguna de las primeras coordenadas en la computacion
\begin_inset Formula 
\[
((1,\vec{s},\vec{\sigma}),S_{\mathcal{P}}(1,\vec{s},\vec{\sigma}),S_{\mathcal{P}}(S_{\mathcal{P}}(1,\vec{s},\vec{\sigma})),S_{\mathcal{P}}(S_{\mathcal{P}}(S_{\mathcal{P}}(1,\vec{s},\vec{\sigma}))),...)
\]

\end_inset

es igual a 
\begin_inset Formula $n(\mathcal{P})+1$
\end_inset

,
 diremos que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 
\shape italic
no se detiene partiendo del estado 
\shape default

\begin_inset Formula $(\vec{s},\vec{\sigma})$
\end_inset

.
\end_layout

\begin_layout Standard
Cabe destacar que en los conceptos antes definidos por 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

1 paso
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 entendemos 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

realizarp una instrucion
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

,
 donde tal como se lo explico antes 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

realizarp
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 significa 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

realizar si se puede
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

.
 Otra observacion importante es que los programas de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 tienen una sola manera de detenerse,
 i.e.
 siempre que se detienen lo hacen habiendo realizado la ultima de sus instrucciones e intentando realizar la instruccion siguiente a su ultima instruccion
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Funciones 
\begin_inset Formula $\Sigma$
\end_inset

-computables
\end_layout

\begin_layout Standard
Ahora que hemos definido matematicamente la semantica de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 estamos en condiciones de definir el concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 el cual sera una modelizacion matematica del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Intuitivamente hablando una funcion sera 
\begin_inset Formula $\Sigma$
\end_inset

-computable cuando haya un programa que la compute.
 Para precisar este concepto nos sera util la siguiente notacion.
 Dados 
\begin_inset Formula $x_{1},...,x_{n}\in\omega$
\end_inset

 y 
\begin_inset Formula $\alpha_{1},...,\alpha_{m}\in\Sigma^{\ast}$
\end_inset

,
 con 
\begin_inset Formula $n,m\in\omega$
\end_inset

,
 usaremos
\begin_inset Formula 
\[
\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert 
\]

\end_inset

para denotar el estado
\begin_inset Formula 
\[
\left((x_{1},...,x_{n},0,...),(\alpha_{1},...,\alpha_{m},\varepsilon,...)\right)
\]

\end_inset

Esta notacion requiere aclarar un poco como debe interpretarse en los casos limite,
 es decir cuando alguno de los numeros 
\begin_inset Formula $n,m$
\end_inset

 es igual a 
\begin_inset Formula $0$
\end_inset

.
 Notese que por ejemplo
\begin_inset Formula 
\[
\left\Vert x\right\Vert =\left((x,0,...),(\varepsilon,...)\right)
\]

\end_inset

(es el caso 
\begin_inset Formula $n=1$
\end_inset

 y 
\begin_inset Formula $m=0$
\end_inset

).
 Tambien
\begin_inset Formula 
\[
\left\Vert \alpha\right\Vert =\left((0,...),(\alpha,\varepsilon,...)\right)
\]

\end_inset

(es el caso 
\begin_inset Formula $n=0$
\end_inset

 y 
\begin_inset Formula $m=1$
\end_inset

).
 En el caso 
\begin_inset Formula $n=m=0$
\end_inset

 pensaremos que 
\begin_inset Formula $x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}$
\end_inset

 se transforma en 
\begin_inset Formula $\Diamond$
\end_inset

 por lo que se obtiene
\begin_inset Formula 
\[
\left\Vert \Diamond\right\Vert =\left((0,...),(\varepsilon,...)\right)
\]

\end_inset

Ademas es claro que
\begin_inset Formula 
\[
\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert =\left\Vert x_{1},...,x_{n},\overset{i}{\overbrace{0,...,0}},\alpha_{1},...,\alpha_{m},\overset{j}{\overbrace{\varepsilon,...,\varepsilon}}\right\Vert 
\]

\end_inset

cualesquiera sean 
\begin_inset Formula $i,j\in\omega$
\end_inset

.
\end_layout

\begin_layout Standard
Dado 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

,
 definamos para cada par 
\begin_inset Formula $n,m\geq0$
\end_inset

,
 la funcion 
\begin_inset Formula $\Psi_{\mathcal{P}}^{n,m,\#}$
\end_inset

 de la siguiente manera:
\begin_inset Formula 
\[
\begin{array}{l}
D_{\Psi_{\mathcal{P}}^{n,m,\#}}=\{(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}:\mathcal{P}\text{ termina, partiendo del}\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\text{estado }\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert \}
\end{array}
\]

\end_inset


\begin_inset Formula 
\[
\begin{array}{l}
\Psi_{\mathcal{P}}^{n,m,\#}(\vec{x},\vec{\alpha})=\text{valor de }\mathrm{N}1\text{ en el estado obtenido cuando }\mathcal{P}\text{ termina,}\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\text{partiendo de }\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert 
\end{array}
\]

\end_inset

Analogamente definamos la funcion 
\begin_inset Formula $\Psi_{\mathcal{P}}^{n,m,\ast}$
\end_inset

 de la siguiente manera:
\begin_inset Formula 
\[
\begin{array}{l}
D_{\Psi_{\mathcal{P}}^{n,m,\ast}}=\{(\vec{x},\vec{\alpha})\in\omega^{n}\times\Sigma^{\ast m}:\mathcal{P}\text{ termina, partiendo del}\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\text{estado }\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert \}
\end{array}
\]

\end_inset


\begin_inset Formula 
\[
\begin{array}{l}
\Psi_{\mathcal{P}}^{n,m,\ast}(\vec{x},\vec{\alpha})=\text{valor de }\mathrm{P}1\text{ en el estado obtenido cuando }\mathcal{P}\text{ termina,}\\
\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\text{partiendo de }\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert 
\end{array}
\]

\end_inset

Ahora si daremos la definicion precisa de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 Una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta 
\begin_inset Formula $f:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 sera llamada 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-computable
\shape default
 si hay un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 tal que 
\begin_inset Formula $f=\Psi_{\mathcal{P}}^{n,m,\#}$
\end_inset

.
 En tal caso diremos que la funcion 
\begin_inset Formula $f$
\end_inset

 es 
\shape italic
computada
\shape default
 por 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
 Analogamente una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta 
\begin_inset Formula $f:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\Sigma^{\ast}$
\end_inset

 sera llamada 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-computable
\shape default
 si hay un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 tal que 
\begin_inset Formula $f=\Psi_{\mathcal{P}}^{n,m,\ast}$
\end_inset

.
 En tal caso diremos que la funcion 
\begin_inset Formula $f$
\end_inset

 es 
\shape italic
computada
\shape default
 por 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
\end_layout

\begin_layout Standard
Algunos ejemplos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{1}$
\end_inset


\end_layout

\end_inset

El programa
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}2 & \mathrm{IF}\;\mathrm{N}1\neq0\;\mathrm{GOTO}\;\mathrm{L}1\\
 & \mathrm{GOTO}\;\mathrm{L}2\\
\mathrm{L}1 & \mathrm{N}1\leftarrow\mathrm{N}1\dot{-}1
\end{array}
\]

\end_inset

computa la funcion 
\begin_inset Formula $Pred$
\end_inset

.
 Note que este programa tambien computa las funciones 
\begin_inset Formula $Pred\circ p_{1}^{n,m}$
\end_inset

,
 para 
\begin_inset Formula $n\geq1$
\end_inset

 y 
\begin_inset Formula $m\geq0$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
E
\begin_inset Formula $_{2}$
\end_inset


\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\clubsuit,\triangle\}.$
\end_inset

 El programa
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}3 & \mathrm{IF}\;\mathrm{P}2\;\mathrm{BEGINS}\;\clubsuit\;\mathrm{GOTO}\;\mathrm{L}1\\
 & \mathrm{IF}\;\mathrm{P}2\;\mathrm{BEGINS}\;\triangle\;\mathrm{GOTO}\;\mathrm{L}2\\
 & \mathrm{GOTO}\;\mathrm{L}4\\
\mathrm{L}1 & \mathrm{P}2\leftarrow\text{ }^{\curvearrowright}\mathrm{P}2\\
 & \mathrm{P}1\leftarrow\mathrm{P}1\clubsuit\\
 & \mathrm{GOTO}\;\mathrm{L}3\\
\mathrm{L}2 & \mathrm{P}2\leftarrow\text{ }^{\curvearrowright}\mathrm{P}2\\
 & \mathrm{P}1\leftarrow\mathrm{P}1\triangle\\
 & \mathrm{GOTO}\;\mathrm{L}3\\
\mathrm{L}4 & \mathrm{SKIP}
\end{array}
\]

\end_inset

computa la funcion 
\begin_inset Formula $\lambda\alpha\beta\left[\alpha\beta\right].$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Por supuesto para que el concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable tenga chance de ser una modelizacion adecuada del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 tiene que ser cierto el siguiente resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

Pruebe la proposicion anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Sin envargo nuestro modelo imperativo de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable todavia podria no ser correcto ya que podria pasar que haya una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-mixta que sea computada por un procedimiento efectivo pero que no exista un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 que la compute.
 En otras palabras el modelo imperativo o Neumanniano podria ser incompleto.
 Por supuesto este no es el caso y los desarrollos que veremos mas adelante nos convenceran de que el paradigma imperativo es completo.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 6:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\#,@\}$
\end_inset

.
 Para cada una de las siguientes funciones haga un programa que la compute
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $f:\{0,1,2\}\rightarrow\omega$
\end_inset

,
 dada por 
\begin_inset Formula $f(0)=f(1)=0$
\end_inset

 y 
\begin_inset Formula $f(2)=5$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda xy[x+y]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $C_{0}^{1,1}\mathrm{\mid}_{\{0,1\}\times\Sigma^{\ast}}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $p_{4}^{2,3}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda i\alpha\left[\left[\alpha\right]_{i}\right]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\lambda\alpha\lbrack\sqrt{\alpha}]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $f:\omega^{2}\times\{1,2,3\}\rightarrow\omega,$
\end_inset

 
\begin_inset Formula $f(x_{1},x_{2},x_{3})=x_{x_{3}}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,\&\}$
\end_inset

.
 De un programa que compute la funcion 
\begin_inset Formula $s^{\leq}$
\end_inset

,
 donde 
\begin_inset Formula $\leq$
\end_inset

 esta dado por 
\begin_inset Formula $@<\&$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 8:
\end_layout

\end_inset

V o F o I,
 justificar
\end_layout

\begin_deeper
\begin_layout Enumerate
Dado 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 y 
\begin_inset Formula $n,m\geq0$
\end_inset

,
 se tiene que 
\begin_inset Formula $\Psi_{\mathcal{P}}^{n,m,\#}:\omega^{\lbrack\mathbf{N}]}\times\Sigma^{\ast\lbrack\mathbf{N}]}\rightarrow\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\Psi_{\mathrm{L}1\mathrm{IFN}1\neq0\mathrm{GOTOL}1}^{1,0,\#}=\{(0,0)\}$
\end_inset


\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto y sean 
\begin_inset Formula $n,m\in\omega$
\end_inset

.
 Sea 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

.
 Entonces el dominio de 
\begin_inset Formula $\Psi_{\mathcal{P}}^{n,m,\#}$
\end_inset

 es el conjunto formado por todos los estados a partir de los cuales 
\begin_inset Formula $\mathcal{P}$
\end_inset

 termina
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto y sean 
\begin_inset Formula $n,m\in\omega$
\end_inset

.
 Entonces cualesquiera sean 
\begin_inset Formula $x_{1},...,x_{n}\in\omega$
\end_inset

 y 
\begin_inset Formula $\alpha_{1},...,\alpha_{m}\in\Sigma^{\ast}$
\end_inset

 se tiene que
\begin_inset Formula 
\[
\Psi_{\mathrm{SKIP}}^{n,m,\#}((x_{1},...,x_{n},0,0,...),(\alpha_{1},...,\alpha_{m},\varepsilon,\varepsilon,...))=x_{1}
\]

\end_inset


\end_layout

\begin_layout Enumerate
El programa
\begin_inset Formula 
\[
\mathrm{N}1\leftarrow\mathrm{N}1\dot{-}1
\]

\end_inset

computa la funcion 
\begin_inset Formula $\lambda x_{2}x_{1}[x_{2}\dot{-}1]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $Suc$
\end_inset

 se detiene para todo 
\begin_inset Formula $x\in\omega$
\end_inset


\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $\mathcal{P}$
\end_inset

 computa una función 
\begin_inset Formula $f:D_{f}\subseteq\omega^{2}\rightarrow\omega$
\end_inset

,
 entonces 
\begin_inset Formula $\mathcal{P}$
\end_inset

 computa la función 
\begin_inset Formula $f\circ\left[p_{1}^{1,0},C_{0}^{1,0}\right].$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 9:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\Sigma_{p}\cup\{a,b,c,d,e,f,g,...,x,y,z\}$
\end_inset

.
 De una funcion 
\begin_inset Formula $f:\Sigma^{\ast}\rightarrow\Sigma^{\ast}$
\end_inset

 la cual sea 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 y tal que 
\begin_inset Formula $\Psi_{f(\mathcal{P})}^{1,1,\#}=\Psi_{\mathcal{P}}^{1,1,\#}\circ\left[\lambda x\alpha\lbrack x+2],C_{bb}^{1,1}\right]$
\end_inset

,
 cualesquiera sea 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Macros
\end_layout

\begin_layout Standard
Supongamos que estamos escribiendo un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 con el objeto de que realice cierta tarea.
 Supongamos ademas que nos vendria muy bien para nuestros propositos poder usar una instruccion
\begin_inset Formula 
\[
\mathrm{N}5\leftarrow\mathrm{N}16+\mathrm{N}3
\]

\end_inset

la cual por supuesto al correr el programa,
 deberia producir el efecto de dejar en la variable 
\begin_inset Formula $\mathrm{N}5$
\end_inset

 la suma de los contenidos de las variables 
\begin_inset Formula $\mathrm{N}16$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}3$
\end_inset

,
 sin modificar el contenido de las variables distintas a 
\begin_inset Formula $\mathrm{N}5$
\end_inset

.
 Lamentablemente no tenemos en 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 este tipo de instruccion pero podriamos reemplazarla por el siguiente programa
\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{N}1111\leftarrow\mathrm{N}16\\
 & \mathrm{N}2222\leftarrow\mathrm{N}3\\
 & \mathrm{N}5\leftarrow\mathrm{N}1111\\
\mathrm{L}1000 & \mathrm{IF}\;\mathrm{N}2222\neq0\;\mathrm{GOTO}\;\mathrm{L}2000\\
 & \mathrm{GOTO}\;\mathrm{L}3000\\
\mathrm{L}2000 & \mathrm{N}2222\leftarrow\mathrm{N}2222\dot{-}1\\
 & \mathrm{N}5\leftarrow\mathrm{N}5+1\\
 & \mathrm{GOTO}\;\mathrm{L}1000\\
\mathrm{L}3000 & \mathrm{SKIP}
\end{array}
\]

\end_inset

donde las variables 
\begin_inset Formula $\mathrm{N}1111$
\end_inset

,
 
\begin_inset Formula $\mathrm{N}2222$
\end_inset

 y los labels 
\begin_inset Formula $\mathrm{L}1000$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}2000$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}3000$
\end_inset

 solo seran usados aqui,
 es decir no apareceran en el resto de nuestro programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
 Notese que este programa cuando es corrido termina dejando en la variable 
\begin_inset Formula $\mathrm{N}5$
\end_inset

 la suma de los contenidos de las variables 
\begin_inset Formula $\mathrm{N}16$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}3$
\end_inset

 y modifica el contenido de las variables 
\begin_inset Formula $\mathrm{N}1111$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}2222$
\end_inset

,
 lo cual no traera problemas ya que 
\begin_inset Formula $\mathrm{N}1111$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}2222$
\end_inset

 no se usan en el resto de 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
 La variables 
\begin_inset Formula $\mathrm{N}1111$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}2222$
\end_inset

 son auxiliares y se usan justamente para preservar el valor de las variables 
\begin_inset Formula $\mathrm{N}16$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}3$
\end_inset

 ya que ellas son variables protagonistas de nuestro programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 y en esta instancia no queremos alterar su contenido sino solo realizar la asignacion 
\begin_inset Formula $\mathrm{N}5\leftarrow\mathrm{N}16+\mathrm{N}3$
\end_inset

.
 Dejamos al lector explicar por que es necesario para que la simulacion sea correcta que los labels 
\begin_inset Formula $\mathrm{L}1000$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}2000$
\end_inset

 y 
\begin_inset Formula $\mathrm{L}3000$
\end_inset

 no sean usados en el resto de 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
\end_layout

\begin_layout Standard
Es decir el programa anterior simula la instruccion 
\begin_inset Formula $\mathrm{N}5\leftarrow\mathrm{N}16+\mathrm{N}3$
\end_inset

 que no podiamos usar por no ser una instruccion de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

,
 con un costo bastante bajo,
 es decir el costo de convenir en no usar en el resto de 
\begin_inset Formula $\mathcal{P}$
\end_inset

 las variables 
\begin_inset Formula $\mathrm{N}1111$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}2222$
\end_inset

 ni los labels 
\begin_inset Formula $\mathrm{L}1000$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}2000$
\end_inset

 y 
\begin_inset Formula $\mathrm{L}3000$
\end_inset

.
\end_layout

\begin_layout Standard
Ahora supongamos que seguimos escribiendo el programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 y nos hace falta simular la instruccion 
\begin_inset Formula $\mathrm{N}20\leftarrow\mathrm{N}1+\mathrm{N}14$
\end_inset

.
 Entonces es claro que podriamos modificar el programa que simulaba 
\begin_inset Formula $\mathrm{N}5\leftarrow\mathrm{N}16+\mathrm{N}3$
\end_inset

 haciendole reemplazos adecuados a sus variables y labels.
 Por ejemplo podriamos escribir
\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{N}9999\leftarrow\mathrm{N}1\\
 & \mathrm{N}8888\leftarrow\mathrm{N}14\\
 & \mathrm{N}20\leftarrow\mathrm{N}9999\\
\mathrm{L}1001 & \mathrm{IF}\;\mathrm{N}8888\neq0\;\mathrm{GOTO}\;\mathrm{L}2002\\
 & \mathrm{GOTO}\;\mathrm{L}3003\\
\mathrm{L}2002 & \mathrm{N}8888\leftarrow\mathrm{N}8888\dot{-}1\\
 & \mathrm{N}20\leftarrow\mathrm{N}20+1\\
 & \mathrm{GOTO}\;\mathrm{L}1001\\
\mathrm{L}3003 & \mathrm{SKIP}
\end{array}
\]

\end_inset

donde 
\begin_inset Formula $\mathrm{N}9999$
\end_inset

,
 
\begin_inset Formula $\mathrm{N}8888$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}1001$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}2002$
\end_inset

 y 
\begin_inset Formula $\mathrm{L}3003$
\end_inset

 solo seran usados aqui,
 es decir no apareceran en el resto de nuestro programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
\end_layout

\begin_layout Standard
Consideremos el siguiente 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

molde
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 que llamaremos 
\begin_inset Formula $M$
\end_inset


\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{V}4\leftarrow\mathrm{V}2\\
 & \mathrm{V}5\leftarrow\mathrm{V}3\\
 & \mathrm{V}1\leftarrow\mathrm{V}4\\
\mathrm{A}1 & \mathrm{IF}\;\mathrm{V}5\neq0\;\mathrm{GOTO}\;\mathrm{A}2\\
 & \mathrm{GOTO}\;\mathrm{A}3\\
\mathrm{A}2 & \mathrm{V}5\leftarrow\mathrm{V}5\dot{-}1\\
 & \mathrm{V}1\leftarrow\mathrm{V}1+1\\
 & \mathrm{GOTO}\;\mathrm{A}1\\
\mathrm{A}3 & \mathrm{SKIP}
\end{array}
\]

\end_inset

Como puede notarse,
 cuando reemplazamos en 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}5$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}16$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}3$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}3$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}4$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}1111$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}5$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}2222$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}1000$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}2000$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}3$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}3000$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
obtenemos el programa que simulaba la instruccion 
\begin_inset Formula $\mathrm{N}5\leftarrow\mathrm{N}16+\mathrm{N}3$
\end_inset

 dentro de 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
 Similarmente,
 cuando reemplazamos en 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}20$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}3$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}14$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}4$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}9999$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}5$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}8888$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}1001$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}2002$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}3$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}3003$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
obtenemos el programa que simulaba la instruccion 
\begin_inset Formula $\mathrm{N}20\leftarrow\mathrm{N}1+\mathrm{N}14$
\end_inset

 dentro de 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
 La practicidad de tener el molde 
\begin_inset Formula $M$
\end_inset

 cae de maduro.
 Ahora en caso de necesitar una instruccion del tipo 
\begin_inset Formula $\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{n}+\mathrm{N}\bar{m}$
\end_inset

 solo tenemos que reemplazar en 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}\bar{k}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}\bar{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}3$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}\bar{m}$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
y reemplazar las 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

variables
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 
\begin_inset Formula $\mathrm{V}4$
\end_inset

 y 
\begin_inset Formula $\mathrm{V}5$
\end_inset

 y los 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

labels
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 
\begin_inset Formula $\mathrm{A}1$
\end_inset

,
 
\begin_inset Formula $\mathrm{A}2$
\end_inset

 y 
\begin_inset Formula $\mathrm{A}3$
\end_inset

,
 por dos variables concretas y tres labels concretos que no se usen en el programa que estamos realizando.
 El programa asi obtenido simulara a la instruccion 
\begin_inset Formula $\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{n}+\mathrm{N}\bar{m}$
\end_inset

.
\end_layout

\begin_layout Standard
En la gerga computacional el molde 
\begin_inset Formula $M$
\end_inset

 suele llamarse 
\shape italic
macro
\shape default
 y los programas obtenidos luego de realizar los reemplazos son llamados 
\shape italic
expansiones de 
\shape default

\begin_inset Formula $M$
\end_inset

.
 Notese que 
\begin_inset Formula $Ti(M)=\mathrm{PALABRA}$
\end_inset

 ya que,
 como en el caso de los programas,
 escribimos a 
\begin_inset Formula $M$
\end_inset

 linea por linea para facilitar su manejo pero en realidad es una sola palabra,
 a saber:
\begin_inset Formula 
\[
\mathrm{V}1\mathrm{\leftarrow}\text{V}2\mathrm{V}4\mathrm{\leftarrow}\text{V}3\mathrm{A}1\mathrm{IFV}4\mathrm{\neq}0\mathrm{GOTOA}2\mathrm{GOTOA}3\mathrm{A}2\mathrm{V}4\mathrm{\leftarrow}\text{V}4\mathrm{\dot{-}}1\mathrm{V}1\mathrm{\leftarrow}\text{V}1\mathrm{+}1\mathrm{GOTOA}1\mathrm{A}3\mathrm{SKIP}
\]

\end_inset

Es decir,
 como objeto matematico,
 
\begin_inset Formula $M$
\end_inset

 es simplemente una palabra.
 A las palabras de la forma 
\begin_inset Formula $\mathrm{V}\bar{n}$
\end_inset

,
 con 
\begin_inset Formula $n\in\mathbf{N}$
\end_inset

,
 las llamaremos 
\shape italic
variables numericas de macro
\shape default
.
 A las palabras de la forma 
\begin_inset Formula $\mathrm{W}\bar{n}$
\end_inset

,
 con 
\begin_inset Formula $n\in\mathbf{N}$
\end_inset

,
 las llamaremos 
\shape italic
variables alfabeticas de macro
\shape default
 y a las palabras de la forma 
\begin_inset Formula $\mathrm{A}\bar{n}$
\end_inset

,
 con 
\begin_inset Formula $n\in\mathbf{N}$
\end_inset

,
 las llamaremos 
\shape italic
labels de macro
\shape default
.
 Nuestro macro 
\begin_inset Formula $M$
\end_inset

 no tiene variables alfabeticas de macro pero otros macros por supuesto pueden tener este tipo de variables.
\end_layout

\begin_layout Standard
Las variables 
\begin_inset Formula $\mathrm{V}1$
\end_inset

,
 
\begin_inset Formula $\mathrm{V}2$
\end_inset

 y 
\begin_inset Formula $\mathrm{V}3$
\end_inset

 son llamadas 
\shape italic
variables oficiales
\shape default
 de 
\begin_inset Formula $M$
\end_inset

 ya que son las variables que seran reemplazadas por variables que son protagonistas dentro del programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 que usara la expansion de 
\begin_inset Formula $M$
\end_inset

.
 Las palabras 
\begin_inset Formula $\mathrm{V}4$
\end_inset

 y 
\begin_inset Formula $\mathrm{V}5$
\end_inset

 son llamadas 
\shape italic
variables auxiliares
\shape default
 de 
\begin_inset Formula $M$
\end_inset

 ya que seran reemplazadas por variables que se usaran solo dentro de la expansion y no intervienen en la 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

trama
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 del programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
 Tambien 
\begin_inset Formula $\mathrm{A}1$
\end_inset

,
 
\begin_inset Formula $\mathrm{A}2$
\end_inset

 y 
\begin_inset Formula $\mathrm{A}3$
\end_inset

 son llamados 
\shape italic
labels auxiliares
\shape default
 de 
\begin_inset Formula $M$
\end_inset

 ya que son usados solo para su funcionamiento interno y no tienen vinculacion con los labels del programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
\end_layout

\begin_layout Standard
En el siguiente ejemplo veremos un macro que tiene un label que no es auxiliar sino oficial.
 Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

.
 Supongamos que estamos escribiendo un programa 
\begin_inset Formula $\mathcal{P}^{\prime}$
\end_inset

 y nos hace falta simular instrucciones de la forma
\begin_inset Formula 
\[
\mathrm{IF}\;\left\vert \mathrm{P}\bar{n}\right\vert \leq\mathrm{N}\bar{m}\ \mathrm{GOTO}\;\mathrm{L}\bar{k}
\]

\end_inset

(por supuesto estas instrucciones no pertenecen al lenguaje 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 pero deberia quedar claro como funcionan).
 Entonces podemos tomar el macro 
\begin_inset Formula $M^{\prime}$
\end_inset

:
\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{W}2\leftarrow\mathrm{W}1\\
 & \mathrm{V}2\leftarrow\mathrm{V}1\\
\mathrm{A}4 & \mathrm{IF}\;\mathrm{W}2\;\mathrm{BEGINS}\;@\;\mathrm{GOTO}\;\mathrm{A}2\\
 & \mathrm{IF}\;\mathrm{W}2\;\mathrm{BEGINS}\;!\;\mathrm{GOTO}\;\mathrm{A}2\\
 & \mathrm{GOTO}\;\mathrm{A}1\\
\mathrm{A}2 & \mathrm{IF}\;\mathrm{V}2\neq0\;\mathrm{GOTO}\;\mathrm{A}3\\
 & \mathrm{GOTO}\;\mathrm{A}5\\
\mathrm{A}3 & \mathrm{W}2\leftarrow^{\curvearrowright}\mathrm{W}2\\
 & \mathrm{V}2\leftarrow\mathrm{V}2\dot{-}1\\
 & \mathrm{GOTO}\;\mathrm{A}4\\
\mathrm{A}5 & \mathrm{SKIP}
\end{array}
\]

\end_inset

el cual tiene
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

variables oficiales 
\begin_inset Formula $\mathrm{W}1$
\end_inset

 y 
\begin_inset Formula $\mathrm{V}1$
\end_inset

 (correspondientes a 
\begin_inset Formula $\mathrm{P}\bar{n}$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}\bar{m}$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

variable auxiliares 
\begin_inset Formula $\mathrm{W}2$
\end_inset

 y 
\begin_inset Formula $\mathrm{V}2$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

labels auxiliares 
\begin_inset Formula $\mathrm{A}2$
\end_inset

,
 
\begin_inset Formula $\mathrm{A}3$
\end_inset

,
 
\begin_inset Formula $\mathrm{A}4$
\end_inset

 y 
\begin_inset Formula $\mathrm{A}5$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

un label oficial 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 (correspondiente a 
\begin_inset Formula $\mathrm{L}\bar{k}$
\end_inset

) 
\end_layout

\begin_layout Standard
\noindent
Una descripcion intuitiva del macro 
\begin_inset Formula $M^{\prime}$
\end_inset

 seria
\begin_inset Formula 
\[
\mathrm{IF}\;\left\vert \mathrm{W}1\right\vert \leq\mathrm{V}1\ \mathrm{GOTO}\;\mathrm{A}1
\]

\end_inset

Notese que en las primeras dos lineas el macro 
\begin_inset Formula $M^{\prime}$
\end_inset

 guarda los valores de las variables oficiales 
\begin_inset Formula $\mathrm{W}1$
\end_inset

 y 
\begin_inset Formula $\mathrm{V}1$
\end_inset

 en las variables auxiliares 
\begin_inset Formula $\mathrm{W}2$
\end_inset

 y 
\begin_inset Formula $\mathrm{V}2$
\end_inset

,
 y sigue trabajando con las auxiliares.
 Esto es para preservar el valor de las variables oficiales.
 Dado que 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

,
 las dos siguientes lineas sirven para decidir si el contenido de 
\begin_inset Formula $\mathrm{W}2$
\end_inset

 es 
\begin_inset Formula $\varepsilon$
\end_inset

 o no.
 Dejamos al lector entender el resto del funcionamiento de 
\begin_inset Formula $M^{\prime}$
\end_inset

.
\end_layout

\begin_layout Standard
Para dar un ejemplo de como usariamos a 
\begin_inset Formula $M^{\prime}$
\end_inset

,
 supongamos que para seguir escribiendo nuestro programa 
\begin_inset Formula $\mathcal{P}^{\prime}$
\end_inset

 nos hace falta simular la instruccion
\begin_inset Formula 
\[
\mathrm{IF}\;\left\vert \mathrm{P}5\right\vert \leq\mathrm{N}14\ \mathrm{GOTO}\;\mathrm{L}1
\]

\end_inset

y supongamos que las variables 
\begin_inset Formula $\mathrm{P}1000$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}1000$
\end_inset

 y los labels 
\begin_inset Formula $\mathrm{L}6666$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}7777$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}8888$
\end_inset

 y 
\begin_inset Formula $\mathrm{L}9999$
\end_inset

 no se usaron hasta el momento en 
\begin_inset Formula $\mathcal{P}^{\prime}$
\end_inset

.
 Entonces podemos reemplazar en 
\begin_inset Formula $M^{\prime}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{W}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{P}5$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}14$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{W}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{P}1000$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}1000$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}6666$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}3$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}7777$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}4$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}8888$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}5$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}9999$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
y la expansion de 
\begin_inset Formula $M^{\prime}$
\end_inset

 asi obtenida simulara la instruccion 
\begin_inset Formula $\mathrm{IF}\;\left\vert \mathrm{P}5\right\vert \leq\mathrm{N}14\ \mathrm{GOTO}\;\mathrm{L}1$
\end_inset

.
 Cabe destacar que para asegurarnos que la simulacion funcione,
 tambien deberemos no usar en el resto de 
\begin_inset Formula $\mathcal{P}^{\prime}$
\end_inset

 las variables 
\begin_inset Formula $\mathrm{P}1000$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}1000$
\end_inset

 y los labels 
\begin_inset Formula $\mathrm{L}6666$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}7777$
\end_inset

,
 
\begin_inset Formula $\mathrm{L}8888$
\end_inset

 y 
\begin_inset Formula $\mathrm{L}9999$
\end_inset

.
\end_layout

\begin_layout Standard
Es decir 
\begin_inset Formula $M^{\prime}$
\end_inset

 funciona como un molde con el cual haciendo reemplazos adecuados podemos simular cualquier instruccion del tipo 
\begin_inset Formula $\mathrm{IF}\;\left\vert \mathrm{P}\bar{n}\right\vert \leq\mathrm{N}\bar{m}\ \mathrm{GOTO}\;\mathrm{L}\bar{k}$
\end_inset

,
 con 
\begin_inset Formula $n,m,k\in\mathbf{N}$
\end_inset

.
\end_layout

\begin_layout Standard
Deberia quedar claro el caracter oficial del label 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 en 
\begin_inset Formula $M^{\prime}$
\end_inset

 ya que el label por el que se lo reemplaza para hacer la expansion es uno de los labels protagonistas del programa que se esta escribiendo.
\end_layout

\begin_layout Standard
Cabe destacar que las expansiones de 
\begin_inset Formula $M^{\prime}$
\end_inset

 no son programas ya que si bien son concatenaciones de instrucciones,
 no cumplen la ley de los GOTO (llamada (G) en la definicion de programa) respecto del label que reemplazo a 
\begin_inset Formula $\mathrm{A}1$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Nota:

\series default
 Siempre supondremos que la primera instruccion de los macros no es labelada.
 Esto es porque muchas veces cuando expandamos un macro nos interesara labelar la primera instruccion de dicha expansion.
 Por supuesto,
 esto es facil de conseguir ya que si 
\begin_inset Formula $M$
\end_inset

 es un macro,
 entonces 
\begin_inset Formula $\mathrm{SKIP}M$
\end_inset

 es tambien un macro que posee las mismas propiedades.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 10:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\#,\$\}$
\end_inset

.
 De explicitamente macros que simulen las instrucciones de cada uno de los siguientes formatos
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathrm{N}\bar{n}\leftarrow\mathrm{N}\bar{n}+20$
\end_inset

,
 con 
\begin_inset Formula $n\in\mathbf{N}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathrm{P}\bar{n}\leftarrow\#\#\$\#\$$
\end_inset

,
 con 
\begin_inset Formula $n\in\mathbf{N}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathrm{IF\ P}\bar{n}\neq\varepsilon\ \mathrm{GOTO\ L}\bar{k}$
\end_inset

,
 con 
\begin_inset Formula $n,k\in\mathbf{N}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathrm{N}\bar{n}\leftarrow\left\vert \mathrm{P}\bar{m}\right\vert $
\end_inset

,
 con 
\begin_inset Formula $n,m\in\mathbf{N}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathrm{IF\ P}\bar{n}=\mathrm{P}\bar{m}\ \mathrm{GOTO\ L}\bar{k}$
\end_inset

,
 con 
\begin_inset Formula $n,m,k\in\mathbf{N}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Como hemos visto recien hay dos tipos de macros:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

los de asignacion que cuando son expandidos nos dan un programa que simula la asignacion a una variable dada del resultado de aplicar una funcion a los contenidos de ciertas otras variables;
 y
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

los de tipo IF que cuando son expandidos nos dan un programa salvo por la ley (G),
 el cual direcciona al label que fue a reemplazar a 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 cuando se cumple cierta propiedad (predicado) relativa a los contenidos de las variables que fueron a reemplazar a las variables oficiales.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph*
Ejemplo concreto de uso de macros
\end_layout

\begin_layout Standard
Ya vimos recien que la palabra
\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{V}4\leftarrow\mathrm{V}2\\
 & \mathrm{V}5\leftarrow\mathrm{V}3\\
 & \mathrm{V}1\leftarrow\mathrm{V}4\\
\mathrm{A}1 & \mathrm{IF}\;\mathrm{V}5\neq0\;\mathrm{GOTO}\;\mathrm{A}2\\
 & \mathrm{GOTO}\;\mathrm{A}3\\
\mathrm{A}2 & \mathrm{V}5\leftarrow\mathrm{V}5\dot{-}1\\
 & \mathrm{V}1\leftarrow\mathrm{V}1+1\\
 & \mathrm{GOTO}\;\mathrm{A}1\\
\mathrm{A}3 & \mathrm{SKIP}
\end{array}
\]

\end_inset

es un macro que sirve para simular instrucciones de la forma 
\begin_inset Formula $\mathrm{N}\bar{k}\leftarrow\mathrm{N}\bar{n}+\mathrm{N}\bar{m}$
\end_inset

.
 Notemos que este macro es de asignacion ya que cuando es expandido nos da un programa que simula la asignacion a una variable dada del resultado de aplicar una funcion a los contenidos de ciertas otras variables.
 En este caso la funcion es 
\begin_inset Formula $SUMA=\lambda xy[x+y]$
\end_inset

 por lo cual usaremos 
\begin_inset Formula $\left[\mathrm{V}1\leftarrow SUMA(\mathrm{V}2,\mathrm{V}3)\right]$
\end_inset

 para denotar a dicho macro.
 Usaremos este macro para dar un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 que compute a la funcion 
\begin_inset Formula $\lambda xy[x.y]$
\end_inset

.
 Notese que podemos tomar 
\begin_inset Formula $\mathcal{P}$
\end_inset

 igual al siguiente programa
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}1 & \mathrm{IF}\;\mathrm{N}2\neq0\;\mathrm{GOTO}\;\mathrm{L}2\\
 & \mathrm{GOTO}\;\mathrm{L}3\\
\mathrm{L}2 & \left[\mathrm{N}3\leftarrow SUMA(\mathrm{N}3,\mathrm{N}1)\right]\\
 & \mathrm{N}2\leftarrow\mathrm{N}2\dot{-}1\\
 & \mathrm{GOTO}\;\mathrm{L}1\\
\mathrm{L}3 & \mathrm{N}1\leftarrow\mathrm{N}3
\end{array}
\]

\end_inset

donde 
\begin_inset Formula $\left[\mathrm{N}3\leftarrow SUMA(\mathrm{N}3,\mathrm{N}1)\right]$
\end_inset

 es una expansion del macro 
\begin_inset Formula $\left[\mathrm{V}1\leftarrow SUMA(\mathrm{V}2,\mathrm{V}3)\right]$
\end_inset

 hecha haciendo el reemplazo de las variables oficiales 
\begin_inset Formula $\mathrm{V}1,\mathrm{V}2$
\end_inset

 y 
\begin_inset Formula $\mathrm{V}3$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}3,\mathrm{N}3$
\end_inset

 y 
\begin_inset Formula $\mathrm{N}1$
\end_inset

,
 respectivamente,
 y haciendo reemplazos adecuados de sus variables y labels auxiliares.
 Hay muchas formas de hacer los reemplazos de variables y labels auxiliares pero en general no lo especificaremos explicitamente cuando expandamos un macro ya que es facil imaginar como hacerlo en funcion del programa que estemos realizando.
 Por ejemplo en el caso de 
\begin_inset Formula $\mathcal{P}$
\end_inset

 podriamos hacer los siguientes reemplazos:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}4$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}1111$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{V}5$
\end_inset

 por 
\begin_inset Formula $\mathrm{N}2222$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}1000$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}2$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}2000$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

cada ocurrencia de 
\begin_inset Formula $\mathrm{A}3$
\end_inset

 por 
\begin_inset Formula $\mathrm{L}3000$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
y claramente esto no afectara la 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

logica
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 o 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

idea
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 de nuestro programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

.
 De esta forma la expansion 
\begin_inset Formula $\left[\mathrm{N}3\leftarrow SUMA(\mathrm{N}3,\mathrm{N}1)\right]$
\end_inset

 es el siguiente programa:
\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{N}1111\leftarrow\mathrm{N}3\\
 & \mathrm{N}2222\leftarrow\mathrm{N}1\\
 & \mathrm{N}3\leftarrow\mathrm{N}1111\\
\mathrm{L}1000 & \mathrm{IF}\;\mathrm{N}2222\neq0\;\mathrm{GOTO}\;\mathrm{L}2000\\
 & \mathrm{GOTO}\;\mathrm{L}3000\\
\mathrm{L}2000 & \mathrm{N}2222\leftarrow\mathrm{N}2222\dot{-}1\\
 & \mathrm{N}3\leftarrow\mathrm{N}3+1\\
 & \mathrm{GOTO}\;\mathrm{L}1000\\
\mathrm{L}3000 & \mathrm{SKIP}
\end{array}
\]

\end_inset

el cual por supuesto esta escrito con espacios y en forma vertical pero es una mera palabra.
 Tenemos entonces que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 es el programa:
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}1 & \mathrm{IF}\;\mathrm{N}2\neq0\;\mathrm{GOTO}\;\mathrm{L}2\\
 & \mathrm{GOTO}\;\mathrm{L}3\\
\mathrm{L}2 & \mathrm{N}1111\leftarrow\mathrm{N}1\\
 & \mathrm{N}2222\leftarrow\mathrm{N}3\\
 & \mathrm{N}3\leftarrow\mathrm{N}1111\\
\mathrm{L}1000 & \mathrm{IF}\;\mathrm{N}2222\neq0\;\mathrm{GOTO}\;\mathrm{L}2000\\
 & \mathrm{GOTO}\;\mathrm{L}3000\\
\mathrm{L}2000 & \mathrm{N}2222\leftarrow\mathrm{N}2222\dot{-}1\\
 & \mathrm{N}3\leftarrow\mathrm{N}3+1\\
 & \mathrm{GOTO}\;\mathrm{L}1000\\
\mathrm{L}3000 & \mathrm{SKIP}\\
 & \mathrm{N}2\leftarrow\mathrm{N}2\dot{-}1\\
 & \mathrm{GOTO}\;\mathrm{L}1\\
\mathrm{L}3 & \mathrm{N}1\leftarrow\mathrm{N}3
\end{array}
\]

\end_inset

el cual por supuesto esta escrito con espacios y en forma vertical pero es una mera palabra.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Macros asociados a funciones 
\begin_inset Formula $\Sigma$
\end_inset

-computables
\end_layout

\begin_layout Standard
Dada una funcion 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

,
 usaremos
\begin_inset Formula 
\[
\left[\mathrm{V}\overline{n+1}\leftarrow f(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]
\]

\end_inset

para denotar un macro 
\begin_inset Formula $M$
\end_inset

 el cual cumpla las siguientes propiedades.
 Cabe destacar que no siempre existira dicho macro,
 es decir solo para ciertas funciones 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 habra un tal macro.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

Las variables oficiales de 
\begin_inset Formula $M$
\end_inset

 son 
\begin_inset Formula $\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{V}\overline{n+1},\mathrm{W}1,...,\mathrm{W}\bar{m}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $M$
\end_inset

 no tiene labels oficiales
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset

Si reemplazamos:
\end_layout

\begin_deeper
\begin_layout Enumerate
las variables oficiales de 
\begin_inset Formula $M$
\end_inset

 (i.e.
 
\begin_inset Formula $\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{V}\overline{n+1},\mathrm{W}1,...,\mathrm{W}\bar{m}$
\end_inset

) por variables concretas
\begin_inset Formula 
\[
\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{N}\overline{k_{n+1}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}
\]

\end_inset

(elejidas libremente,
 es decir los numeros 
\begin_inset Formula $k_{1},...,k_{n+1},j_{1},...,j_{m}$
\end_inset

 son cualesquiera)
\end_layout

\begin_layout Enumerate
las variables auxiliares de 
\begin_inset Formula $M$
\end_inset

 por variables concretas (distintas de a dos) y NO pertenecientes a la lista 
\begin_inset Formula $\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{N}\overline{k_{n+1}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}$
\end_inset


\end_layout

\begin_layout Enumerate
los labels auxiliares de 
\begin_inset Formula $M$
\end_inset

 por labels concretos (distintos de a dos) 
\end_layout

\begin_layout Standard
\noindent
Entonces la palabra asi obtenida es un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 que denotaremos con
\begin_inset Formula 
\[
\left[\mathrm{N}\overline{k_{n+1}}\leftarrow f(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\right]
\]

\end_inset

el cual debe tener la siguiente propiedad:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si hacemos correr 
\begin_inset Formula $\left[\mathrm{N}\overline{k_{n+1}}\leftarrow f(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\right]$
\end_inset

 partiendo de un estado 
\begin_inset Formula $e$
\end_inset

 que le asigne a las variables 
\begin_inset Formula $\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}$
\end_inset

 valores 
\begin_inset Formula $x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}$
\end_inset

,
 entonces independientemente de los valores que les asigne 
\begin_inset Formula $e$
\end_inset

 al resto de las variables (incluidas las que fueron a reemplazar a las variables auxiliares de 
\begin_inset Formula $M$
\end_inset

) se dara que
\end_layout

\begin_deeper
\begin_layout Enumerate
si 
\begin_inset Formula $(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})\notin D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $\left[\mathrm{N}\overline{k_{n+1}}\leftarrow f(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\right]$
\end_inset

 no se detiene
\end_layout

\begin_layout Enumerate
si 
\begin_inset Formula $(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})\in D_{f}$
\end_inset

,
 entonces 
\begin_inset Formula $\left[\mathrm{N}\overline{k_{n+1}}\leftarrow f(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\right]$
\end_inset

 se detiene (i.e.
 intenta realizar la siguiente a su ultima instrucion) y llega a un estado 
\begin_inset Formula $e^{\prime}$
\end_inset

 el cual cumple:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $e^{\prime}$
\end_inset

 le asigna a 
\begin_inset Formula $\mathrm{N}\overline{k_{n+1}}$
\end_inset

 el valor 
\begin_inset Formula $f(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $e^{\prime}$
\end_inset

 solo puede diferir de 
\begin_inset Formula $e$
\end_inset

 en los valores que le asigna a 
\begin_inset Formula $\mathrm{N}\overline{k_{n+1}}$
\end_inset

 o a las variables que fueron a reemplazar a las variables auxiliares de 
\begin_inset Formula $M$
\end_inset

.
 Al resto de las variables,
 incluidas 
\begin_inset Formula $\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}$
\end_inset

 no las modifica (salvo en el caso de que alguna 
\begin_inset Formula $\mathrm{N}\overline{k_{i}}$
\end_inset

 sea la variable 
\begin_inset Formula $\mathrm{N}\overline{k_{n+1}}$
\end_inset

,
 situacion en la cual el valor final de la variable 
\begin_inset Formula $\mathrm{N}\overline{k_{i}}$
\end_inset

 sera 
\begin_inset Formula $f(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})$
\end_inset

) 
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
\noindent
El programa 
\begin_inset Formula $\left[\mathrm{N}\overline{k_{n+1}}\leftarrow f(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\right]$
\end_inset

 es comunmente llamado la expansion del macro 
\begin_inset Formula $\left[\mathrm{V}\overline{n+1}\leftarrow f(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]$
\end_inset

 con respecto a la eleccion de variables y labels realizada.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Tambien,
 dada una funcion 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\Sigma^{\ast}$
\end_inset

,
 con
\begin_inset Formula 
\[
\left[\mathrm{W}\overline{m+1}\leftarrow f(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]
\]

\end_inset

denotaremos un macro el cual cumpla condiciones analogas a las descriptas recien.
 Dejamos al lector escribirlas en detalle para este caso.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Aceptaremos sin demostracion el siguiente resultado fundamental.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "macro funciones"

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset

Sea 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 una funcion 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-
\shape default
computable.
 Entonces en 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 hay un macro
\begin_inset Formula 
\[
\left[\mathrm{V}\overline{n+1}\leftarrow f(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

Sea 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\Sigma^{\ast}$
\end_inset

 una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 Entonces en 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 hay un macro
\begin_inset Formula 
\[
\left[\mathrm{W}\overline{m+1}\leftarrow f(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 11:
\end_layout

\end_inset

Sea 
\begin_inset Formula $SUMA=\lambda xy[x+y]$
\end_inset

.
 Explique por que la palabra
\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{V}1\leftarrow\mathrm{V}2\\
 & \mathrm{V}4\leftarrow\mathrm{V}3\\
\mathrm{A}1 & \mathrm{IF}\;\mathrm{V}4\neq0\;\mathrm{GOTO}\;\mathrm{A}2\\
 & \mathrm{GOTO}\;\mathrm{A}3\\
\mathrm{A}2 & \mathrm{V}4\leftarrow\mathrm{V}4\dot{-}1\\
 & \mathrm{V}1\leftarrow\mathrm{V}1+1\\
 & \mathrm{GOTO}\;\mathrm{A}1\\
\mathrm{A}3 & \mathrm{SKIP}
\end{array}
\]

\end_inset

no puede ser tomada como el macro 
\begin_inset Formula $\left[\mathrm{V}3\leftarrow SUMA(\mathrm{V}1,\mathrm{V}2)\right]$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 12:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\#,\$\}$
\end_inset

 y sea 
\begin_inset Formula $f:D_{f}\subseteq\Sigma^{\ast}\rightarrow\omega$
\end_inset

 una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 Sea 
\begin_inset Formula $L=\{\alpha\in D_{f}:f(\alpha)=1\}$
\end_inset

.
 De (usando el macro 
\begin_inset Formula $\left[\mathrm{V}1\leftarrow f(\mathrm{W}1)\right]$
\end_inset

) un programa 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{P}}^{0,1,\#})=L$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 13:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\#,\$\}$
\end_inset

 y sea 
\begin_inset Formula $f:\omega\rightarrow\Sigma^{\ast}$
\end_inset

 una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 De (usando el macro 
\begin_inset Formula $\left[\mathrm{W}1\leftarrow f(\mathrm{V}1)\right]$
\end_inset

) un programa 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{P}}^{0,1,\#})=\operatorname{Im}f$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 14:
\end_layout

\end_inset

Pruebe la resiproca de la proposicion anterior,
 es decir pruebe que si 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 es tal que en 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 hay un macro
\begin_inset Formula 
\[
\left[\mathrm{V}\overline{n+1}\leftarrow f(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]
\]

\end_inset

entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Macros asociados a predicados 
\begin_inset Formula $\Sigma$
\end_inset

-computables
\end_layout

\begin_layout Standard
Dado un predicado 
\begin_inset Formula $P:D_{P}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

,
 usaremos
\begin_inset Formula 
\[
\left[\mathrm{IF}\;P(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

para denotar un macro 
\begin_inset Formula $M$
\end_inset

 el cual cumpla las siguientes propiedades.
 Cabe destacar que no siempre existira dicho macro,
 es decir solo para ciertos predicados 
\begin_inset Formula $P:D_{P}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 habra un tal macro.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

Las variables oficiales de 
\begin_inset Formula $M$
\end_inset

 son 
\begin_inset Formula $\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $\mathrm{A}1$
\end_inset

 es el unico label oficial de 
\begin_inset Formula $M$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset

Si reemplazamos:
\end_layout

\begin_deeper
\begin_layout Enumerate
las variables oficiales de 
\begin_inset Formula $M$
\end_inset

 (i.e.
 
\begin_inset Formula $\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m}$
\end_inset

) por variables concretas
\begin_inset Formula 
\[
\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}
\]

\end_inset

(elejidas libremente,
 es decir los numeros 
\begin_inset Formula $k_{1},...,k_{n},j_{1},...,j_{m}$
\end_inset

 son cualesquiera)
\end_layout

\begin_layout Enumerate
el label oficial 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 por el label concreto 
\begin_inset Formula $\mathrm{L}\bar{k}$
\end_inset

 (elejido libremente,
 es decir 
\begin_inset Formula $k$
\end_inset

 es cualquier elemento de 
\begin_inset Formula $\mathbf{N}$
\end_inset

)
\end_layout

\begin_layout Enumerate
las variables auxiliares de 
\begin_inset Formula $M$
\end_inset

 por variables concretas (distintas de a dos) y NO pertenecientes a la lista 
\begin_inset Formula $\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}$
\end_inset


\end_layout

\begin_layout Enumerate
los labels auxiliares de 
\begin_inset Formula $M$
\end_inset

 por labels concretos (distintos de a dos) y ninguno igual a 
\begin_inset Formula $\mathrm{L}\bar{k}$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
Entonces la palabra asi obtenida es un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

,
 salvo por la ley de los GOTO respecto de 
\begin_inset Formula $\mathrm{L}\bar{k}$
\end_inset

,
 que denotaremos con
\begin_inset Formula 
\[
\left[\mathrm{IF\ }P(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\ \mathrm{GOTO\ L}\bar{k}\right]
\]

\end_inset

el cual debe tener la siguiente propiedad:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si hacemos correr 
\begin_inset Formula $\left[\mathrm{IF\ }P(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\ \mathrm{GOTO\ L}\bar{k}\right]$
\end_inset

 partiendo de un estado 
\begin_inset Formula $e$
\end_inset

 que le asigne a las variables 
\begin_inset Formula $\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}$
\end_inset

 valores 
\begin_inset Formula $x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}$
\end_inset

,
 entonces independientemente de los valores que les asigne 
\begin_inset Formula $e$
\end_inset

 al resto de las variables (incluidas las que fueron a reemplazar a las variables auxiliares de 
\begin_inset Formula $M$
\end_inset

) se dara que
\end_layout

\begin_deeper
\begin_layout Enumerate
si 
\begin_inset Formula $(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})\notin D_{P}$
\end_inset

,
 entonces 
\begin_inset Formula $\left[\mathrm{IF\ }P(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\ \mathrm{GOTO\ L}\bar{k}\right]$
\end_inset

 no se detiene
\end_layout

\begin_layout Enumerate
si 
\begin_inset Formula $(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})\in D_{P}$
\end_inset

 y 
\begin_inset Formula $P(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})=1$
\end_inset

,
 entonces luego de una cantidad finita de pasos,
 
\begin_inset Formula $\left[\mathrm{IF\ }P(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\ \mathrm{GOTO\ L}\bar{k}\right]$
\end_inset

 direcciona al label 
\begin_inset Formula $\mathrm{L}\bar{k}$
\end_inset

 quedando en un estado 
\begin_inset Formula $e^{\prime}$
\end_inset

 el cual solo puede diferir de 
\begin_inset Formula $e$
\end_inset

 en los valores que le asigna a las variables que fueron a reemplazar a las variables auxiliares de 
\begin_inset Formula $M$
\end_inset

.
 Al resto de las variables,
 incluidas 
\begin_inset Formula $\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}$
\end_inset

 no las modifica
\end_layout

\begin_layout Enumerate
si 
\begin_inset Formula $(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})\in D_{P}$
\end_inset

 y 
\begin_inset Formula $P(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})=0$
\end_inset

,
 entonces luego de una cantidad finita de pasos,
 
\begin_inset Formula $\left[\mathrm{IF\ }P(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\ \mathrm{GOTO\ L}\bar{k}\right]$
\end_inset

 se detiene (i.e.
 intenta realizar la siguiente a su ultima instruccion) quedando en un estado 
\begin_inset Formula $e^{\prime}$
\end_inset

 el cual solo puede diferir de 
\begin_inset Formula $e$
\end_inset

 en los valores que le asigna a las variables que fueron a reemplazar a las variables auxiliares de 
\begin_inset Formula $M$
\end_inset

.
 Al resto de las variables,
 incluidas 
\begin_inset Formula $\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}}$
\end_inset

 no las modifica 
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\noindent
La palabra 
\begin_inset Formula $\left[\mathrm{IF\ }P(\mathrm{N}\overline{k_{1}},...,\mathrm{N}\overline{k_{n}},\mathrm{P}\overline{j_{1}},...,\mathrm{P}\overline{j_{m}})\ \mathrm{GOTO\ L}\bar{k}\right]$
\end_inset

 es llamada la expansion del macro con respecto a la eleccion de variables y labels realizada
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "macro predicados"

\end_inset

Sea 
\begin_inset Formula $P:D_{P}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 un predicado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-
\shape default
computable.
 Entonces en 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 hay un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;P(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Por (a) de la proposicion anterior tenemos un macro 
\begin_inset Formula $\left[\mathrm{V}\overline{n+1}\leftarrow P(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]$
\end_inset

.
 Notese que la palabra
\begin_inset Formula 
\[
\left[\mathrm{V}\overline{n+1}\leftarrow P(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]\mathrm{IFV}\overline{n+1}\mathrm{\neq}0\mathrm{GOTOA}1
\]

\end_inset

es el macro buscado.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 15:
\end_layout

\end_inset

Pruebe la resiproca de la proposicion anterior,
 es decir pruebe que si 
\begin_inset Formula $P:D_{P}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 es tal que en 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 hay un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;P(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

entonces 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 16:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Pruebe usando macros (de tipo IF) que si 
\begin_inset Formula $P:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 y 
\begin_inset Formula $Q:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 son predicados 
\begin_inset Formula $\Sigma$
\end_inset

-computables,
 entonces 
\begin_inset Formula $(P\vee Q)$
\end_inset

,
 
\begin_inset Formula $(P\wedge Q)$
\end_inset

 y 
\begin_inset Formula $\lnot P$
\end_inset

 lo son tambien.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-enumerables
\end_layout

\begin_layout Standard
Ya que la nocion de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable es el modelo matematico Neumanniano o imperativo del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 nos podriamos preguntar entonces cual es el modelo matematico Neumanniano del concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 Si prestamos atencion a la definicion de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable,
 notaremos que depende de la existencia de ciertas funciones 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables por lo cual la siguiente definicion cae de maduro:
\end_layout

\begin_layout Standard
Un conjunto 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 sera llamado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-enumerable
\shape default
 cuando sea vacio o haya una funcion 
\begin_inset Formula $F:\omega\rightarrow\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 tal que 
\begin_inset Formula $I_{F}=S$
\end_inset

 y 
\begin_inset Formula $F_{(i)}$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 para cada 
\begin_inset Formula $i\in\{1,...,n+m\}$
\end_inset

.
\end_layout

\begin_layout Standard
Deberia entonces quedar claro que si el concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable modeliza correctamente al concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 entonces el concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable recien definido modeliza correctamente al concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
\end_layout

\begin_layout Standard
Notese que segun la definicion que acabamos de escribir,
 un conjunto no vacio 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable si y solo si hay programas 
\begin_inset Formula $\mathcal{P}_{1},...,\mathcal{P}_{n+m}$
\end_inset

 tales que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $Dom(\Psi_{\mathcal{P}_{1}}^{1,0,\#})=...=Dom(\Psi_{\mathcal{P}_{n}}^{1,0,\#})=\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $Dom(\Psi_{\mathcal{P}_{n+1}}^{1,0,\ast})=...=Dom(\Psi_{\mathcal{P}_{n}+m}^{1,0,\ast})=\omega$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $S=\operatorname{Im}[\Psi_{\mathcal{P}_{1}}^{1,0,\#},...,\Psi_{\mathcal{P}_{n}}^{1,0,\#},\Psi_{\mathcal{P}_{n+1}}^{1,0,\ast},...,\Psi_{\mathcal{P}_{n}+m}^{1,0,\ast}]$
\end_inset

 
\end_layout

\begin_layout Standard
\noindent
Como puede notarse los programas 
\begin_inset Formula $\mathcal{P}_{1},...,\mathcal{P}_{n+m}$
\end_inset

 puestos en paralelo a funcionar desde el estado 
\begin_inset Formula $\left\Vert x\right\Vert $
\end_inset

 producen en forma natural un procedimiento efectivo (con dato de entrada 
\begin_inset Formula $x\in\omega$
\end_inset

) que enumera a 
\begin_inset Formula $S$
\end_inset

.
 Por supuesto podemos decir que en tal caso los programas 
\begin_inset Formula $\mathcal{P}_{1},...,\mathcal{P}_{n+m}$
\end_inset

 enumeran a 
\begin_inset Formula $S$
\end_inset

.
 La siguiente proposicion muestra que tambien las cosas se pueden hacer con un solo programa
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 un conjunto no vacio.
 Entonces son equivalentes:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

Hay un programa 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que:
\end_layout

\begin_deeper
\begin_layout Enumerate
Para cada 
\begin_inset Formula $x\in\omega$
\end_inset

,
 tenemos que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detiene partiendo desde el estado 
\begin_inset Formula $\left\Vert x\right\Vert $
\end_inset

 y llega a un estado de la forma 
\begin_inset Formula $((x_{1},...,x_{n},y_{1},...),(\alpha_{1},...,\alpha_{m},\beta_{1},...))$
\end_inset

,
 donde 
\begin_inset Formula $(x_{1},...,x_{n},\alpha_{1},...,\alpha_{m})\in S$
\end_inset

.
\end_layout

\begin_layout Enumerate
Para cada 
\begin_inset Formula $(x_{1},...x_{n},\alpha_{1},...,\alpha_{m})\in S$
\end_inset

 hay un 
\begin_inset Formula $x\in\omega$
\end_inset

 tal que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detiene partiendo desde el estado 
\begin_inset Formula $\left\Vert x\right\Vert $
\end_inset

 y llega a un estado de la forma 
\begin_inset Formula $((x_{1},...,x_{n},y_{1},...),(\alpha_{1},...,\alpha_{m},\beta_{1},...))$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (1)
\begin_inset Formula $\Rightarrow$
\end_inset

(2).
 Ya que 
\begin_inset Formula $S$
\end_inset

 es no vacio,
 por definicion tenemos que hay una 
\begin_inset Formula $F:\omega\rightarrow\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 tal que 
\begin_inset Formula $I_{F}=S$
\end_inset

 y 
\begin_inset Formula $F_{(i)}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 para cada 
\begin_inset Formula $i\in\{1,...,n+m\}$
\end_inset

.
 Por la Proposicion 
\begin_inset CommandInset ref
LatexCommand ref
reference "macro funciones"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 tenemos que existen macros:
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{V}2\leftarrow F_{(1)}(\mathrm{V}1)\right]\\
 & \ \ \ \ \ \ \ \ \ \ \ \ \vdots\\
 & \left[\mathrm{V}2\leftarrow F_{(n)}(\mathrm{V}1)\right]\\
 & \left[\mathrm{W}1\leftarrow F_{(n+1)}(\mathrm{V}1)\right]\\
 & \ \ \ \ \ \ \ \ \ \ \ \ \vdots\\
 & \left[\mathrm{W}1\leftarrow F_{(n+m)}(\mathrm{V}1)\right]
\end{align*}

\end_inset

Sea 
\begin_inset Formula $\mathcal{P}$
\end_inset

 el siguiente programa:
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{P}\overline{m}\leftarrow F_{(n+m)}(\mathrm{N}1)\right]\\
 & \ \ \ \ \ \ \ \ \ \ \ \ \vdots\\
 & \left[\mathrm{P}1\leftarrow F_{(n+1)}(\mathrm{N}1)\right]\\
 & \left[\mathrm{N}\overline{n}\leftarrow F_{(n)}(\mathrm{N}1)\right]\\
 & \ \ \ \ \ \ \ \ \ \ \ \ \vdots\\
 & \left[\mathrm{N}1\leftarrow F_{(1)}(\mathrm{N}1)\right]
\end{align*}

\end_inset

donde se supone que las expansiones de los macros usados son hechas usando variables auxiliares no pertenecientes a la lista 
\begin_inset Formula $\mathrm{N}1,...,\mathrm{N}\overline{n},\mathrm{P}1,...,\mathrm{P}\overline{m}$
\end_inset

 (por supuesto,
 dada la fortaleza de nuestros macros se puede usar una misma variable auxiliar para dos distintas expansiones),
 y tambien se supone que los labels auxiliares usados en dichas expansiones son todos distintos,
 es decir no usamos el mismo label auxiliar en dos expansiones distintas (por que?).
\end_layout

\begin_layout Standard
Dejamos al lector corroborar que el programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 cumple las propiedades a y b
\end_layout

\begin_layout Standard
(2)
\begin_inset Formula $\Rightarrow$
\end_inset

(1).
 Supongamos 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 cumple a y b de (2).
 Sean
\begin_inset Formula 
\begin{align*}
\mathcal{P}_{1} & =\mathcal{P}\mathrm{N}1\leftarrow\mathrm{N}1\\
\mathcal{P}_{2} & =\mathcal{P}\mathrm{N}1\leftarrow\mathrm{N}2\\
 & \vdots\\
\mathcal{P}_{n} & =\mathcal{P}\mathrm{N}1\leftarrow\mathrm{N}\overline{n}\\
\mathcal{P}_{n+1} & =\mathcal{P}\mathrm{P}1\leftarrow\mathrm{P}1\\
\mathcal{P}_{n+2} & =\mathcal{P}\mathrm{P}1\leftarrow\mathrm{P}2\\
 & \vdots\\
\mathcal{P}_{n+m} & =\mathcal{P}\mathrm{P}1\leftarrow\mathrm{P}\overline{m}
\end{align*}

\end_inset

Definamos
\begin_inset Formula 
\begin{align*}
F_{1} & =\Psi_{\mathcal{P}_{1}}^{1,0,\#}\\
F_{2} & =\Psi_{\mathcal{P}_{2}}^{1,0,\#}\\
 & \vdots\\
F_{n} & =\Psi_{\mathcal{P}_{n}}^{1,0,\#}\\
F_{n+1} & =\Psi_{\mathcal{P}_{n+1}}^{1,0,\ast}\\
F_{n+2} & =\Psi_{\mathcal{P}_{n+2}}^{1,0,\ast}\\
 & \vdots\\
F_{n+m} & =\Psi_{\mathcal{P}_{n+m}}^{1,0,\ast}
\end{align*}

\end_inset

Notese que cada 
\begin_inset Formula $F_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable y tiene dominio igual a 
\begin_inset Formula $\omega$
\end_inset

.
 Sea 
\begin_inset Formula $F=[F_{1},...,F_{n+m}]$
\end_inset

.
 Tenemos por definicion que 
\begin_inset Formula $D_{F}=\omega$
\end_inset

 y ya que 
\begin_inset Formula $F_{(i)}=F_{i}$
\end_inset

,
 para cada 
\begin_inset Formula $i=1,...,n+m$
\end_inset

 tenemos que cada 
\begin_inset Formula $F_{(i)}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 Dejamos al lector verificar que 
\begin_inset Formula $I_{F}=S$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Cuando un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 cumpla las propiedades dadas en (2) de la proposicion anterior respecto de un conjunto 
\begin_inset Formula $S$
\end_inset

,
 diremos que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 
\shape italic
enumera 
\shape default
a 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Standard
Cabe destacar que (2)
\begin_inset Formula $\Rightarrow$
\end_inset

(1) de la proposicion anterior es muy util a la hora de probar que un conjunto dado es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable ya que nos permite trabajar dentro de un solo programa.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 17:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,!\}$
\end_inset

.
 Pruebe sin usar macros ni la proposicion anterior que 
\begin_inset Formula $S=\{(2,\%\%),(3,!!!),(0,\varepsilon)\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 18:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,!\}$
\end_inset

.
 Pruebe sin usar macros ni la proposicion anterior que 
\begin_inset Formula $S=\{(i,5,\%^{i}):i\in\omega\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 19:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,!\}$
\end_inset

.
 Sea 
\begin_inset Formula $L\subseteq\Sigma^{\ast}$
\end_inset

 un conjunto no vacio y 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable.
 De (usando macros) un programa 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que 
\begin_inset Formula $\Psi_{\mathcal{P}}^{1,0,\ast}$
\end_inset

 enumera al conjunto
\begin_inset Formula 
\[
\{\alpha\%!:\alpha\in L\}
\]

\end_inset

es decir 
\family roman
Dom
\family default

\begin_inset Formula $\Psi_{\mathcal{P}}^{1,0,\ast}=\omega$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}\Psi_{\mathcal{P}}^{1,0,\ast}=\{\alpha\%!:\alpha\in L\}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 20:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,!\}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
S=\{(x,x+1,x+2,\%\%!!):x\in\omega\}
\]

\end_inset

De sin usar macros un programa 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 el cual enumere a 
\begin_inset Formula $S$
\end_inset

 (i.e.
 que cumpla (2) de la proposicion anterior).
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-computables
\end_layout

\begin_layout Standard
La version imperativa o Neumanniana del concepto de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable es facil de dar:
 un conjunto 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 sera llamado 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-computable
\shape default
 cuando la funcion 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 sea 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 O sea que 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable sii hay un programa 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 el cual computa a 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

,
 es decir:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in S$
\end_inset

,
 entonces 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detiene partiendo desde 
\begin_inset Formula $\left\Vert x_{1},...x_{n},\alpha_{1},...,\alpha_{m}\right\Vert $
\end_inset

 y la variable 
\begin_inset Formula $\mathrm{N}1$
\end_inset

 queda con contenido igual a 
\begin_inset Formula $1$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si 
\begin_inset Formula $(\vec{x},\vec{\alpha})\in(\omega^{n}\times\Sigma^{\ast m})-S$
\end_inset

,
 entonces 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detiene partiendo desde 
\begin_inset Formula $\left\Vert x_{1},...x_{n},\alpha_{1},...,\alpha_{m}\right\Vert $
\end_inset

 y la variable 
\begin_inset Formula $\mathrm{N}1$
\end_inset

 queda con contenido igual a 
\begin_inset Formula $0$
\end_inset

 
\end_layout

\begin_layout Standard
Si 
\begin_inset Formula $\mathcal{P}$
\end_inset

 es un programa el cual computa a 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

,
 diremos que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 
\shape italic
decide la pertenecia a 
\shape default

\begin_inset Formula $S$
\end_inset

,
 con respecto al conjunto 
\begin_inset Formula $\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 21:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,!\}$
\end_inset

.
 Pruebe sin usar macros que 
\begin_inset Formula $S=\{(2,\%\%),(3,!)\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 22:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\%,!\}$
\end_inset

.
 Pruebe sin usar macros que 
\begin_inset Formula $S=\{(i,\%^{i}):i\in\omega\}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 23:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Pruebe usando macros que
\end_layout

\begin_deeper
\begin_layout Enumerate
Si 
\begin_inset Formula $P:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 y 
\begin_inset Formula $Q:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 son predicados 
\begin_inset Formula $\Sigma$
\end_inset

-computables,
 entonces 
\begin_inset Formula $(P\vee Q)$
\end_inset

,
 
\begin_inset Formula $(P\wedge Q)$
\end_inset

 y 
\begin_inset Formula $\lnot P$
\end_inset

 lo son tambien.
\end_layout

\begin_layout Enumerate
Si 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-computables,
 entonces 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

,
 
\begin_inset Formula $S_{1}\cap S_{2}$
\end_inset

 y 
\begin_inset Formula $S_{1}-S_{2}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-computables 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph*
Macros asociados a conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-computables
\end_layout

\begin_layout Standard
La Proposicion 
\begin_inset CommandInset ref
LatexCommand ref
reference "macro predicados"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que si 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 entonces,
 ya que 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 hay un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Escribiremos el nombre de este macro de la siguiente manera mas intuitiva:
\begin_inset Formula 
\[
\left[\mathrm{IF}\;(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\in S\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Notese que las expanciones de este macro,
 dado que 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-total,
 ya sea terminan por la ultima instruccion de la expansion o direccionan a la primera instruccion que tenga label igual al label que reemplazo a 
\begin_inset Formula $\mathrm{A}1$
\end_inset

 en la expansion.
 Es importante notar que para asegurar la existencia de este macro utilizamos que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable lo cual no siempre sucedera para un conjunto 
\begin_inset Formula $S$
\end_inset

.
 Por ejemplo,
 puede pasar que 
\begin_inset Formula $S$
\end_inset

 sea el dominio de una funcion 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-
\shape default
computable pero que 
\begin_inset Formula $S$
\end_inset

 no sea 
\begin_inset Formula $\Sigma$
\end_inset

-computable (esto se vera mas adelante) y en tal caso no existira un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\in S\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

ya que si tal macro existiera seria facil hacer un programa que compute a 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 lo cual nos diria que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable (ver el ejercicio posterior a la Proposicion 
\begin_inset CommandInset ref
LatexCommand ref
reference "macro predicados"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

).
 Es muy comun el error de suponer que existe un macro 
\begin_inset Formula $\left[\mathrm{IF}\;(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\in S\;\mathrm{GOTO}\;\mathrm{A}1\right]$
\end_inset

 cuando 
\begin_inset Formula $S$
\end_inset

 es el dominio de una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
\end_layout

\begin_layout Section
Guia 8
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Section*
Batallas entre paradigmas
\end_layout

\begin_layout Standard
En esta guia compararemos los tres paradigmas de computabilidad efectiva que hemos desarrollado anteriormente.
 Para esto probaremos que cada uno de dichos paradigmas 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

vence
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 al otro en el sentido que incluye por lo menos todas las funciones que incluye el otro en su modelizacion del concepto de funcion 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Por supuesto,
 esto dice que los tres son equivalentes.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Neumann vence a Godel
\end_layout

\begin_layout Standard
Usando macros podemos ahora probar que el paradigma imperativo de Neumann es por lo menos tan abarcativo como el funcional de Godel.
 Mas concretamente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Si 
\begin_inset Formula $h$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva,
 entonces 
\begin_inset Formula $h$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-
\shape default
computable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Probaremos por induccion en 
\begin_inset Formula $k$
\end_inset

 que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(*)
\end_layout

\end_inset

Si 
\begin_inset Formula $h\in\mathrm{R}_{k}^{\Sigma}$
\end_inset

,
 entonces 
\begin_inset Formula $h$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-
\shape default
computable.
 
\end_layout

\begin_layout Standard
\noindent
El caso 
\begin_inset Formula $k=0$
\end_inset

 es dejado al lector.
 Supongamos (*) vale para 
\begin_inset Formula $k$
\end_inset

,
 veremos que vale para 
\begin_inset Formula $k+1$
\end_inset

.
 Sea 
\begin_inset Formula $h\in\mathrm{R}_{k+1}^{\Sigma}-\mathrm{R}_{k}^{\Sigma}$
\end_inset

.
 Hay varios casos
\end_layout

\begin_layout Standard
Caso 1.
 Supongamos 
\begin_inset Formula $h=M(P)$
\end_inset

,
 con 
\begin_inset Formula $P:\omega\times\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

,
 un predicado perteneciente a 
\begin_inset Formula $\mathrm{R}_{k}^{\Sigma}$
\end_inset

.
 Por hipotesis inductiva,
 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-
\shape default
computable y por lo tanto tenemos un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;P(\mathrm{V}1,...,\mathrm{V}\overline{n+1},\mathrm{W}1,...,\mathrm{W}\bar{m})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

lo cual nos permite realizar el siguiente programa
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}2 & \left[\mathrm{IF}\;P(\mathrm{N}\overline{n+1},\mathrm{N}1,...,\mathrm{N}\bar{n},\mathrm{P}1,...,\mathrm{P}\bar{m})\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
 & \mathrm{N}\overline{n+1}\leftarrow\mathrm{N}\overline{n+1}+1\\
 & \mathrm{GOTO}\;\mathrm{L}2\\
\mathrm{L}1 & \mathrm{N}1\leftarrow\mathrm{N}\overline{n+1}
\end{array}
\]

\end_inset

Es facil chequear que este programa computa 
\begin_inset Formula $h.$
\end_inset


\end_layout

\begin_layout Standard
Caso 2.
 Supongamos 
\begin_inset Formula $h=R(f,\mathcal{G})$
\end_inset

,
 con
\begin_inset Formula 
\begin{align*}
f & :S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\rightarrow\Sigma^{\ast}\\
\mathcal{G}_{a} & :S_{1}\times...\times S_{n}\times L_{1}\times...\times L_{m}\times\Sigma^{\ast}\times\Sigma^{\ast}\rightarrow\Sigma^{\ast}\text{, }a\in\Sigma
\end{align*}

\end_inset

elementos de 
\begin_inset Formula $\mathrm{R}_{k}^{\Sigma}$
\end_inset

.
 Sea 
\begin_inset Formula $\Sigma=\{a_{1},...,a_{r}\}.$
\end_inset

 Por hipotesis inductiva,
 las funciones 
\begin_inset Formula $f$
\end_inset

,
 
\begin_inset Formula $\mathcal{G}_{a}$
\end_inset

,
 
\begin_inset Formula $a\in\Sigma$
\end_inset

,
 son 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-
\shape default
computables y por lo tanto podemos hacer el siguiente programa via el uso de macros
\begin_inset Formula 
\[
\begin{array}{rl}
 & \left[\mathrm{P}\overline{m+3}\leftarrow f(\mathrm{N}1,...,\mathrm{N}\bar{n},\mathrm{P}1,...,\mathrm{P}\bar{m})\right]\\
\mathrm{L}\overline{r+1} & \mathrm{IF}\;\mathrm{P}\overline{m+1}\ \mathrm{BEGINS\ }a_{1}\text{ }\mathrm{GOTO}\;\mathrm{L}1\\
 & \ \ \ \ \ \ \ \ \ \ \ \ \vdots\\
 & \mathrm{IF}\;\mathrm{P}\overline{m+1}\ \mathrm{BEGINS\ }a_{r}\text{ }\mathrm{GOTO}\;\mathrm{L}\bar{r}\\
 & \mathrm{GOTO}\;\mathrm{L}\overline{r+2}\\
\mathrm{L}1 & \mathrm{P}\overline{m+1}\leftarrow\text{ }^{\curvearrowright}\mathrm{P}\overline{m+1}\\
 & \left[\mathrm{P}\overline{m+3}\leftarrow\mathcal{G}_{a_{1}}(\mathrm{N}1,...,\mathrm{N}\bar{n},\mathrm{P}1,...,\mathrm{P}\bar{m},\mathrm{P}\overline{m+2},\mathrm{P}\overline{m+3})\right]\\
 & \mathrm{P}\overline{m+2}\leftarrow\mathrm{P}\overline{m+2}.a_{1}\\
 & \mathrm{GOTO}\;\mathrm{L}\overline{r+1}\\
 & \ \ \ \ \ \ \ \ \ \ \ \ \vdots\\
\mathrm{L}\bar{r} & \mathrm{P}\overline{m+1}\leftarrow\text{ }^{\curvearrowright}\mathrm{P}\overline{m+1}\\
 & \left[\mathrm{P}\overline{m+3}\leftarrow\mathcal{G}_{a_{r}}(\mathrm{N}1,...,\mathrm{N}\bar{n},\mathrm{P}1,...,\mathrm{P}\bar{m},\mathrm{P}\overline{m+2},\mathrm{P}\overline{m+3})\right]\\
 & \mathrm{P}\overline{m+2}\leftarrow\mathrm{P}\overline{m+2}.a_{r}\\
 & \mathrm{GOTO}\;\mathrm{L}\overline{r+1}\\
\mathrm{L}\overline{r+2} & \mathrm{P}1\leftarrow\mathrm{P}\overline{m+3}
\end{array}
\]

\end_inset

Es facil chequear que este programa computa 
\begin_inset Formula $h.$
\end_inset


\end_layout

\begin_layout Standard
El resto de los casos son dejados al lector.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{corollary}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "recursivo implica macro"

\end_inset

Si
\begin_inset Formula 
\begin{align*}
f & :D_{f}\subseteq\omega^{n}\times\Sigma^{\ast}{}^{m}\rightarrow\omega\\
g & :D_{g}\subseteq\omega^{n}\times\Sigma^{\ast}{}^{m}\rightarrow\Sigma^{\ast}\\
P & :D_{P}\subseteq\omega^{n}\times\Sigma^{\ast}{}^{m}\rightarrow\{0,1\}
\end{align*}

\end_inset

son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas,
 entonces hay macros
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{V}\overline{n+1}\leftarrow f(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]\\
 & \left[\mathrm{W}\overline{m+1}\leftarrow g(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]\\
 & \left[\mathrm{IF}\;P(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{corollary}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1:
\end_layout

\end_inset

Pruebe el corolario anterior.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Se lleno de macros
\end_layout

\begin_layout Standard
Cabe destacar que el corolario anterior nos dice que hay macros
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{V}\overline{n+1}\leftarrow f(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]\\
 & \left[\mathrm{W}\overline{m+1}\leftarrow g(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\right]\\
 & \left[\mathrm{IF}\;P(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\end{align*}

\end_inset

para todas las funciones 
\begin_inset Formula $\Sigma$
\end_inset

-mixtas y predicados 
\begin_inset Formula $\Sigma$
\end_inset

-mixtos que hemos trabajado hasta el momento en la materia ya que todas eran 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Esto transforma al lenguaje 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 en un potente y relativamente comodo lenguaje de programacion ya que ahora tenemos macros para todas las funciones y predicados cotidianos en la matematica.
 Por ejemplo a continuacion usaremos la existencia de los macros 
\begin_inset Formula $[\mathrm{IF\ V}1$
\end_inset

 es par
\begin_inset Formula $\ \mathrm{GOTO\ A}1]$
\end_inset

 y 
\begin_inset Formula $[\mathrm{V}2\leftarrow\lfloor\mathrm{V}1/2\rfloor]$
\end_inset

 para probar el siguiente resultado cuya prueba esta inspirada en su analoga del paradigma de computabilidad efectiva.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-enumerables.
 Entonces 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Podemos suponer que ni 
\begin_inset Formula $S_{1}$
\end_inset

 ni 
\begin_inset Formula $S_{2}$
\end_inset

 son vacios ya que de lo contrario los resultados son triviales.
 Ademas supondremos que 
\begin_inset Formula $n=2$
\end_inset

 y 
\begin_inset Formula $m=1$
\end_inset

.
\end_layout

\begin_layout Standard
La idea de la prueba es la misma que la que usamos para probar que la union de conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerables es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 Daremos usando macros un programa que enumera a 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

 y luego aplicaremos la proposicion del final de la Guia 7.
 Por hipotesis hay funciones 
\begin_inset Formula $F:\omega\rightarrow\omega\times\omega\times\Sigma^{\ast}$
\end_inset

 y 
\begin_inset Formula $G:\omega\rightarrow\omega\times\omega\times\Sigma^{\ast}$
\end_inset

 tales que 
\begin_inset Formula $F_{(1)}$
\end_inset

,
 
\begin_inset Formula $F_{(2)}$
\end_inset

,
 
\begin_inset Formula $F_{(3)}$
\end_inset

,
 
\begin_inset Formula $G_{(1)}$
\end_inset

,
 
\begin_inset Formula $G_{(2)}$
\end_inset

 y 
\begin_inset Formula $G_{(3)}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-computables,
 
\begin_inset Formula $\operatorname{Im}(F)=S_{1}$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}(G)=S_{2}$
\end_inset

.
 O sea que hay macros
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{V}2\leftarrow F_{(1)}(\mathrm{V}1)\right]\\
 & \left[\mathrm{V}2\leftarrow F_{(2)}(\mathrm{V}1)\right]\\
 & \left[\mathrm{W}1\leftarrow F_{(3)}(\mathrm{V}1)\right]\\
 & \left[\mathrm{V}2\leftarrow G_{(1)}(\mathrm{V}1)\right]\\
 & \left[\mathrm{V}2\leftarrow G_{(2)}(\mathrm{V}1)\right]\\
 & \left[\mathrm{W}1\leftarrow G_{(3)}(\mathrm{V}1)\right]
\end{align*}

\end_inset

Ya que el predicado 
\begin_inset Formula $Par=\lambda x[x$
\end_inset

 es par
\begin_inset Formula $]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 el Corolario 
\begin_inset CommandInset ref
LatexCommand ref
reference "recursivo implica macro"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que hay un macro:
\begin_inset Formula 
\[
\lbrack\mathrm{IF\ }Par(\mathrm{V}1)\ \mathrm{GOTO\ A}1]
\]

\end_inset

el cual escribiremos de la siguiente manera mas intuitiva
\begin_inset Formula 
\[
\lbrack\mathrm{IF\ V}1\text{ es par }\mathrm{GOTO\ A}1]
\]

\end_inset

Ya que la funcion 
\begin_inset Formula $D=\lambda x[\lfloor x/2\rfloor]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 el Corolario 
\begin_inset CommandInset ref
LatexCommand ref
reference "recursivo implica macro"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que hay un macro:
\begin_inset Formula 
\[
\lbrack\mathrm{V}2\leftarrow D(\mathrm{V}1)]
\]

\end_inset

el cual escribiremos de la siguiente manera mas intuitiva
\begin_inset Formula 
\[
\lbrack\mathrm{V}2\leftarrow\lfloor\mathrm{V}1/2\rfloor]
\]

\end_inset

Sea 
\begin_inset Formula $\mathcal{P}$
\end_inset

 el siguiente programa:
\begin_inset Formula 
\[
\begin{array}{ll}
 & [\mathrm{IF\ N}1\text{ es par }\mathrm{GOTO\ L}1\\
 & \mathrm{N}1\leftarrow\mathrm{N}1\dot{-}1\\
 & [\mathrm{N}1111\leftarrow\lfloor\mathrm{N}1/2\rfloor]\\
 & \left[\mathrm{N}1\leftarrow G_{(1)}(\mathrm{N}1111)\right]\\
 & \left[\mathrm{N}2\leftarrow G_{(2)}(\mathrm{N}1111)\right]\\
 & \left[\mathrm{P}1\leftarrow G_{(3)}(\mathrm{N}1111)\right]\\
 & \mathrm{GOTO\ L}2\\
\mathrm{L}1 & [\mathrm{N}1111\leftarrow\lfloor\mathrm{N}1/2\rfloor]\\
 & \left[\mathrm{N}1\leftarrow F_{(1)}(\mathrm{N}1111)\right]\\
 & \left[\mathrm{N}2\leftarrow F_{(2)}(\mathrm{N}1111)\right]\\
 & \left[\mathrm{P}1\leftarrow F_{(3)}(\mathrm{N}1111)\right]\\
\mathrm{L}2 & \mathrm{SKIP}
\end{array}
\]

\end_inset

Es facil ver que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 cumple a y b de (2) de la proposicion del final de la Guia 7 por lo cual 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Tal como se vio en este ejemplo,
 el Corolario 
\begin_inset CommandInset ref
LatexCommand ref
reference "recursivo implica macro"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 junto con nuestra gran coleccion de funciones ya probadamente 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas,
 nos permite simular con programas muchos de los procedimientos efectivos realizados anteriormente.
 A continuacion algunos ejercicios para afianzar mas esta idea.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

Pruebe que 
\begin_inset Formula $\omega\times\omega\times\Sigma^{\ast}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable (Hint:
 usando macros (asociados a las 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

bajadas
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 y a 
\begin_inset Formula $\ast^{\leq}$
\end_inset

) haga un programa que enumere a 
\begin_inset Formula $\omega\times\omega\times\Sigma^{\ast}$
\end_inset

,
 es decir que cumpla a y b de (2) de la proposicion del final de la Guia 7)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

Supongamos 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-enumerables.
 Entonces 
\begin_inset Formula $S_{1}\cap S_{2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable.
 (Hacer el caso 
\begin_inset Formula $n=2$
\end_inset

,
 
\begin_inset Formula $m=1$
\end_inset

 e inspirese en el paradigma efectivo) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
En la Guia 3 probamos que si 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable entonces 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 Via el uso de macros adecuados podemos copiar la idea de la prueba de dicho resultado para probar el siguiente
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Si 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 entonces 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

Pruebe el lema anterior (haga el caso 
\begin_inset Formula $n=2$
\end_inset

,
 
\begin_inset Formula $m=1$
\end_inset

)
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

Si 
\begin_inset Formula $S\subseteq\Sigma^{\ast}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable,
 entonces
\begin_inset Formula 
\[
T=\{\alpha\in\Sigma^{\ast}:\mathrm{existe}\ \beta\in S\ \mathrm{tal\ que\ }\alpha\ \mathrm{es\ subpalabra\ de\ }\beta\}
\]

\end_inset

también es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Mas capacidad de simulacion obtendremos luego de ver que Godel vence a Neumann ya que la equivalencia de estos dos paradigmas nos asegura la existencia de macros que permitiran dentro de un programa hablar acerca del funcionamiento de otro programa.
 Esto sera clave a la hora de simular con programas a procedimientos efectivos que en su funcionamiento involucran el funcionamiento de otros procedimientos.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Godel vence a Neumann
\end_layout

\begin_layout Standard
Primero definiremos tres funciones las cuales contienen toda la informacion acerca del funcionamiento del lenguaje 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

.
 Sean 
\begin_inset Formula $n,m\in\omega$
\end_inset

,
 fijos.
 Definamos
\begin_inset Formula 
\begin{align*}
i^{n,m} & :\omega\times\omega^{n}\times\Sigma^{\ast m}\times\mathrm{Pro}^{\Sigma}\rightarrow\omega\\
E_{\#}^{n,m} & :\omega\times\omega^{n}\times\Sigma^{\ast m}\times\mathrm{Pro}^{\Sigma}\rightarrow\omega^{\lbrack\mathbf{N}]}\\
E_{\ast}^{n,m} & :\omega\times\omega^{n}\times\Sigma^{\ast m}\times\mathrm{Pro}^{\Sigma}\rightarrow\Sigma^{\ast\lbrack\mathbf{N}]}
\end{align*}

\end_inset

de la siguiente manera
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $(i^{n,m}(0,\vec{x},\vec{\alpha},\mathcal{P}),E_{\#}^{n,m}(0,\vec{x},\vec{\alpha},\mathcal{P}),E_{\ast}^{n,m}(0,\vec{x},\vec{\alpha},\mathcal{P}))=(1,(x_{1},...,x_{n},0,...),(\alpha_{1},...,\alpha_{m},\varepsilon,...))$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset


\begin_inset Formula $(i^{n,m}(t+1,\vec{x},\vec{\alpha},\mathcal{P}),E_{\#}^{n,m}(t+1,\vec{x},\vec{\alpha},\mathcal{P}),E_{\ast}^{n,m}(t+1,\vec{x},\vec{\alpha},\mathcal{P}))=$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Formula $\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ =S_{\mathcal{P}}(i^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}),E_{\#}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}),E_{\ast}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}))$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\noindent
Notese que
\begin_inset Formula 
\[
(i^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}),E_{\#}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}),E_{\ast}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}))
\]

\end_inset

es la descripcion instantanea que se obtiene luego de correr 
\begin_inset Formula $\mathcal{P}$
\end_inset

 una cantidad 
\begin_inset Formula $t$
\end_inset

 de pasos partiendo del estado
\begin_inset Formula 
\[
((x_{1},...,x_{n},0,...),(\alpha_{1},...,\alpha_{m},\varepsilon,...))
\]

\end_inset

Es importante notar que si bien 
\begin_inset Formula $i^{n,m}$
\end_inset

 es una funcion 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-mixta,
 ni 
\begin_inset Formula $E_{\#}^{n,m}$
\end_inset

 ni 
\begin_inset Formula $E_{\ast}^{n,m}$
\end_inset

 lo son.
\end_layout

\begin_layout Standard
Definamos para cada 
\begin_inset Formula $j\in\mathbf{N}$
\end_inset

,
 funciones
\begin_inset Formula 
\begin{align*}
E_{\#j}^{n,m} & :\omega\times\omega^{n}\times\Sigma^{\ast m}\times\mathrm{Pro}^{\Sigma}\rightarrow\omega\\
E_{\ast j}^{n,m} & :\omega\times\omega^{n}\times\Sigma^{\ast m}\times\mathrm{Pro}^{\Sigma}\rightarrow\Sigma^{\ast}
\end{align*}

\end_inset

de la siguiente manera
\begin_inset Formula 
\begin{align*}
E_{\#j}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}) & =j\text{-esima coordenada de }E_{\#}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P})\\
E_{\ast j}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}) & =j\text{-esima coordenada de }E_{\ast}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P})
\end{align*}

\end_inset

(es claro que estas funciones son 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-mixtas).
 Notese que
\begin_inset Formula 
\begin{align*}
E_{\#}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}) & =(E_{\#1}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}),E_{\#2}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}),...)\\
E_{\ast}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}) & =(E_{\ast1}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}),E_{\ast2}^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P}),...)
\end{align*}

\end_inset

Aceptaremos sin prueba la siguiente proposicion.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 Sean 
\begin_inset Formula $n,m\geq0$
\end_inset

.
 Las funciones 
\begin_inset Formula $i^{n,m}$
\end_inset

,
 
\begin_inset Formula $E_{\#j}^{n,m}$
\end_inset

,
 
\begin_inset Formula $E_{\ast j}^{n,m}$
\end_inset

,
 
\begin_inset Formula $j=1,2,...$
\end_inset

,
 son 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph*
Las funciones 
\begin_inset Formula $Halt^{n,m}$
\end_inset

 y 
\begin_inset Formula $T^{n,m}$
\end_inset


\end_layout

\begin_layout Standard
Dados 
\begin_inset Formula $n,m\in\omega$
\end_inset

,
 definamos:
\begin_inset Formula 
\[
Halt^{n,m}=\lambda t\vec{x}\vec{\alpha}\mathcal{P}\left[i^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P})=n(\mathcal{P})+1\right]
\]

\end_inset

Notese que 
\begin_inset Formula $D_{Halt^{n,m}}=\omega\times\omega^{n}\times\Sigma^{\ast m}\times\mathrm{Pro}^{\Sigma}$
\end_inset

 (ojo que aqui la notacion lambda es respecto del alfabeto 
\begin_inset Formula $\Sigma\cup\Sigma_{p}$
\end_inset

).
 Ademas notese que usamos la variable 
\begin_inset Formula $\mathcal{P}$
\end_inset

 en la notacion lambda por un tema de comodidad psicologica dado que 
\begin_inset Formula $i^{n,m}$
\end_inset

 esta definida solo cuando la ultima coordenada es un programa pero podriamos haber escrito 
\begin_inset Formula $\lambda t\vec{x}\vec{\alpha}\alpha\left[i^{n,m}(t,\vec{x},\vec{\alpha},\alpha)=n(\alpha)+1\right]$
\end_inset

 y sigue siendo la misma funcion.
\end_layout

\begin_layout Standard
Cabe destacar que 
\begin_inset Formula $Halt^{n,m}$
\end_inset

 tiene una descripcion muy intuitiva,
 ya que dado 
\begin_inset Formula $(t,\vec{x},\vec{\alpha},\mathcal{P})\in\omega\times\omega^{n}\times\Sigma^{\ast m}\times\mathrm{Pro}^{\Sigma}$
\end_inset

,
 tenemos que 
\begin_inset Formula $Halt^{n,m}(t,\vec{x},\vec{\alpha},\mathcal{P})=1$
\end_inset

 si y solo si el programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detiene luego de 
\begin_inset Formula $t$
\end_inset

 pasos partiendo desde el estado 
\begin_inset Formula $\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert $
\end_inset

.
\end_layout

\begin_layout Standard
Aceptaremos sin demostracion el siguiente lema (ver el apunte por una prueba).
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "Pro-es-pr"

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(a)
\end_layout

\end_inset


\begin_inset Formula $\mathrm{Pro}^{\Sigma}$
\end_inset

 es un conjunto 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(b)
\end_layout

\end_inset


\begin_inset Formula $\lambda\mathcal{P}\left[n(\mathcal{P})\right]$
\end_inset

 y 
\begin_inset Formula $\lambda i\mathcal{P}\left[I_{i}^{\mathcal{P}}\right]$
\end_inset

 son funciones 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r..
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 5,5:
\end_layout

\end_inset

De una funcion 
\begin_inset Formula $f:\omega\times\mathrm{Pro}^{\Sigma}\rightarrow\mathrm{Pro}^{\Sigma}$
\end_inset

 la cual sea 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 y cumpla que
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $D_{\Psi_{f(x,\mathcal{P})}^{0,1,\#}}=D_{\Psi_{\mathcal{P}}^{0,1,\#}}$
\end_inset

,
 para cada 
\begin_inset Formula $x\in\omega$
\end_inset

 y 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\Psi_{f(x,\mathcal{P})}^{0,1,\#}(\alpha)=\Psi_{\mathcal{P}}^{0,1,\#}(\alpha)+x$
\end_inset

,
 para cada 
\begin_inset Formula $x\in\omega$
\end_inset

,
 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 y 
\begin_inset Formula $\alpha\in D_{\Psi_{\mathcal{P}}^{0,1,\#}}$
\end_inset

 
\end_layout

\begin_layout Standard
Pruebe que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Ahora podemos probar el siguiente importante resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset Formula $Halt^{n,m}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Notar que 
\begin_inset Formula $Halt^{n,m}=\lambda xy[x=y]\circ\left[i^{n,m},\lambda\mathcal{P}[n(\mathcal{P})+1]\circ p_{1+n+m+1}^{1+n,m+1}\right]$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Ahora definamos 
\begin_inset Formula $T^{n,m}=M(Halt^{n,m})$
\end_inset

.
 Notese que
\begin_inset Formula 
\[
D_{T^{n,m}}=\{(\vec{x},\vec{\alpha},\mathcal{P}):\mathcal{P}\text{ se detiene partiendo de }\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert \}
\]

\end_inset

y para 
\begin_inset Formula $(\vec{x},\vec{\alpha},\mathcal{P})\in D_{T^{n,m}}$
\end_inset

 tenemos que 
\begin_inset Formula $T^{n,m}(\vec{x},\vec{\alpha},\mathcal{P})=$
\end_inset

 cantidad de pasos necesarios para que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detenga partiendo de 
\begin_inset Formula $\left\Vert x_{1},...,x_{n},\alpha_{1},...,\alpha_{m}\right\Vert $
\end_inset

.
 En algun sentido,
 la funcion 
\begin_inset Formula $T^{n,m}$
\end_inset

 mide el 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

tiempo
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 que tarda en detenerse 
\begin_inset Formula $\mathcal{P}$
\end_inset

 y de ahi su nombre
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 
\begin_inset Formula $T^{n,m}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-recursiva 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Es directo del lema de minimizacion ya que 
\begin_inset Formula $Halt^{n,m}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Ahora nos sera facil probar que el paradigma de Godel es por lo menos tan abarcativo como el imperativo de Von Neumann.
 Mas concretamente:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Si 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Haremos el caso 
\begin_inset Formula $O=\Sigma^{\ast}$
\end_inset

.
 Sea 
\begin_inset Formula $\mathcal{P}_{0}$
\end_inset

 un programa que compute a 
\begin_inset Formula $f$
\end_inset

.
 Primero veremos que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-recursiva.
 Note que
\begin_inset Formula 
\[
f=E_{\ast1}^{n,m}\circ\left[T^{n,m}\circ\left[p_{1}^{n,m},...,p_{n+m}^{n,m},C_{\mathcal{P}_{0}}^{n,m}\right],p_{1}^{n,m},...,p_{n+m}^{n,m},C_{\mathcal{P}_{0}}^{n,m}\right]
\]

\end_inset

donde cabe destacar que 
\begin_inset Formula $p_{1}^{n,m},...,p_{n+m}^{n,m}$
\end_inset

 son las proyecciones respecto del alfabeto 
\begin_inset Formula $\Sigma\cup\Sigma_{p}$
\end_inset

,
 es decir que tienen dominio 
\begin_inset Formula $\omega^{n}\times(\Sigma\cup\Sigma_{p})^{\ast m}$
\end_inset

.
 Esto nos dice que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-recursiva.
 O sea que el Teorema de Independencia del Alfabeto nos dice que 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Aceptaremos sin prueba la siguiente proposicion.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 La funcion 
\begin_inset Formula $T^{n,m}$
\end_inset

 no es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{corollary}
\end_layout

\end_inset

 La minimizacion de un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 no necesariamente es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{corollary}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Por definicion 
\begin_inset Formula $T^{n,m}=M(Halt^{n,m})$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsubsection*
Uso de macros asociados a las funciones 
\begin_inset Formula $Halt^{n,m}$
\end_inset

,
 
\begin_inset Formula $E_{\#}^{n,m}$
\end_inset

 y 
\begin_inset Formula $E_{\ast}^{n,m}$
\end_inset


\end_layout

\begin_layout Standard
Aqui veremos,
 con ejemplos,
 como ciertos macros nos permitiran dentro de un programa hablar acerca del funcionamiento de otro programa.
 Esto junto con el hecho que cada funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva y cada predicado 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo tienen su macro asociado (Corolario 
\begin_inset CommandInset ref
LatexCommand ref
reference "recursivo implica macro"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

),
 sera muy util a la hora del diseño de programas y nos permitira simular dentro del paradigma imperativo muchas ideas usadas para el diseño de procedimientos efectivos.
 En este sentido la convinacion de los dos paradigmas (recursivo e imperativo) nos permite fortalecer notablemente al paradigma imperativo en su roll modelizador (o simulador) de los procedimientos efectivos.
 Esto es importante ya que el paradigma mas comodo,
 amplio e intuitivo,
 a la hora de decidir si algo es o no computable,
 es sin duda el filosofico o efectivo.
\end_layout

\begin_layout Standard
Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

 y sea 
\begin_inset Formula $\mathcal{P}_{0}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que 
\begin_inset Formula $0\in\mathrm{Dom}\Psi_{\mathcal{P}_{0}}^{1,0,\#}$
\end_inset

 y 
\begin_inset Formula $\Psi_{\mathcal{P}_{0}}^{1,0,\#}(0)=2$
\end_inset

.
 Probaremos que
\begin_inset Formula 
\[
S=\{x\in\mathrm{Dom}\Psi_{\mathcal{P}_{0}}^{1,0,\#}:\Psi_{\mathcal{P}_{0}}^{1,0,\#}(x)\neq0\}
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable.
 Notese que 
\begin_inset Formula $0\in S$
\end_inset

.
 Por definicion de conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable,
 deberemos encontrar un programa 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que 
\begin_inset Formula $\mathrm{Dom}\Psi_{\mathcal{P}}^{1,0,\#}=\omega$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}\Psi_{\mathcal{P}}^{1,0,\#}=S$
\end_inset

.
 Dicho en palabras,
 el programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 debera cumplir:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

siempre que lo corramos desde un estado de la forma 
\begin_inset Formula $\left\Vert x\right\Vert $
\end_inset

,
 con 
\begin_inset Formula $x\in\omega$
\end_inset

,
 debe detenerse y el contenido de la variable 
\begin_inset Formula $\mathrm{N}1$
\end_inset

 bajo detencion debera ser un elemento de 
\begin_inset Formula $S$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

para cada 
\begin_inset Formula $s\in S$
\end_inset

 debera haber un 
\begin_inset Formula $x\in\omega$
\end_inset

 tal que 
\begin_inset Formula $s$
\end_inset

 es el valor de la variable 
\begin_inset Formula $\mathrm{N}1$
\end_inset

 bajo detencion cuando corremos 
\begin_inset Formula $\mathcal{P}$
\end_inset

 desde 
\begin_inset Formula $\left\Vert x\right\Vert $
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
A continuacion daremos una descripcion intuitiva del funcionamiento de 
\begin_inset Formula $\mathcal{P}$
\end_inset

 (pseudocodigo) para luego escribirlo correctamente usando macros.
 El programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 comenzara del estado 
\begin_inset Formula $\left\Vert x\right\Vert $
\end_inset

 y hara las siguientes tareas
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 1:
 si 
\begin_inset Formula $x=0$
\end_inset

 ir a Etapa 6,
 en caso contrario ir a Etapa 2.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 2:
 calcular 
\begin_inset Formula $(x)_{1}$
\end_inset

 y 
\begin_inset Formula $(x)_{2}$
\end_inset

 e ir a Etapa 3.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 3:
 si 
\begin_inset Formula $\mathcal{P}_{0}$
\end_inset

 termina desde 
\begin_inset Formula $\left\Vert (x)_{1}\right\Vert $
\end_inset

 en 
\begin_inset Formula $(x)_{2}$
\end_inset

 pasos ir a Etapa 4,
 en caso contrario ir a Etapa 6
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 4:
 si el valor que queda en 
\begin_inset Formula $\mathrm{N}1$
\end_inset

 luego de correr 
\begin_inset Formula $\mathcal{P}_{0}$
\end_inset

 una cantidad 
\begin_inset Formula $(x)_{2}$
\end_inset

 de pasos,
 partiendo de 
\begin_inset Formula $\left\Vert (x)_{1}\right\Vert $
\end_inset

,
 es distinto de 0,
 entonces ir a Etapa 5.
 En caso contrario ir a Etapa 6.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 5:
 asignar a 
\begin_inset Formula $\mathrm{N}1$
\end_inset

 el valor 
\begin_inset Formula $(x)_{1}$
\end_inset

 y terminar
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 6:
 asignar a 
\begin_inset Formula $\mathrm{N}1$
\end_inset

 el valor 
\begin_inset Formula $0$
\end_inset

 y terminar 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notese que la descripcion anterior no es ni mas ni menos que un procedimiento efectivo que enumera a 
\begin_inset Formula $S$
\end_inset

,
 y nuestra mision es simularlo dentro del lenguaje 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

.
 Para esto usaremos varios macros.
 Ya que la funcion 
\begin_inset Formula $f=\lambda x[(x)_{1}]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 el Corolario 
\begin_inset CommandInset ref
LatexCommand ref
reference "recursivo implica macro"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que hay un macro:
\begin_inset Formula 
\[
\lbrack\mathrm{V}2\leftarrow f(\mathrm{V}1)]
\]

\end_inset

el cual escribiremos de la siguiente manera mas intuitiva:
\begin_inset Formula 
\[
\lbrack\mathrm{V}2\leftarrow(\mathrm{V}1)_{1}]
\]

\end_inset

Similarmente hay un macro:
\begin_inset Formula 
\[
\lbrack\mathrm{V}2\leftarrow(\mathrm{V}1)_{2}]
\]

\end_inset

Tambien,
 ya que el predicado 
\begin_inset Formula $P=\lambda x[x=0]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo,
 hay un macro:
\begin_inset Formula 
\[
\left[\mathrm{IF}\;P(\mathrm{V}1)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

el cual escribiremos de la siguiente manera:
\begin_inset Formula 
\[
\left[\mathrm{IF}\;\mathrm{V}1=0\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Definamos
\begin_inset Formula 
\[
H=\lambda tx\left[Halt^{1,0}(t,x,\mathcal{P}_{0})\right]
\]

\end_inset

Notar que 
\begin_inset Formula $D_{H}=\omega^{2}$
\end_inset

 y que 
\begin_inset Formula $H$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta.
 Ademas sabemos que la funcion 
\begin_inset Formula $Halt^{1,0}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 por lo cual resulta facilmente que 
\begin_inset Formula $H$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r..
 Por la Proposicion de Independencia del Alfabeto tenemos que 
\begin_inset Formula $H$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 O sea que el Corolario 
\begin_inset CommandInset ref
LatexCommand ref
reference "recursivo implica macro"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que hay un macro:
\begin_inset Formula 
\[
\left[\mathrm{IF}\;H(\mathrm{V}1,\mathrm{V}2)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Para hacer mas intuitivo el uso de este macro lo escribiremos de la siguiente manera
\begin_inset Formula 
\[
\left[\mathrm{IF}\;Halt^{1,0}(\mathrm{V}1,\mathrm{V}2,\mathcal{P}_{0})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Sea
\begin_inset Formula 
\[
g=\lambda tx\left[E_{\#1}^{1,0}(t,x,\mathcal{P}_{0})\right]
\]

\end_inset

Ya que 
\begin_inset Formula $g$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva (por que?),
 hay un macro:
\begin_inset Formula 
\[
\left[\mathrm{V}3\leftarrow g(\mathrm{V}1,\mathrm{V}2)\right]
\]

\end_inset

Para hacer mas intuitivo el uso de este macro lo escribiremos de la siguiente manera
\begin_inset Formula 
\[
\left[\mathrm{V}3\leftarrow E_{\#1}^{1,0}(\mathrm{V}1,\mathrm{V}2,\mathcal{P}_{0})\right]
\]

\end_inset

Ahora si podemos dar nuestro progama 
\begin_inset Formula $\mathcal{P}$
\end_inset

 que enumera a 
\begin_inset Formula $S$
\end_inset

:
\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{IF}\;\mathrm{N}1\neq0\;\mathrm{GOTO}\;\mathrm{L}1\\
 & \mathrm{GOTO}\;\mathrm{L}2\\
\mathrm{L}1 & [\mathrm{N}3\leftarrow(\mathrm{N}1)_{1}]\\
 & [\mathrm{N}4\leftarrow(\mathrm{N}1)_{2}]\\
 & \left[\mathrm{IF}\;Halt^{1,0}(\mathrm{N}4,\mathrm{N}3,\mathcal{P}_{0})\;\mathrm{GOTO}\;\mathrm{L}3\right]\\
 & \mathrm{GOTO}\;\mathrm{L}2\\
\mathrm{L}3 & \left[\mathrm{N}5\leftarrow E_{\#1}^{1,0}(\mathrm{N}4,\mathrm{N}3,\mathcal{P}_{0})\right]\\
 & [\mathrm{IF}\;\mathrm{N}5=0\;\mathrm{GOTO}\;\mathrm{L}2]\\
 & \mathrm{N}1\leftarrow\mathrm{N}3\\
 & \mathrm{GOTO}\;\mathrm{L}4\\
\mathrm{L}2 & \mathrm{N}1\leftarrow0\\
\mathrm{L}4 & \mathrm{SKIP}
\end{array}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 6:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\#,\$\}$
\end_inset

 y sea 
\begin_inset Formula $f:D_{f}\subseteq\Sigma^{\ast}\rightarrow\omega$
\end_inset

 una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-computable tal que 
\begin_inset Formula $f(\varepsilon)=1$
\end_inset

.
 Sea 
\begin_inset Formula $L=\{\alpha\in D_{f}:f(\alpha)=1\}$
\end_inset

.
 De un programa 
\begin_inset Formula $\mathcal{Q}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{Q}}^{1,0,\ast})=\omega$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}(\Psi_{\mathcal{Q}}^{1,0,\ast})=L$
\end_inset

 (explicado en video en granlogico.com).
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\#,\$\}$
\end_inset

 y sea 
\begin_inset Formula $\mathcal{P}_{0}\in\mathrm{Pro}^{\Sigma}$
\end_inset

.
 Pruebe que
\begin_inset Formula 
\[
S=\{(x,\alpha):\Psi_{\mathcal{P}_{0}}^{1,0,\#}(x)=\Psi_{\mathcal{P}_{0}}^{0,1,\#}(\alpha)\}
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 8:
\end_layout

\end_inset

Si 
\begin_inset Formula $S\subseteq\omega$
\end_inset

 y 
\begin_inset Formula $f:S\rightarrow\omega$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 entonces el conjunto
\begin_inset Formula 
\[
\{x\in S:x\text{ es par }x/2\in S\text{ y }f(x)=f(x/2)\}
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 9:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{\#,\$\}$
\end_inset

 y sea 
\begin_inset Formula $\mathcal{P}_{0}\in\mathrm{Pro}^{\Sigma}$
\end_inset

.
 Pruebe que 
\begin_inset Formula $\{(x,\alpha,\beta)\in\omega\times\Sigma^{\ast}\times\Sigma^{\ast}:\mathcal{P}_{0}$
\end_inset

 termina partiendo de 
\begin_inset Formula $\left\Vert x,\alpha,\beta\right\Vert \}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 10:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

 y sea 
\begin_inset Formula $\mathcal{P}_{0}\in\mathrm{Pro}^{\Sigma}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
L=\{\alpha\in\Sigma^{\ast}:(\exists x\in\mathbf{N})\ \Psi_{\mathcal{P}_{0}}^{1,1,\#}(x^{2},\alpha)=\Psi_{\mathcal{P}_{0}}^{0,2,\#}(\alpha,\alpha)\}
\]

\end_inset

De un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{P}}^{1,0,\ast})=\omega$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}(\Psi_{\mathcal{P}}^{1,0,\ast})=L$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Paragraph*
Enumeracion de conjuntos de programas
\end_layout

\begin_layout Standard
Ya que los programas de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 son palabras del alfabeto 
\begin_inset Formula $\Sigma\cup\Sigma_{p}$
\end_inset

,
 nos podemos preguntar cuando un conjunto 
\begin_inset Formula $L$
\end_inset

 de programas es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-enumerable.
 Daremos un ejemplo.
 Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

 y sea
\begin_inset Formula 
\[
L=\{\mathcal{P}\in\mathrm{Pro}^{\Sigma}:\Psi_{\mathcal{P}}^{1,0,\#}(10)=10\}
\]

\end_inset

Veremos que 
\begin_inset Formula $L$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-enumerable,
 dando un programa 
\begin_inset Formula $\mathcal{Q}\in\mathrm{Pro}^{\Sigma\cup\Sigma_{p}}$
\end_inset

 que enumere a 
\begin_inset Formula $L$
\end_inset

,
 es decir tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{Q}}^{1,0,\ast})=\omega$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}(\Psi_{\mathcal{Q}}^{1,0,\ast})=L$
\end_inset

.
 Cabe destacar que aqui hay en juego dos versiones de nuestro lenguaje imperativo,
 es decir enumeraremos un conjunto de programas de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 usando un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma\cup\Sigma_{p}}$
\end_inset

.
 Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre el conjunto 
\begin_inset Formula $\Sigma\cup\Sigma_{p}$
\end_inset

.
\end_layout

\begin_layout Standard
A continuacion daremos una descripcion intuitiva del funcionamiento de 
\begin_inset Formula $\mathcal{Q}$
\end_inset

 (pseudocodigo) para luego escribirlo correctamente usando macros.
 Notese que 
\begin_inset Formula $\mathrm{SKIP}\in L$
\end_inset

.
 El programa 
\begin_inset Formula $\mathcal{Q}$
\end_inset

 comenzara del estado 
\begin_inset Formula $\left\Vert x\right\Vert $
\end_inset

 y hara las siguientes tareas
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 1:
 si 
\begin_inset Formula $x=0$
\end_inset

 ir a Etapa 6,
 en caso contrario ir a Etapa 2.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 2:
 calcular 
\begin_inset Formula $(x)_{1}$
\end_inset

,
 
\begin_inset Formula $(x)_{2}$
\end_inset

 y 
\begin_inset Formula $\ast^{\leq}((x)_{1})$
\end_inset

 e ir a Etapa 3.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 3:
 si 
\begin_inset Formula $\ast^{\leq}((x)_{1})\in\mathrm{Pro}^{\Sigma}$
\end_inset

 y termina partiendo desde 
\begin_inset Formula $\left\Vert 10\right\Vert $
\end_inset

 en 
\begin_inset Formula $(x)_{2}$
\end_inset

 pasos ir a Etapa 4,
 en caso contrario ir a Etapa 6
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 4:
 si el valor que queda en 
\begin_inset Formula $\mathrm{N}1$
\end_inset

 luego de correr 
\begin_inset Formula $\ast^{\leq}((x)_{1})$
\end_inset

 una cantidad 
\begin_inset Formula $(x)_{2}$
\end_inset

 de pasos,
 partiendo de 
\begin_inset Formula $\left\Vert 10\right\Vert $
\end_inset

 es igual a 10,
 entonces ir a Etapa 5.
 En caso contrario ir a Etapa 6.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 5:
 asignar a 
\begin_inset Formula $\mathrm{P}1$
\end_inset

 la palabra 
\begin_inset Formula $\ast^{\leq}((x)_{1})$
\end_inset

 y terminar
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
 
\end_layout

\end_inset

Etapa 6:
 asignar a 
\begin_inset Formula $\mathrm{P}1$
\end_inset

 la palabra 
\begin_inset Formula $\mathrm{SKIP}$
\end_inset

 y terminar 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notese que la descripcion anterior no es ni mas ni menos que un procedimiento efectivo que enumera a 
\begin_inset Formula $L$
\end_inset

,
 y nuestra mision es simularlo dentro del lenguaje 
\begin_inset Formula $\mathcal{S}^{\Sigma\cup\Sigma_{p}}$
\end_inset

.
 Para esto usaremos varios macros.
 Es importante notar que los macros que usaremos corresponden al lenguaje 
\begin_inset Formula $\mathcal{S}^{\Sigma\cup\Sigma_{p}}$
\end_inset

 ya que los usaremos en 
\begin_inset Formula $\mathcal{Q}$
\end_inset

 el cual sera un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma\cup\Sigma_{p}}$
\end_inset

.
\end_layout

\begin_layout Standard
Ya que las funciones 
\begin_inset Formula $\lambda x[(x)_{1}]$
\end_inset

 y 
\begin_inset Formula $\lambda x[(x)_{2}]$
\end_inset

 son 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-recursivas el Corolario 
\begin_inset CommandInset ref
LatexCommand ref
reference "recursivo implica macro"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 nos dice que hay macros asociados a estas funciones los cuales escribiremos de la siguiente manera mas intuitiva:
\begin_inset Formula 
\begin{align*}
\lbrack\mathrm{V}2 & \leftarrow(\mathrm{V}1)_{1}]\\
\lbrack\mathrm{V}2 & \leftarrow(\mathrm{V}1)_{2}]
\end{align*}

\end_inset

Ya que el predicado 
\begin_inset Formula $P=\lambda x[x=10]$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-recursivo tenemos su macro asociado el cual escribiremos de la siguiente manera:
\begin_inset Formula 
\[
\left[\mathrm{IF}\;\mathrm{V}1=10\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Por un lema anterior sabemos que 
\begin_inset Formula $\mathrm{Pro}^{\Sigma}$
\end_inset

 es un conjunto 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%TCIMACRO{
\backslash
U{b4}}%
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%BeginExpansion
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

˖́
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%EndExpansion
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

por lo cual 
\begin_inset Formula $\chi_{\mathrm{Pro}^{\Sigma}}^{(\Sigma\cup\Sigma_{p})^{\ast}}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.,
 por lo cual hay un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;\chi_{\mathrm{Pro}^{\Sigma}}^{(\Sigma\cup\Sigma_{p})^{\ast}}(\mathrm{W}1)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

el cual escribiremos de la siguiente manera
\begin_inset Formula 
\[
\left[\mathrm{IF}\;\mathrm{W}1\in\mathrm{Pro}^{\Sigma}\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Ya que el predicado 
\begin_inset Formula $Halt^{1,0}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-recursivo tenemos un macro asociado a el,
 el cual escribiremos de la siguiente forma
\begin_inset Formula 
\[
\left[\mathrm{IF}\;Halt^{1,0}(\mathrm{V}1,\mathrm{V}2,\mathrm{W}1)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Ya que 
\begin_inset Formula $E_{\#1}^{1,0}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-recursivo tenemos un macro asociado a ella,
 el cual escribiremos de la siguiente forma
\begin_inset Formula 
\[
\left[\mathrm{V}3\leftarrow E_{\#1}^{1,0}(\mathrm{V}1,\mathrm{V}2,\mathrm{W}1)\right]
\]

\end_inset

Tambien usaremos macros
\begin_inset Formula 
\begin{gather*}
\lbrack\mathrm{V}1\leftarrow10]\\
\left[\mathrm{W}1\leftarrow\mathrm{SKIP}\right]
\end{gather*}

\end_inset

(dejamos al lector hacerlos a mano o tambien se puede justificar su existencia via la proposicion de existencia de macros aplicada a las funciones 
\begin_inset Formula $C_{10}^{0,0}$
\end_inset

 y 
\begin_inset Formula $C_{\mathrm{SKIP}}^{0,0}$
\end_inset

).
\end_layout

\begin_layout Standard
Ahora si podemos hacer el programa 
\begin_inset Formula $\mathcal{Q}$
\end_inset

 que enumera a 
\begin_inset Formula $L$
\end_inset

:
\begin_inset Formula 
\[
\begin{array}{ll}
 & \mathrm{IF}\;\mathrm{N}1\neq0\;\mathrm{GOTO}\;\mathrm{L}1\\
 & \mathrm{GOTO}\;\mathrm{L}2\\
\mathrm{L}1 & [\mathrm{N}2\leftarrow(\mathrm{N}1)_{1}]\\
 & [\mathrm{N}3\leftarrow(\mathrm{N}1)_{2}]\\
 & [\mathrm{P}1\leftarrow\ast^{\leq}(\mathrm{N}2)]\\
 & \left[\mathrm{IF}\;\mathrm{P}1\in\mathrm{Pro}^{\Sigma}\;\mathrm{GOTO}\;\mathrm{L}3\right]\\
 & \mathrm{GOTO}\;\mathrm{L}2\\
\mathrm{L}3 & [\mathrm{N}4\leftarrow10]\\
 & \left[\mathrm{IF}\;Halt^{1,0}(\mathrm{N}3,\mathrm{N}4,\mathrm{P}1)\;\mathrm{GOTO}\;\mathrm{L}4\right]\\
 & \mathrm{GOTO}\;\mathrm{L}2\\
\mathrm{L}4 & \left[\mathrm{N}5\leftarrow E_{\#1}^{1,0}(\mathrm{N}3,\mathrm{N}4,\mathrm{P}1)\right]\\
 & [\mathrm{IF}\;\mathrm{N}5=10\;\mathrm{GOTO}\;\mathrm{L}4]\\
\mathrm{L}2 & \left[\mathrm{P}1\leftarrow\mathrm{SKIP}\right]\\
\mathrm{L}4 & \mathrm{SKIP}
\end{array}
\]

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 11:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma=\{@,!\}$
\end_inset

 y sea
\begin_inset Formula 
\[
L=\{\mathcal{P}\in\mathrm{Pro}^{\Sigma}:\exists\alpha\text{ tal que }\Psi_{\mathcal{P}}^{1,1,\ast}(11,\alpha)=\alpha!@\}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Dar un programa 
\begin_inset Formula $\mathcal{Q}\in\mathrm{Pro}^{\Sigma\cup\Sigma_{p}}$
\end_inset

 tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{Q}}^{0,1,\#})=L$
\end_inset


\end_layout

\begin_layout Enumerate
Dar un programa 
\begin_inset Formula $\mathcal{Q}^{\prime}\in\mathrm{Pro}^{\Sigma\cup\Sigma_{p}}$
\end_inset

 tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{Q}^{\prime}}^{1,0,\ast})=\omega$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}(\Psi_{\mathcal{Q}^{\prime}}^{1,0,\ast})=L$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 12:
\end_layout

\end_inset

(Explicado en video en granlogico.com.) Sea 
\begin_inset Formula $\Sigma=\{\#,\$\}$
\end_inset

 y sea
\begin_inset Formula 
\[
L=\{\mathcal{P}\in\mathrm{Pro}^{\Sigma}:\exists n,\alpha\text{ tales que }\Psi_{\mathcal{P}}^{2,1,\ast}(\left\vert \mathcal{P}\right\vert ,n,\alpha)=\$\}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Dar un programa 
\begin_inset Formula $\mathcal{Q}\in\mathrm{Pro}^{\Sigma\cup\Sigma_{p}}$
\end_inset

 tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{Q}}^{0,1,\#})=L$
\end_inset


\end_layout

\begin_layout Enumerate
Dar un programa 
\begin_inset Formula $\mathcal{Q}^{\prime}\in\mathrm{Pro}^{\Sigma\cup\Sigma_{p}}$
\end_inset

 tal que 
\family roman
Dom
\family default

\begin_inset Formula $(\Psi_{\mathcal{Q}^{\prime}}^{1,0,\ast})=\omega$
\end_inset

 y 
\begin_inset Formula $\operatorname{Im}(\Psi_{\mathcal{Q}^{\prime}}^{1,0,\ast})=L$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Cuando 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

 podemos correr un programa 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 partiendo de un estado que asigne a sus variables alfabeticas programas (ya que los programas son meras palabras de 
\begin_inset Formula $\Sigma^{\ast}$
\end_inset

).
 En particular podriamos correr un programa 
\begin_inset Formula $\mathcal{P}$
\end_inset

 desde el estado 
\begin_inset Formula $\left\Vert \mathcal{P}\right\Vert $
\end_inset

.
 Llamaremos 
\begin_inset Formula $A$
\end_inset

 al conjunto formado por aquellos programas 
\begin_inset Formula $\mathcal{P}$
\end_inset

 tales que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detiene partiendo del estado 
\begin_inset Formula $\left\Vert \mathcal{P}\right\Vert $
\end_inset

.
 Es decir
\begin_inset Formula 
\[
A=\{\mathcal{P}\in\mathrm{Pro}^{\Sigma}:\exists t\in\omega\text{ tal que }Halt^{0,1}(t,\mathcal{P},\mathcal{P})=1\}
\]

\end_inset

Por ejemplo 
\begin_inset Formula $\mathrm{SKIP}\in A$
\end_inset

.
 Dicho rapida y sugestivamente 
\begin_inset Formula $A$
\end_inset

 es el conjunto formado por aquellos programas que se detienen partiendo de si mismos.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 13:
\end_layout

\end_inset

Supongamos que 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

.
 De un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 que enumere a 
\begin_inset Formula $A$
\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 14:
\end_layout

\end_inset

Supongamos que 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

.
 Sea
\begin_inset Formula 
\[
L=\{\mathcal{P}\in\mathrm{Pro}^{\Sigma}:\Psi_{\mathcal{P}}^{2,1,\ast}(1,1,\mathcal{P})=\mathcal{PP}\}
\]

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Encuentre un elemento concreto de 
\begin_inset Formula $L$
\end_inset


\end_layout

\begin_layout Enumerate
De un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 que enumere a 
\begin_inset Formula $L$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Dos batallas mas
\end_layout

\begin_layout Standard
Aceptaremos sin prueba el siguiente teorema.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}[Godel vence a Turing]
\end_layout

\end_inset

Supongamos 
\begin_inset Formula $f:S\subseteq\omega^{n}\times\Sigma^{\ast}{}^{m}\rightarrow O$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-Turing computable.
 Entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 15:
\end_layout

\end_inset

(S) Haga un esquema a nivel de ideas (sin demostraciones y sin demaciada precision) de la prueba del teorema anterior (la prueba completa esta en el apunte) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Aceptaremos sin prueba el siguiente teorema.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}[Turing vence a Neumann]
\end_layout

\end_inset

Si 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable,
 entonces 
\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-Turing computable
\shape italic
.

\shape default
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 16:
\end_layout

\end_inset

(S) Haga un esquema a nivel de ideas (sin demostraciones y sin demaciada precision) de la prueba del teorema anterior (la prueba completa esta en el apunte y en granlogico.com hay un video con la prueba del teorema) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
La tesis de Church
\end_layout

\begin_layout Standard
En virtud de los teoremas ya probados tenemos el siguiente teorema que asegura que los tres paradigmas son equivalentes.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Dada una funcion 
\begin_inset Formula $f$
\end_inset

,
 las siguientes son equivalentes:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-Turing computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset


\begin_inset Formula $f$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Tambien los tres paradigmas son equivalentes con respecto a los dos tipos de conjuntos estudiados,
 es decir:
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito y sea 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Las siguientes son equivalentes:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-Turing enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito y sea 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Las siguientes son equivalentes:
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-Turing computable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 17:
\end_layout

\end_inset

Pruebe los dos teoremas anteriores 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Otro modelo matematico de computabilidad efectiva es el llamado lambda calculus,
 introducido por Church,
 el cual tambien resulta equivalente a los estudiados por nosotros.
 El hecho de que tan distintos paradigmas computacionales hayan resultado equivalentes hace pensar que en realidad los mismos han tenido exito en capturar la totalidad de las funciones 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computables.
 Esta aceveracion es conocida como la
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard

\size larger
Tesis de Church:

\size default
 
\shape italic
Toda funcion 
\shape default

\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-efectivamente computable es 
\shape default

\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-recursiva.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
Si bien no se ha podido dar una prueba estrictamente matematica de la Tesis de Church,
 es un sentimiento comun de los investigadores del area que la misma es verdadera.
 
\end_layout

\begin_layout Section
Guia 9
\end_layout

\begin_layout Standard
Nota:
 Los ejercicios que tienen (S) son para una 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

Segunda vuelta
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

"
\end_layout

\end_inset

 es decir conviene hacerlos una vez que ya se completó la guía haciendo los otros y ya se tiene mas madurez e intuición basica sobre los conceptos.
 Los que tienen (O) son opcionales por lo cual no se toman en los examenes.
\end_layout

\begin_layout Section*
Algunos resultados basicos presentados en paradigma recursivo
\end_layout

\begin_layout Standard
En esta guia presentaremos varios resultados basicos de computabilidad,
 expresados en el paradigma recursivo,
 ya que es el mas habitual y comodo.
 Varios de estos resultados pueden ser establecidos y probados en forma natural dentro del paradigma de la computabilidad efectiva (ver apunte).
 A ellos los enunciaremos dentro del paradigma de Godel y los probaremos rigurosamente usando la teoria desarrollada hasta ahora.
 Sin envargo,
 veremos que hay otros resultados que son dependientes del desarrollo matematico hecho y aportan nueva informacion al paradigma filosofico (la indecidibilidad del halting problem,
 por ejemplo).
\end_layout

\begin_layout Standard
Como veremos muchas de las pruebas seran de naturaleza imperativa basadas en la equivalencia del paradigma de Godel con el imperativo de Neumann.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Lema de division por casos para funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas
\end_layout

\begin_layout Standard
Usando los resultados probados en las dos anteriores batallas entre los paradigmas de Godel y Neumann podemos probar el siguiente resultado el cual a priori no parese facil de probar si nos quedamos solo en el contexto del paradigma Godeliano.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "dpc1"

\end_inset

Supongamos 
\begin_inset Formula $f_{i}:D_{f_{i}}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

,
 
\begin_inset Formula $i=1,...,k$
\end_inset

,
 son funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas tales que 
\begin_inset Formula $D_{f_{i}}\cap D_{f_{j}}=\emptyset$
\end_inset

 para 
\begin_inset Formula $i\neq j$
\end_inset

.
 Entonces la funcion 
\begin_inset Formula $f_{1}\cup...\cup f_{k}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Probaremos el caso 
\begin_inset Formula $k=2$
\end_inset

 y 
\begin_inset Formula $O=\Sigma^{\ast}$
\end_inset

.
 Ademas supondremos que 
\begin_inset Formula $n=m=1$
\end_inset

.
 Sean 
\begin_inset Formula $\mathcal{P}_{1}$
\end_inset

 y 
\begin_inset Formula $\mathcal{P}_{2}$
\end_inset

 programas que computen las funciones 
\begin_inset Formula $f_{1}$
\end_inset

 y 
\begin_inset Formula $f_{2}$
\end_inset

,
 respectivamente.
 Para 
\begin_inset Formula $i=1,2$
\end_inset

,
 definamos
\begin_inset Formula 
\[
H_{i}=\lambda tx_{1}\alpha_{1}\left[Halt^{1,1}(t,x_{1},\alpha_{1},\mathcal{P}_{i})\right]
\]

\end_inset

Notar que 
\begin_inset Formula $D_{H_{i}}=\omega^{2}\times\Sigma^{\ast}$
\end_inset

 y que 
\begin_inset Formula $H_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta.
 Ademas sabemos que la funcion 
\begin_inset Formula $Halt^{1,1}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 por lo cual resulta facilmente que 
\begin_inset Formula $H_{i}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r..
 Por el Teorema de Independencia del Alfabeto tenemos que 
\begin_inset Formula $H_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Entonces 
\begin_inset Formula $H_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable por lo cual tenemos que hay un macro:
\begin_inset Formula 
\[
\left[\mathrm{IF}\;H_{i}(\mathrm{V}1,\mathrm{V}2,\mathrm{W}1)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Para hacer mas intuitivo el uso de este macro lo escribiremos de la siguiente manera
\begin_inset Formula 
\[
\left[\mathrm{IF}\;Halt^{1,1}(\mathrm{V}1,\mathrm{V}2,\mathrm{W}1,\mathcal{P}_{i})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Ya que cada 
\begin_inset Formula $f_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva,
 hay macros
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{W}2\leftarrow f_{1}(\mathrm{V}1,\mathrm{W}1)\right]\\
 & \left[\mathrm{W}2\leftarrow f_{2}(\mathrm{V}1,\mathrm{W}1)\right]
\end{align*}

\end_inset

Sea 
\begin_inset Formula $\mathcal{P}$
\end_inset

 el siguiente programa:
\begin_inset Formula 
\[
\begin{array}{l}
\mathrm{L}1\ \mathrm{N}20\leftarrow\mathrm{N}20+1\\
\ \ \ \ \ \ \left[\mathrm{IF}\;Halt^{1,1}(\mathrm{N}20,\mathrm{N}1,\mathrm{P}1,\mathcal{P}_{1})\;\mathrm{GOTO}\;\mathrm{L}2\right]\\
\ \ \ \ \ \ \left[\mathrm{IF}\;Halt^{1,1}(\mathrm{N}20,\mathrm{N}1,\mathrm{P}1,\mathcal{P}_{2})\;\mathrm{GOTO}\;\mathrm{L}3\right]\\
\ \ \ \ \ \ \mathrm{GOTO}\;\mathrm{L}1\\
\mathrm{L}2\ \left[\mathrm{P}1\leftarrow f_{1}(\mathrm{N}1,\mathrm{P}1)\right]\\
\ \ \ \ \ \ \mathrm{GOTO}\;\mathrm{L}4\\
\mathrm{L}3\ \left[\mathrm{P}1\leftarrow f_{2}(\mathrm{N}1,\mathrm{P}1)\right]\\
\mathrm{L}4\ \mathrm{SKIP}
\end{array}
\]

\end_inset

Notese que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 computa la funcion 
\begin_inset Formula $f_{1}\cup f_{2}$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 1:
\end_layout

\end_inset

Si 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 es un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo y 
\begin_inset Formula $D_{P}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo,
 entonces la funcion 
\begin_inset Formula $M(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Lema de restriccion de funciones 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas
\end_layout

\begin_layout Standard
Nos sera util tambien el siguiente resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "restriccion-1"

\end_inset

Supongamos 
\begin_inset Formula $f:D_{f}\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow O$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva y 
\begin_inset Formula $S\subseteq D_{f}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.,
 entonces 
\begin_inset Formula $f|_{S}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Si 
\begin_inset Formula $S=\emptyset$
\end_inset

,
 entonces 
\begin_inset Formula $f|_{S}=\emptyset$
\end_inset

 y por lo tanto 
\begin_inset Formula $f|_{S}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 Supongamos 
\begin_inset Formula $S\neq\emptyset$
\end_inset

.
 Haremos el caso 
\begin_inset Formula $n=m=1$
\end_inset

 y 
\begin_inset Formula $O=\Sigma^{\ast}$
\end_inset

.
 Tenemos que hay una 
\begin_inset Formula $F:\omega\rightarrow\omega\times\Sigma^{\ast}$
\end_inset

 tal que 
\begin_inset Formula $\operatorname{Im}F=S$
\end_inset

 y 
\begin_inset Formula $F_{(1)}$
\end_inset

,
 
\begin_inset Formula $F_{(2)}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas.
 Ya que 
\begin_inset Formula $f$
\end_inset

,
 
\begin_inset Formula $F_{(1)}$
\end_inset

 y 
\begin_inset Formula $F_{(2)}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-computables,
 hay macros
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{W}2\leftarrow f(\mathrm{V}1,\mathrm{W}1)\right]\\
 & \left[\mathrm{V}2\leftarrow F_{(1)}(\mathrm{V}1)\right]\\
 & \left[\mathrm{W}1\leftarrow F_{(2)}(\mathrm{V}1)\right]
\end{align*}

\end_inset

Ya que los predicados 
\begin_inset Formula $D=\lambda xy[x\neq y]$
\end_inset

 y 
\begin_inset Formula $D^{\prime}=\lambda\alpha\beta\lbrack\alpha\neq\beta]$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 tenemos que son 
\begin_inset Formula $\Sigma$
\end_inset

-computables,
 por lo cual hay macros
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{IF}\;D(\mathrm{V}1,\mathrm{V}2)\;\mathrm{GOTO}\;\mathrm{A}1\right]\\
 & \left[\mathrm{IF}\;D^{\prime}(\mathrm{W}1,\mathrm{W}2)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\end{align*}

\end_inset

Para para hacer mas amigable la lectura los escribieremos de la siguiente manera
\begin_inset Formula 
\begin{align*}
 & \left[\mathrm{IF}\;\mathrm{V}1\neq\mathrm{V}2\;\mathrm{GOTO}\;\mathrm{A}1\right]\\
 & \left[\mathrm{IF}\;\mathrm{W}1\neq\mathrm{W}2\;\mathrm{GOTO}\;\mathrm{A}1\right]
\end{align*}

\end_inset

Sea 
\begin_inset Formula $\mathcal{P}$
\end_inset

 el siguiente programa
\begin_inset Formula 
\[
\begin{array}{ll}
\mathrm{L}2 & [\mathrm{N}2\leftarrow F_{(1)}(\mathrm{N}20)]\\
 & [\mathrm{P}2\leftarrow F_{(2)}(\mathrm{N}20)]\\
 & \left[\mathrm{IF}\;\mathrm{N}1\neq\mathrm{N}2\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
 & \left[\mathrm{IF}\;\mathrm{P}1\neq\mathrm{P}2\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
 & \left[\mathrm{P}1\leftarrow f(\mathrm{N}1,\mathrm{P}1)\right]\\
 & \mathrm{GOTO}\;\mathrm{L}3\\
\mathrm{L}1 & \mathrm{N}20\leftarrow\mathrm{N}20+1\\
 & \mathrm{GOTO}\;\mathrm{L}2\\
\mathrm{L}3 & \mathrm{SKIP}
\end{array}
\]

\end_inset

Es facil ver que 
\begin_inset Formula $\mathcal{P}$
\end_inset

 computa a 
\begin_inset Formula $f|_{S}$
\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
Conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 y 
\begin_inset Formula $\Sigma$
\end_inset

-r.
\end_layout

\begin_layout Standard
Daremos primero algunas propiedades basicas de los conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 y 
\begin_inset Formula $\Sigma$
\end_inset

-r.
 El siguiente resultado puede probarse facilmente dentro del paradigma Godeliano y lo dejamos como ejercicio.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 1,5:
\end_layout

\end_inset

Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Supongamos 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-recursivos.
 Entonces 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

,
 
\begin_inset Formula $S_{1}\cap S_{2}$
\end_inset

 y 
\begin_inset Formula $S_{1}-S_{2}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivos 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto finito.
 Se tiene que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset

Supongamos 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-r.e..
 Entonces 
\begin_inset Formula $S_{1}\cup S_{2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset

Supongamos 
\begin_inset Formula $S_{1},S_{2}\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 son conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-r.e..
 Entonces 
\begin_inset Formula $S_{1}\cap S_{2}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset

Sea 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Si 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo,
 entonces 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerable 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Los tres resultados en su version imperativa fueron probados o dejados como ejercicio en la Guia 8,
 por lo que podemos aplicar los teoremas que nos dicen que los paradigmas recursivo e imperativo son equivalentes.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Tal como veremos mas adelante hay conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerables los cuales no son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivos.
 Sin envargo tenemos el siguiente interesante resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 Sea 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

.
 Si 
\begin_inset Formula $S$
\end_inset

 y 
\begin_inset Formula $(\omega^{n}\times\Sigma^{\ast m})-S$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerables,
 entonces 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 (Prueba cheta) Por definicion,
 para probar que 
\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo deberemos probar que 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 Notese que 
\begin_inset Formula $\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}=C_{1}^{n,m}$
\end_inset


\family roman

\begin_inset Formula $|$
\end_inset


\family default

\begin_inset Formula $_{S}\cup C_{0}^{n,m}$
\end_inset


\family roman

\begin_inset Formula $|$
\end_inset


\family default

\begin_inset Formula $_{(\omega^{n}\times\Sigma^{\ast m})-S}$
\end_inset

.
 O sea que por el lema de division por casos,
 solo nos resta probar que 
\begin_inset Formula $C_{1}^{n,m}$
\end_inset


\family roman

\begin_inset Formula $|$
\end_inset


\family default

\begin_inset Formula $_{S}$
\end_inset

 y 
\begin_inset Formula $C_{0}^{n,m}$
\end_inset


\family roman

\begin_inset Formula $|$
\end_inset


\family default

\begin_inset Formula $_{(\omega^{n}\times\Sigma^{\ast m})-S}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas.
 Pero esto se desprende directamente del Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "restriccion-1"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 ya que 
\begin_inset Formula $C_{1}^{n,m}$
\end_inset

 y 
\begin_inset Formula $C_{0}^{n,m}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas y por hipotesis 
\begin_inset Formula $S$
\end_inset

 y 
\begin_inset Formula $(\omega^{n}\times\Sigma^{\ast m})-S$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerables.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout

\series bold
Ejercicio 2:
\end_layout

\end_inset

(Prueba intuitiva) Dar una prueba imperativa del lema anterior.
 Hint:
 inspirese en su analogo dentro del paradigma de la computabilidad efectiva,
 dado al final de la Guia 3.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
El siguiente teorema es muy importante ya que caracteriza a los conjuntos 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 Solo se tomara la prueba de la implicacion (2)
\begin_inset Formula $\Rightarrow$
\end_inset

(3) aunque dejamos su prueba completa para el lector interesado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "equivalencias-r.e."

\end_inset

Dado 
\begin_inset Formula $S\subseteq\omega^{n}\times\Sigma^{\ast m}$
\end_inset

,
 son equivalentes
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(1)
\end_layout

\end_inset


\begin_inset Formula $S$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerable
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(2)
\end_layout

\end_inset


\begin_inset Formula $S=I_{F}$
\end_inset

,
 para alguna 
\begin_inset Formula $F:D_{F}\subseteq\omega^{k}\times\Sigma^{\ast l}\rightarrow\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 tal que cada 
\begin_inset Formula $F_{(i)}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(3)
\end_layout

\end_inset


\begin_inset Formula $S=D_{f}$
\end_inset

,
 para alguna funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(4)
\end_layout

\end_inset


\begin_inset Formula $S=\emptyset$
\end_inset

 o 
\begin_inset Formula $S=I_{F}$
\end_inset

,
 para alguna 
\begin_inset Formula $F:\omega\rightarrow\omega^{n}\times\Sigma^{\ast m}$
\end_inset

 tal que cada 
\begin_inset Formula $F_{(i)}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 El caso 
\begin_inset Formula $n=m=0$
\end_inset

 es facil y es dejado al lector.
 Supongamos entonces que 
\begin_inset Formula $n+m\geq1$
\end_inset

.
\end_layout

\begin_layout Standard
(2)
\begin_inset Formula $\Rightarrow$
\end_inset

(3).
 Haremos el caso 
\begin_inset Formula $k=l=1$
\end_inset

 y 
\begin_inset Formula $n=m=2$
\end_inset

.
 El caso general es completamente analogo.
 Notese que entonces tenemos que 
\begin_inset Formula $S\subseteq\omega^{2}\times\Sigma^{\ast2}$
\end_inset

 y 
\begin_inset Formula $F:D_{F}\subseteq\omega\times\Sigma^{\ast}\rightarrow\omega^{2}\times\Sigma^{\ast2}$
\end_inset

 es tal que 
\begin_inset Formula $\operatorname{Im}F=S$
\end_inset

 y 
\begin_inset Formula $F_{(1)}$
\end_inset

,
 
\begin_inset Formula $F_{(2)}$
\end_inset

,
 
\begin_inset Formula $F_{(3)}$
\end_inset

,
 
\begin_inset Formula $F_{(4)}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-recursivas.
 Para cada 
\begin_inset Formula $i\in\{1,2,3,4\}$
\end_inset

,
 sea 
\begin_inset Formula $\mathcal{P}_{i}$
\end_inset

 un programa el cual computa a 
\begin_inset Formula $F_{(i)}$
\end_inset

.
 Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Definamos
\begin_inset Formula 
\[
H_{i}=\lambda tx_{1}\alpha_{1}\left[\lnot Halt^{1,1}(t,x_{1},\alpha_{1},\mathcal{P}_{i})\right]
\]

\end_inset

Notar que 
\begin_inset Formula $D_{H_{i}}=\omega^{2}\times\Sigma^{\ast}$
\end_inset

 y que 
\begin_inset Formula $H_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-mixta.
 Ademas sabemos que la funcion 
\begin_inset Formula $Halt^{1,1}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 por lo cual resulta facilmente que 
\begin_inset Formula $H_{i}$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r..
 Por la Proposicion de Independencia del Alfabeto tenemos que 
\begin_inset Formula $H_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Entonces 
\begin_inset Formula $H_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable por lo cual tenemos que hay un macro:
\begin_inset Formula 
\[
\left[\mathrm{IF}\;H_{i}(\mathrm{V}2,\mathrm{V}1,\mathrm{W}1)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Para hacer mas intuitivo el uso de este macro lo escribiremos de la siguiente manera
\begin_inset Formula 
\[
\left[\mathrm{IF}\;\lnot Halt^{1,1}(\mathrm{V}2,\mathrm{V}1,\mathrm{W}1,\mathcal{P}_{i})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Para 
\begin_inset Formula $i=1,2$
\end_inset

,
 definamos
\begin_inset Formula 
\[
E_{i}=\lambda xtx_{1}\alpha_{1}\left[x\neq E_{\#1}^{1,1}(t,x_{1},\alpha_{1},\mathcal{P}_{i})\right]
\]

\end_inset

Para 
\begin_inset Formula $i=3,4$
\end_inset

,
 definamos
\begin_inset Formula 
\[
E_{i}=\lambda tx_{1}\alpha_{1}\alpha\left[\alpha\neq E_{\ast1}^{1,1}(t,x_{1},\alpha_{1},\mathcal{P}_{i})\right]
\]

\end_inset

Dejamos al lector probar que las funciones 
\begin_inset Formula $E_{i}$
\end_inset

 son 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 O sea que son 
\begin_inset Formula $\Sigma$
\end_inset

-computables por lo cual para cada 
\begin_inset Formula $i\in\{1,2\}$
\end_inset

 hay un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;E_{i}(\mathrm{V}2,\mathrm{V}3,\mathrm{V}1,\mathrm{W}1)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

y para cada 
\begin_inset Formula $i\in\{3,4\}$
\end_inset

 hay un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;E_{i}(\mathrm{V}2,\mathrm{V}1,\mathrm{W}1,\mathrm{W}2)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Haremos mas intuitiva la forma de escribir estos macros,
 por ejemplo para 
\begin_inset Formula $i=1$
\end_inset

,
 lo escribiremos de la siguiente manera
\begin_inset Formula 
\[
\left[\mathrm{IF}\;\mathrm{V}2\neq E_{\#1}^{1,1}(\mathrm{V}3,\mathrm{V}1,\mathrm{W}1,\mathcal{P}_{1})\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Ya que la funcion 
\begin_inset Formula $f=\lambda x[(x)_{1}]$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.,
 ella es 
\begin_inset Formula $\Sigma$
\end_inset

-computable por lo cual hay un macro
\begin_inset Formula 
\[
\lbrack\mathrm{V}2\leftarrow f(\mathrm{V}1)]
\]

\end_inset

el cual escribiremos de la siguiente manera:
\begin_inset Formula 
\[
\lbrack\mathrm{V}2\leftarrow(\mathrm{V}1)_{1}]
\]

\end_inset

Similarmente hay macros:
\begin_inset Formula 
\[
\lbrack\mathrm{W}1\leftarrow\ast^{\leq}(\mathrm{V}1)_{3}]
\]

\end_inset


\begin_inset Formula 
\[
\lbrack\mathrm{V}2\leftarrow(\mathrm{V}1)_{2}]
\]

\end_inset

(dejamos al lector entender bien el funcionamiento de estos macros).
 Sea 
\begin_inset Formula $\mathcal{P}$
\end_inset

 el siguiente programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

:
\begin_inset Formula 
\[
\begin{array}{l}
\mathrm{L}1\ \mathrm{N}20\leftarrow\mathrm{N}20+1\\
\lbrack\mathrm{N}10\leftarrow(\mathrm{N}20)_{1}]\\
\lbrack\mathrm{N}3\leftarrow(\mathrm{N}20)_{2}]\\
\lbrack\mathrm{P}3\leftarrow\ast^{\leq}(\mathrm{N}20)_{3}]\\
\left[\mathrm{IF}\;\lnot Halt^{1,1}(\mathrm{N}10,\mathrm{N}3,\mathrm{P}3,\mathcal{P}_{1})\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
\left[\mathrm{IF}\;\lnot Halt^{1,1}(\mathrm{N}10,\mathrm{N}3,\mathrm{P}3,\mathcal{P}_{2})\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
\left[\mathrm{IF}\;\lnot Halt^{1,1}(\mathrm{N}10,\mathrm{N}3,\mathrm{P}3,\mathcal{P}_{3})\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
\left[\mathrm{IF}\;\lnot Halt^{1,1}(\mathrm{N}10,\mathrm{N}3,\mathrm{P}3,\mathcal{P}_{4})\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
\left[\mathrm{IF}\;\mathrm{N}1\neq E_{\#1}^{1,1}(\mathrm{N}10,\mathrm{N}3,\mathrm{P}3,\mathcal{P}_{1})\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
\left[\mathrm{IF}\;\mathrm{N}2\neq E_{\#1}^{1,1}(\mathrm{N}10,\mathrm{N}3,\mathrm{P}3,\mathcal{P}_{2})\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
\left[\mathrm{IF}\;\mathrm{P}1\neq E_{\ast1}^{1,1}(\mathrm{N}10,\mathrm{N}3,\mathrm{P}3,\mathcal{P}_{3})\;\mathrm{GOTO}\;\mathrm{L}1\right]\\
\left[\mathrm{IF}\;\mathrm{P}2\neq E_{\ast1}^{1,1}(\mathrm{N}10,\mathrm{N}3,\mathrm{P}3,\mathcal{P}_{4})\;\mathrm{GOTO}\;\mathrm{L}1\right]
\end{array}
\]

\end_inset

Dejamos al lector la tarea de comprender el funcionamiento de este programa y convenserse de que computa la funcion 
\begin_inset Formula $p_{1}^{2,2}|_{S}$
\end_inset

.
 Pero entonces 
\begin_inset Formula $p_{1}^{2,2}|_{S}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-computable por lo cual es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva,
 lo cual prueba (3) ya que 
\begin_inset Formula $Dom(p_{1}^{2,2}|_{S})=S$
\end_inset

.
\end_layout

\begin_layout Standard
(3)
\begin_inset Formula $\Rightarrow$
\end_inset

(4).
 Supongamos 
\begin_inset Formula $S\neq\emptyset$
\end_inset

.
 Sea 
\begin_inset Formula $(z_{1},...,z_{n},\gamma_{1},...,\gamma_{m})\in S$
\end_inset

 fijo.
 Sea 
\begin_inset Formula $\mathcal{P}$
\end_inset

 un programa el cual compute a 
\begin_inset Formula $f$
\end_inset

 y Sea 
\begin_inset Formula $\leq$
\end_inset

 un orden total sobre 
\begin_inset Formula $\Sigma$
\end_inset

.
 Sea 
\begin_inset Formula $P:\mathbf{N}\rightarrow\omega$
\end_inset

 dado por 
\begin_inset Formula $P(x)=1$
\end_inset

 sii
\begin_inset Formula 
\[
Halt^{n,m}\left((x)_{n+m+1},(x)_{1},...,(x)_{n},\ast^{\leq}((x)_{n+1}),...,\ast^{\leq}((x)_{n+m})),\mathcal{P}\right)=1
\]

\end_inset

Es facil ver que 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $(\Sigma\cup\Sigma_{p})$
\end_inset

-p.r.
 por lo cual es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Sea 
\begin_inset Formula $\bar{P}=P\cup C_{0}^{1,0}|_{\{0\}}$
\end_inset

.
 Para 
\begin_inset Formula $i=1,...,n$
\end_inset

,
 definamos 
\begin_inset Formula $F_{i}:\omega\rightarrow\omega$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\[
F_{i}(x)=\left\{ \begin{array}{ccc}
(x)_{i} & \text{si} & \bar{P}(x)=1\\
z_{i} & \text{si} & \bar{P}(x)\neq1
\end{array}\right.
\]

\end_inset

Para 
\begin_inset Formula $i=n+1,...,n+m$
\end_inset

,
 definamos 
\begin_inset Formula $F_{i}:\omega\rightarrow\Sigma^{\ast}$
\end_inset

 de la siguiente manera
\begin_inset Formula 
\[
F_{i}(x)=\left\{ \begin{array}{lll}
\ast^{\leq}((x)_{i}) & \text{si} & \bar{P}(x)=1\\
\gamma_{i-n} & \text{si} & \bar{P}(x)\neq1
\end{array}\right.
\]

\end_inset

Por el lema de division por casos (para funciones 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.),
 cada 
\begin_inset Formula $F_{i}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r..
 Es facil ver que 
\begin_inset Formula $F=[F_{1},...,F_{n+m}]$
\end_inset

 cumple (4).
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Subsection*
El halting problem y los conjuntos 
\begin_inset Formula $A$
\end_inset

 y 
\begin_inset Formula $N$
\end_inset


\end_layout

\begin_layout Standard
Cuando 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

,
 podemos definir
\begin_inset Formula 
\[
AutoHalt^{\Sigma}=\lambda\mathcal{P}\left[(\exists t\in\omega)\;Halt^{0,1}(t,\mathcal{P},\mathcal{P})\right]\text{.}
\]

\end_inset

Notar que el dominio de 
\begin_inset Formula $AutoHalt^{\Sigma}$
\end_inset

 es 
\begin_inset Formula $\mathrm{Pro}^{\Sigma}$
\end_inset

 y que para cada 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tenemos que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
(*)
\end_layout

\end_inset


\begin_inset Formula $AutoHalt(\mathcal{P})=1$
\end_inset

 sii 
\begin_inset Formula $\mathcal{P}$
\end_inset

 se detiene partiendo del estado 
\begin_inset Formula $\left\Vert \mathcal{P}\right\Vert $
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "autohalt"

\end_inset

Supongamos 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

.
 Entonces 
\begin_inset Formula $AutoHalt^{\Sigma}$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Supongamos 
\begin_inset Formula $AutoHalt^{\Sigma}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo y por lo tanto 
\begin_inset Formula $\Sigma$
\end_inset

-computable.
 Por la proposicion de existencia de macros tenemos que hay un macro
\begin_inset Formula 
\[
\left[\mathrm{IF}\;AutoHalt^{\Sigma}(\mathrm{W}1)\;\mathrm{GOTO}\;\mathrm{A}1\right]
\]

\end_inset

Sea 
\begin_inset Formula $\mathcal{P}_{0}$
\end_inset

 el siguiente programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset


\begin_inset Formula 
\[
\mathrm{L}1\;\left[\mathrm{IF}\;AutoHalt^{\Sigma}(\mathrm{P}1)\;\mathrm{GOTO}\;\mathrm{L}1\right]
\]

\end_inset

Note que
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset


\begin_inset Formula $\mathcal{P}_{0}$
\end_inset

 termina partiendo desde 
\begin_inset Formula $\left\Vert \mathcal{P}_{0}\right\Vert $
\end_inset

 sii 
\begin_inset Formula $AutoHalt^{\Sigma}(\mathcal{P}_{0})=0$
\end_inset

,
 
\end_layout

\begin_layout Standard
\noindent
lo cual produce una contradiccion si tomamos en (*) 
\begin_inset Formula $\mathcal{P}=\mathcal{P}_{0}$
\end_inset

.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Usando el lema anterior y la Tesis de Church podemos probar el siguiente impactante resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{theorem}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "autohalt es no EC"

\end_inset

Supongamos 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

.
 Entonces 
\begin_inset Formula $AutoHalt^{\Sigma}$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 Es decir no hay ningun procedimiento efectivo que decida si un programa de 
\begin_inset Formula $\mathcal{S}^{\Sigma}$
\end_inset

 termina partiendo de si mismo.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{theorem}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Si 
\begin_inset Formula $AutoHalt^{\Sigma}$
\end_inset

 fuera 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable,
 la Tesis de Church nos diria que es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo,
 contradiciendo el lema anterior.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Notese que 
\begin_inset Formula $AutoHalt^{\Sigma}$
\end_inset

 provee de un ejemplo natural en el cual la cuantificacion (no acotada) de un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 con dominio rectangular no es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable
\end_layout

\begin_layout Standard
Ahora estamos en condiciones de dar un ejemplo natural de un conjunto 
\begin_inset Formula $A$
\end_inset

 que es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivamente enumerable pero el cual no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{lemma}
\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "A es RE y no R"

\end_inset

Supongamos que 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

.
 Entonces
\begin_inset Formula 
\[
A=\left\{ \mathcal{P}\in\mathrm{Pro}^{\Sigma}:AutoHalt^{\Sigma}(\mathcal{P})=1\right\} 
\]

\end_inset

es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 y no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo.
 Mas aun el conjunto
\begin_inset Formula 
\[
N=\left\{ \mathcal{P}\in\mathrm{Pro}^{\Sigma}:AutoHalt^{\Sigma}(\mathcal{P})=0\right\} 
\]

\end_inset

no es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{lemma}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proof}
\end_layout

\end_inset

 Para ver que 
\begin_inset Formula $A$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 se lo puede hacer imperativamente dando un programa (usando macros) que enumere a 
\begin_inset Formula $A$
\end_inset

.
 De esta forma probariamos que 
\begin_inset Formula $A$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-enumerable y por lo tanto es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e..
 Daremos ahora una prueba no imperativa de este hecho,
 es decir mas propia del paradigma funcional.
 Sea 
\begin_inset Formula $P=\lambda t\mathcal{P}\left[Halt^{0,1}(t,\mathcal{P},\mathcal{P})\right]$
\end_inset

.
 Note que 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
 por lo que 
\begin_inset Formula $M(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-r..
 Ademas note que 
\begin_inset Formula $D_{M(P)}=A$
\end_inset

,
 lo cual implica que 
\begin_inset Formula $A$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e..
\end_layout

\begin_layout Standard
Supongamos ahora que 
\begin_inset Formula $N$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e..
 Entonces la funcion 
\begin_inset Formula $C_{0}^{0,1}|_{N}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva ya que 
\begin_inset Formula $C_{0}^{0,1}$
\end_inset

 lo es.
 Ademas ya que 
\begin_inset Formula $A$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 tenemos que 
\begin_inset Formula $C_{1}^{0,1}|_{A}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva.
 Ya que
\begin_inset Formula 
\[
AutoHalt^{\Sigma}=C_{1}^{0,1}|_{A}\cup C_{0}^{0,1}|_{N}
\]

\end_inset

el lema de division por casos nos dice que 
\begin_inset Formula $AutoHalt^{\Sigma}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo,
 contradiciendo el Lema 
\begin_inset CommandInset ref
LatexCommand ref
reference "autohalt"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 Esto prueba que 
\begin_inset Formula $N$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-r.e..
\end_layout

\begin_layout Standard
Finalmente supongamos 
\begin_inset Formula $A$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo.
 Entonces el conjunto
\begin_inset Formula 
\[
N=\left(\Sigma^{\ast}-A\right)\cap\mathrm{Pro}^{\Sigma}
\]

\end_inset

deberia serlo,
 lo cual es absurdo.
 Hemos probado entonces que 
\begin_inset Formula $A$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo.
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proof}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Usando la Tesis de Church obtenemos el siguiente resultado.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 Supongamos que 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}.$
\end_inset

 Entonces 
\begin_inset Formula $A$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable y no es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable.
 El conjunto 
\begin_inset Formula $N$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente enumerable.
 Es decir,
 
\begin_inset Formula $A$
\end_inset

 puede ser enumerado por un procedimiento efectivo pero no hay ningun procedimiento efectivo que decida la pertenencia a 
\begin_inset Formula $A$
\end_inset

 y no hay ningun procedimiento efectivo que enumere a 
\begin_inset Formula $N$
\end_inset

.
 Mas aun,
 si un procedimiento efectivo da como salida siempre elementos de 
\begin_inset Formula $N$
\end_inset

,
 entonces hay una cantidad infinita de elementos de 
\begin_inset Formula $N$
\end_inset

 los cuales nunca da como salida 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 3:
\end_layout

\end_inset

(S) Justifique la ultima aseveracion en la proposicion anterior 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Cabe destacar aqui que el dominio de una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva no siempre sera un conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo.
 Por ejemplo si tomamos 
\begin_inset Formula $\Sigma$
\end_inset

 tal que 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

,
 entonces 
\begin_inset Formula $C_{1}^{0,1}|_{A}$
\end_inset

 es una funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva ya que es la restriccion de la funcion 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva 
\begin_inset Formula $C_{1}^{0,1}$
\end_inset

 al conjunto 
\begin_inset Formula $\Sigma$
\end_inset

-r.e.
 
\begin_inset Formula $A$
\end_inset

,
 pero 
\begin_inset Formula $\mathrm{Dom}(C_{1}^{0,1}|_{A})=A$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo.
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 4:
\end_layout

\end_inset

Pruebe que no es cierta la siguiente (hermosa y tentadora) propiedad
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
-
\end_layout

\end_inset

Si 
\begin_inset Formula $f:S\subseteq\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 es una funcion 
\begin_inset Formula $\Sigma$
\end_inset


\shape italic
-
\shape default
computable,
 entonces hay un macro
\begin_inset Formula 
\[
\left[\mathrm{IF\ }\chi_{S}^{\omega^{n}\times\Sigma^{\ast m}}(\mathrm{V}1,...,\mathrm{V}\bar{n},\mathrm{W}1,...,\mathrm{W}\bar{m})\ \mathrm{GOTO\ A}1\right]
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 5:
\end_layout

\end_inset

V o F o I.
 justifique.
\end_layout

\begin_deeper
\begin_layout Enumerate
Sea 
\begin_inset Formula $\Sigma$
\end_inset

 un alfabeto y sean 
\begin_inset Formula $n,m\in\omega$
\end_inset

.
 Entonces el dominio de 
\begin_inset Formula $T^{n,m}$
\end_inset

 es rectangular
\end_layout

\begin_layout Enumerate
Para cada 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 hay un 
\begin_inset Formula $\mathcal{P}^{\prime}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que 
\begin_inset Formula $\mathrm{Dom}(\Psi_{\mathcal{P}^{\prime}}^{1,0,\#})=\omega-\mathrm{Dom}(\Psi_{\mathcal{P}}^{1,0,\#})$
\end_inset

.
\end_layout

\begin_layout Enumerate
Sea 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 y supongamos que para cada 
\begin_inset Formula $x\in\omega$
\end_inset

,
 
\begin_inset Formula $\mathcal{P}$
\end_inset

 termina partiendo de 
\begin_inset Formula $\left((x,0,0...),(\varepsilon,\varepsilon,...)\right)$
\end_inset

 en a lo sumo 
\begin_inset Formula $n(\mathcal{P})^{2}+x$
\end_inset

 pasos.
 Entonces 
\begin_inset Formula $\Psi_{\mathcal{P}}^{1,0,\ast}$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-p.r.
\end_layout

\begin_layout Enumerate
Hay 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 tal que 
\begin_inset Formula $0\in D_{\Psi_{\mathcal{P}}^{1,0,\#}}$
\end_inset

 y
\begin_inset Formula 
\[
\Psi_{\mathcal{P}}^{1,0,\#}(0)=1+\min_{t}(i^{1,0}(t,0,\mathcal{P})=n(\mathcal{P})+1)
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout
Ejercicio 6:
\end_layout

\end_inset

(Opcional) (S) Pruebe que la reciproca del Ejercicio 1 no es cierta,
 es decir de un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo 
\begin_inset Formula $P:D_{P}\subseteq\omega\times\omega^{n}\times\Sigma^{\ast m}\rightarrow\omega$
\end_inset

 el cual cumpla que 
\begin_inset Formula $M(P)$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva y que 
\begin_inset Formula $D_{P}$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo (Hint:
 tome 
\begin_inset Formula $P=C_{1}^{1,1}|_{\omega\times A}$
\end_inset

) 
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Con los resultados anteriores estamos en condiciones de dar un ejemplo de un predicado 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo,
 cuya minimizacion no es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable (y por lo tanto no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva).
 Aceptaremos el resultado sin demostracion.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{proposition}
\end_layout

\end_inset

 Supongamos que 
\begin_inset Formula $\Sigma\supseteq\Sigma_{p}$
\end_inset

.
 Sea 
\begin_inset Formula $P=C_{1}^{0,1}|_{A}\circ\lambda t\alpha\left[\alpha^{1\dot{-}t}\mathrm{SKIP}^{t}\right]|_{\omega\times\mathrm{Pro}^{\Sigma}}$
\end_inset

.
 El predicado 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo pero la funcion 
\begin_inset Formula $M(P)$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable (y por lo tanto no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva) 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{proposition}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status collapsed

\begin_layout Plain Layout

\series bold
Ejercicio 7:
\end_layout

\end_inset

(Opcional) (S) Daremos aqui una guia para probar la proposicion anterior.
\end_layout

\begin_deeper
\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $P$
\end_inset

 es 
\begin_inset Formula $\Sigma$
\end_inset

-recursivo
\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $D_{M(P)}=\mathrm{Pro}^{\Sigma}$
\end_inset


\end_layout

\begin_layout Enumerate
Para cada 
\begin_inset Formula $\mathcal{P}\in\mathrm{Pro}^{\Sigma}$
\end_inset

 se tiene que
\begin_inset Formula 
\[
M(P)(\mathcal{P})=0\text{ sii }\mathcal{P}\in A
\]

\end_inset


\end_layout

\begin_layout Enumerate
Pruebe que 
\begin_inset Formula $AutoHalt^{\Sigma}=\lambda x[x=0]\circ M(P)$
\end_inset

 por lo cual 
\begin_inset Formula $M(P)$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-recursiva
\end_layout

\begin_layout Enumerate
\begin_inset Formula $M(P)$
\end_inset

 no es 
\begin_inset Formula $\Sigma$
\end_inset

-efectivamente computable
\end_layout

\end_deeper
\end_body
\end_document
